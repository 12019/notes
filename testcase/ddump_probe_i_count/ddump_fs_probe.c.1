/*
 * This module measure how much time a kernel function takes.
 * The time is measure in jiffies (/1000 to get sec). 
 *
 * The result is print in kern.info
 *
 * required files:
 * build.sh
 * Makefile
 * ddump_module.c
 * run_ddump
 *
 * run build.sh to build ddump_module.ko.
 * modify Makefile for wherever the kernel build is.
 *
 * run_ddump scan /proc/kallsyms to match up the given 
 * kernel symbol.  Pass the obtained address to 
 * ddump_module.ko when the module is inserted.
 *
 * cp ddump_module.ko & run_ddump to test machine.
 *
 * on test machine:
 * run_ddump <kernel symbol>
 */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/sched.h>
#include <linux/kprobes.h>
#include <linux/fs.h>
#include <linux/dcache.h>

// static char *first_addr = NULL;
// module_param(first_addr, charp, 0000000000000000);

// 1st probe kernel symbol
static long addr_1st;
module_param(addr_1st, long, 0000);

// 2nd probe kernel symbol
static long addr_2nd;
module_param(addr_2nd, long, 0000);

static struct kprobe kp1;
static struct kretprobe kp1_ret;
static struct kprobe kp2;
static struct kretprobe kp2_ret;

bool	is_kp2 = false;

static int
blkdev_open_pre_handler(struct kprobe *p, struct pt_regs *regs)
{
	// 0xffff811f807f1cb8 is /dev/sda inode
	if (regs->rdi == 0xffff811f807f1cb8) {
	 	printk("james /dev/sda is opned by %p %d %s\n",
			current, current->pid, current->comm);
	}

	return 0;
}

static int
do_sys_open_pre_handler(struct kprobe *p, struct pt_regs *regs)
{
	if (0 == strcmp(regs->rsi,"/dev/sda")) {
		// flags is 3rd arg/rdx, and it's octal
	 	printk("james /dev/sda %lo is opned by %d %s\n",
			regs->rdx, current->pid, current->comm);
	}
	if (0 == strcmp(regs->rsi,"/dev/sdb")) {
		// flags is 3rd arg/rdx, and it's octal
	 	printk("james /dev/sdb %lo is opned by %d %s\n",
			regs->rdx, current->pid, current->comm);
	}
	if (0 == strcmp(regs->rsi,"/dev/sdc")) {
		// flags is 3rd arg/rdx, and it's octal
	 	printk("james /dev/sdc %lo is opned by %d %s\n",
			regs->rdx, current->pid, current->comm);
	}
	if (0 == strcmp(regs->rsi,"/dev/sdd")) {
		// flags is 3rd arg/rdx, and it's octal
	 	printk("james /dev/sdd %lo is opned by %d %s\n",
			regs->rdx, current->pid, current->comm);
	}

	return 0;
}

// looking for the inode the match the target
static int
do_sync_write_pre_handler(struct kprobe *p, struct pt_regs *regs)
{
	struct file *filp = regs->rdi;
	struct dentry *dp = filp->f_path.dentry;

	if (0xffff810fd87d4490 == dp->d_inode) {
		// sda 
		printk("james /dev/sda %ld %x is written by %s\n",
			regs->rdx, regs->rcx, current->comm);
	} else if (0xffff810fd5cfd648 == dp->d_inode) {
		// sdb 
		printk("james /dev/sdb %ld %x is written by %s\n",
			regs->rdx, regs->rcx, current->comm);
	} else if (0xffff810a0ed5cb80 == dp->d_inode) {
		// sdc 
		printk("james /dev/sdc %ld %x is written by %s\n",
			regs->rdx, regs->rcx, current->comm);
	} else if (0xffff811f8300a178 == dp->d_inode) {
		// sdd 
		printk("james /dev/sdd %ld %x is written by %s\n",
			regs->rdx, regs->rcx, current->comm);
	}

	return 0;
}

static int
kp1_ret_handler(struct kretprobe_instance *ri, struct pt_regs *regs)
{

	return 0;
}

static int
kp2_ret_handler(struct kretprobe_instance *ri, struct pt_regs *regs)
{
	return 0;
}

// The probed addr is given by the user script
// The user script scan /proc/kallsyms
int init_module(void)
{
	int	ret;

	kp1.pre_handler = do_sys_open_pre_handler;
//	kp1.post_handler = kp1_post_handler;
//	kp1_ret.handler = kp1_ret_handler;

	if (NULL == (long *) addr_1st) {
		printk("must provide an instructmented addr\n");
		return 1;
	} else {
		printk("addr_1st is %lx\n", addr_1st);
	}
	// need to export kallsyms_lookup_name first
	// kp1.addr = kp1_ret.kp.addr = (kprobe_opcode_t *)addr_1st;
	kp1.addr = (kprobe_opcode_t *)addr_1st;

	if ((ret = register_kprobe(&kp1)) < 0) {
		printk("register_kprobe failed, ret %d\n", ret);
		return ret;
	}
#if 0
	if ((ret = register_kretprobe(&kp1_ret)) < 0) {
		printk("register_kretprobe failed, ret %d\n", ret);
		unregister_kprobe(&kp1);
		return ret;
	}
#endif
	printk("kprobe 1 registered\n");

	if (NULL == (long *) addr_2nd) {
		printk("2nd param is ignored\n");
	} else {
		printk("addr_2nd is %lx\n", addr_2nd);
		kp2.pre_handler = do_sync_write_pre_handler;

		// need to export kallsyms_lookup_name first
		kp2.addr = (kprobe_opcode_t *)addr_2nd;

		if ((ret = register_kprobe(&kp2)) < 0) {
			printk("register_kprobe failed, ret %d\n", ret);
			return ret;
		}
#if 0
		if ((ret = register_kretprobe(&kp2_ret)) < 0) {
			printk("register_kretprobe failed, ret %d\n", ret);
			unregister_kprobe(&kp1);
			return ret;
		}
#endif
		is_kp2 = true;
		printk("kprobe 2 registered\n");
	}
	return 0;
}

void cleanup_module(void)
{
	unregister_kprobe(&kp1);
	// unregister_kretprobe(&kp1_ret);
	if (is_kp2) {
		unregister_kprobe(&kp2);
		//unregister_kretprobe(&kp2_ret);
	}
	printk("kprobe unregistered\n");
}

MODULE_LICENSE("GPL");
