tcp client
client
	socket()
		inet_addr()
		gethostbyname()
	connect()
	--------- connected

	write()
	read()

	close()

udp server

	socket()
	bind()

	------- wait for requests
	recvfrom()
	sendto()

	close()

udp client
	socket()
	gethostbyname()

	sendto()
	recvfrom()

	close()

net/sock.h
struct proto {
	void			(*close)(struct sock *sk, 
					long timeout);

struct tcp_sock {


crash> struct -o socket
struct socket {
   [0x0] socket_state state;
   [0x4] short int type;
   [0x8] long unsigned int flags;
  [0x10] struct socket_wq *wq;
  [0x18] struct file *file;
  [0x20] struct sock *sk;
  [0x28] const struct proto_ops *ops;
}

crash> struct -o sock
struct sock {
    [0x0] struct sock_common __sk_common;
   [0x50] socket_lock_t sk_lock;
   [0x78] struct sk_buff_head sk_receive_queue;
          struct {
              atomic_t rmem_alloc;
              int len;
              struct sk_buff *head;
              struct sk_buff *tail;
   [0x98] } sk_backlog;
   [0xb0] int sk_forward_alloc;
   [0xb4] __u32 sk_rxhash;
   [0xb8] atomic_t sk_drops;
   [0xbc] int sk_rcvbuf;
   [0xc0] struct sk_filter *sk_filter;
   [0xc8] struct socket_wq *sk_wq;
   [0xd0] struct xfrm_policy *sk_policy[2];
   [0xe0] long unsigned int sk_flags;
   [0xe8] struct dst_entry *sk_dst_cache;
   [0xf0] spinlock_t sk_dst_lock;
   [0xf8] atomic_t sk_wmem_alloc;
   [0xfc] atomic_t sk_omem_alloc;
  [0x100] int sk_sndbuf;
  [0x108] struct sk_buff_head sk_write_queue;
  [0x128] unsigned int sk_shutdown : 2;
  [0x128] unsigned int sk_no_check : 2;
  [0x128] unsigned int sk_userlocks : 4;
  [0x129] unsigned int sk_protocol : 8;
  [0x12a] unsigned int sk_type : 16;
  [0x12c] int sk_wmem_queued;
  [0x130] gfp_t sk_allocation;
  [0x134] int sk_route_caps;
  [0x138] int sk_route_nocaps;
  [0x13c] int sk_gso_type;
  [0x140] unsigned int sk_gso_max_size;
  [0x144] u16 sk_gso_max_segs;
  [0x148] int sk_rcvlowat;
  [0x150] long unsigned int sk_lingertime;
  [0x158] struct sk_buff_head sk_error_queue;
  [0x178] struct proto *sk_prot_creator;
  [0x180] rwlock_t sk_callback_lock;
  [0x18c] int sk_err;
  [0x190] int sk_err_soft;
  [0x194] short unsigned int sk_ack_backlog;
  [0x196] short unsigned int sk_max_ack_backlog;
  [0x198] __u32 sk_priority;
  [0x1a0] struct pid *sk_peer_pid;
  [0x1a8] const struct cred *sk_peer_cred;
  [0x1b0] long int sk_rcvtimeo;
  [0x1b8] long int sk_sndtimeo;
  [0x1c0] void *sk_protinfo;
  [0x1c8] struct timer_list sk_timer;
  [0x200] ktime_t sk_stamp;
  [0x208] struct socket *sk_socket;
  [0x210] void *sk_user_data;
  [0x218] struct page *sk_sndmsg_page;
  [0x220] struct sk_buff *sk_send_head;
  [0x228] __u32 sk_sndmsg_off;
  [0x22c] int sk_write_pending;
  [0x230] __u32 sk_mark;
  [0x234] u32 sk_classid;
  [0x238] void (*sk_state_change)(struct sock *);
  [0x240] void (*sk_data_ready)(struct sock *, int);
  [0x248] void (*sk_write_space)(struct sock *);
  [0x250] void (*sk_error_report)(struct sock *);
  [0x258] int (*sk_backlog_rcv)(struct sock *, struct sk_buff *);
  [0x260] void (*sk_destruct)(struct sock *);
}


tcp
tcp_v4_connect() - This will initiate an outgoing connection
do_pmtu_discovery() - This routine does path mtu discovery as defined in RFC1191
tcp_v4_err() - This routine is called by the ICMP module when it gets some

tcp_v4_send_reset()
tcp_v4_send_ack()
tcp_v4_send_synack()

tcp_v4_conn_request()
tcp_v4_syn_recv_sock
tcp_v4_hnd_req

tcp_v4_rcv()

IP
ip_build_and_send_pkt() - Add an ip header to a skbuff and send it out

ip_fragment() - This IP datagram is too large to be sent in one piece.

ip_append_data()
ip_append_page()

ip_push_pending_frames - Combined all pending IP fragments on the socket as one IP datagram

ip_send_reply()

inet
inet_stream_ops
	inet_autobind()
	inet_listen()
	inet_create()
	inet_release()
	inet_bind()
	inet_dgram_connect()
	inet_wait_for_connect()
	inet_stream_connect()
	inet_accept()
	inet_getname()
	inet_sendmsg()
inet_dgram_ops
inet_sockraw_ops
inetsw_array - Upon startup we insert all the elements in inetsw_array[] into

