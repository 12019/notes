/*
 * Copyright (C) 2006 Daniel Berrange, Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU General Public License v.2.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
*/

global start

function get_usertime:long() %{
  THIS->__retvalue = current->utime + current->signal->utime;
%}

function get_systime:long() %{
  THIS->__retvalue = current->stime + current->signal->stime;
%}

function timestamp:long() {
  return gettimeofday_ms() - start
}

function proc:string() {
  return sprintf("%d (%s)", pid(), execname())
}

probe begin {
 start = gettimeofday_ms()
}

probe syscall.fork.return {
  printf("%d %s fork %d\n", timestamp(), proc(), $return)
}

probe syscall.execve {
  printf("%d %s exec %s\n", timestamp(), proc(), kernel_string($filename))
}

