>>> lsc()
arpcachepoison      : Poison target's cache with (your MAC,victim's IP) couple
arping              : Send ARP who-has requests to determine which hosts are up
bind_layers         : Bind 2 layers on some specific fields' values
bridge_and_sniff    : Forward traffic between two interfaces and sniff packets exchanged
corrupt_bits        : Flip a given percentage or number of bits from a string
corrupt_bytes       : Corrupt a given percentage or number of bytes from a string
defrag              : defrag(plist) -> ([not fragmented], [defragmented],
defragment          : defrag(plist) -> plist defragmented as much as possible 
dyndns_add          : Send a DNS add message to a nameserver for "name" to have a new "rdata"
dyndns_del          : Send a DNS delete message to a nameserver for "name"
etherleak           : Exploit Etherleak flaw
fragment            : Fragment a big IP datagram
fuzz                : Transform a layer into a fuzzy layer by replacing some default values by random objects
getmacbyip          : Return MAC address corresponding to a given IP address
hexdiff             : Show differences between 2 binary strings
hexdump             : --
hexedit             : --
is_promisc          : Try to guess if target is in Promisc mode. The target is provided by its ip.
linehexdump         : --
ls                  : List  available layers, or infos on a given layer
promiscping         : Send ARP who-has requests to determine which hosts are in promiscuous mode
rdpcap              : Read a pcap file and return a packet list
send                : Send packets at layer 3
sendp               : Send packets at layer 2
sendpfast           : Send packets at layer 2 using tcpreplay for performance
sniff               : Sniff packets
split_layers        : Split 2 layers previously bound
sr                  : Send and receive packets at layer 3
sr1                 : Send packets at layer 3 and return only the first answer
srbt                : send and receive using a bluetooth socket
srbt1               : send and receive 1 packet using a bluetooth socket
srflood             : Flood and receive packets at layer 3
srloop              : Send a packet at layer 3 in loop and print the answer each time
srp                 : Send and receive packets at layer 2
srp1                : Send and receive packets at layer 2 and return only the first answer
srpflood            : Flood and receive packets at layer 2
srploop             : Send a packet at layer 2 in loop and print the answer each time
traceroute          : Instant TCP traceroute
tshark              : Sniff packets and print them calling pkt.show(), a bit like text wireshark
wireshark           : Run wireshark on a list of packets
wrpcap              : Write a list of packets to a pcap file

$ sudo scapy

>>> report_ports("137.69.76.220",(440,443))
Begin emission:
........................*..Finished to send 4 packets.
*.*..*
Received 33 packets, got 4 answers, remaining 0 packets
'\\begin{tabular}{|r|l|l|}\n\\hline\n\\hline\n440 & closed & TCP RA \\\\\n441 & closed & TCP RA \\\\\n442 & closed & TCP RA \\\\\nhttps & closed & TCP RA \\\\\n\\hline\n\\hline\n\\end{tabular}\n'


>>> ans,unans=sr(IP(dst="10.25.130.49", ttl=(4,25), id=RandShort())/TCP(flags=0x2))
Begin emission:
...................................................*.*..**..*..*.*..*.*..*.*.*..*Finished to send 22 packets.
.....*..*.*..*.*..*.*..*..*
Received 108 packets, got 22 answers, remaining 0 packets
>>> for snd,rcv in ans:
...   print snd.ttl, rcv.src, isinstance(rcv.payload, TCP)
... 
4 10.25.254.13 False

>>> pkts = rdpcap("./test.cap")
>>> hexdump(pkts)
0000   5B 1B 5B 30 6D 3C 1B 5B  30 6D 1B 5B 33 31 6D 1B   [.[0m<.[0m.[31m.
0010   5B 31 6D 45 74 68 65 72  1B 5B 30 6D 20 20 1B 5B   [1mEther.[0m  .[
...

>>> pkts.show()
0000 Ether / IP / TCP 137.69.76.181:5901 > 137.69.76.113:58631 PA / Raw
0001 Ether / IP / TCP 137.69.76.113:58631 > 137.69.76.181:5901 A
0002 Ether / IP / TCP 137.69.76.181:5901 > 137.69.76.113:58631 PA / Raw
0003 Ether / IP / TCP 137.69.76.113:58631 > 137.69.76.181:5901 A
0004 Ether / IP / TCP 137.69.76.113:58631 > 137.69.76.181:5901 A
0005 Ether / IP / TCP 137.69.76.113:58631 > 137.69.76.181:5901 A
0006 Ether / IP / TCP 137.69.76.181:5901 > 137.69.76.113:58631 PA / Raw
...

>>> pkts[178]
<Ether  dst=ff:ff:ff:ff:ff:ff src=01:80:c2:00:00:01 type=0x8874 |<Raw  load='\xe3\xd0\xcd\xac\\53\xc1!\xd4@@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' |>>

>>> pkts[1]
<Ether  dst=14:fe:b5:e2:7a:35 src=68:5b:35:a7:be:4d type=IPv4 |<IP  version=4L ihl=5L tos=0x0 len=52 id=45247 flags=DF frag=0L ttl=64 proto=tcp chksum=0xde53 src=137.69.76.113 dst=137.69.76.181 options=[] |<TCP  sport=58631 dport=5901 seq=3503304386 ack=1757354688 dataofs=8L reserved=0L flags=A window=4005 chksum=0xdcf1 urgptr=0 options=[('NOP', None), ('NOP', None), ('Timestamp', (64553173, 496844035))] |>>>


>>> a,u=traceroute(["www.google.com"])
Begin emission:
****************************Finished to send 30 packets.
**
Received 30 packets, got 30 answers, remaining 0 packets
   64.233.176.105:tcp80 
1  137.69.76.1     11   
2  137.69.69.17    11   
3  137.69.69.89    11   
4  137.69.69.157   11   
5  137.69.69.5     11   
6  10.13.150.5     11   
7  10.13.149.53    11   
8  10.13.149.33    11   
9  10.13.150.234   11   
10 64.233.176.105  SA   
11 64.233.176.105  SA   

>>> a.trace3D()
