0000000000000000 - 00007fffffffffff (47 bits) user space, different per mm
hole [48:63] sign extension
ffff800000000000 - ffff80ffffffffff (40 bits) guard hole
ffff880000000000 - ffffc7ffffffffff (64 TB) direct mapping of all phys. mem
ffffc80000000000 - ffffc8ffffffffff (40 bits) hole
ffffc90000000000 - ffffe8ffffffffff (45 bits) vmalloc/ioremap space
ffffe90000000000 - ffffe9ffffffffff (40 bits) hole
ffffea0000000000 - ffffeaffffffffff (40 bits) virtual memory map (1TB)
... unused hole ...
ffffffff80000000 - ffffffffa0000000 (512MB) kernel text mapping, from phys 0
ffffffffa0000000 - fffffffffff00000 (1536MB) module mapping space

The direct mapping covers all memory in the system up to the highest memory
address (this means in some cases it can also include PCI memory holes)

vmalloc space is lazily synchronized into the different PML4 pages of the
processes using the page fault handler, with init_level4_pgt as reference

	vmalloc_sync_all() - make sure the pagetables are constructed in process
				kernel mappings

current x86-64 implementations only support 40 bits of address space, but
we support up to 46 bits.  this expands into MBZ space in the page tables.

#define __KERNEL_ALIGN		0x200000
#define CONFIG_PHYSICAL_START 0x200000
#define __PHYSICAL_START	CONFIG_PHYSICAL_START
#define __START_KERNEL		(__START_KERNEL_map + __PHYSICAL_START) 
	=> 0xffffffff8200000
#define __START_KERNEL_map	_AC(0xffffffff80000000, UL)
#define KERNEL_TEXT_SIZE  (40*1024*1024)
#define KERNEL_TEXT_START _AC(0xffffffff80000000, UL)
#define __PAGE_OFFSET           _AC(0xffff810000000000, UL)
#define MAXMEM _AC(0x3fffffffffff, UL)
#define VMALLOC_START    _AC(0xffffc20000000000, UL)
#define VMALLOC_END      _AC(0xffffe1ffffffffff, UL)
#define MODULES_VADDR    _AC(0xffffffff88000000, UL)
#define MODULES_END      _AC(0xfffffffffff00000, UL)


0xffff8000 00000000
	guard 
0xffff8100 00000000	PAGE_OFFSET
	identity mapped pages 2^46 bits (MAXMEM)
0x???????? ????????
	guard
0xffffc20 000000000 	VMALLOC_START

0xffffe1f fffffffff	VMALLOC_END




	BUILD_BUG_ON(!(MODULES_VADDR > __START_KERNEL));
	
	BUILD_BUG_ON(!(((MODULES_END - 1) & PGDIR_MASK) == 
				(__START_KERNEL & PGDIR_MASK)));

crash> px (0xffffffff80000000+0x200000)
$3 = 0xffffffff80200000
crash> px (0xffffffff80200000&(0x8000000000-1))
$4 = 0x7f80200000
crash> px (0xfffffffffff00000-1)
$5 = 0xffffffffffefffff
crash> px (0xffffffffffefffff & (0x8000000000-1))
$6 = 0x7fffefffff

