A Unix system maintains time as the number of seconds since the Unix Epoch, which 
was at midnight Jan 1, 1970 UTC.  32-bit maximum time is 2147483647 which would be 
Jan 18, 2038 at 22:14:07.

NTP: Network TIme Protocol

Timer interrupts are generated by the system's timing hardware at regular intervals;
this interval is set by the kernel according to the value of HZ, which is an
architecture-dependent value defined in <linux/param.h>.  Current Linux versions
define HZ to be 100 for most platforms, but some platforms use 1024, and the IA-64
simulator uses 20.  Despite what your preferred platform uses, no driver writer
should count on any specific value of HZ.

Every time a timer interrupt occurs, the value of jiffies is incremented.  jiffies
is initialized to 0 when the system boots, and is thus the number of clock ticks
since the computer was turned on.  It's declared in <linux/sched.h> as unsigned
long volatile, and will possibly overflow after a long time of continuous
system operation (but no platformm features jiffy overflow in less than 16 months
of uptime).  Much effort has gone into ensuring that the kernel operates properly
when jiffies overflows.

TSC (time stamp counter) is incremented every cpu tick (1/CPU_HZ)

The original kernel timer system (called the "timer wheel") was based on incrementing
a kernel-internal value (jiffies) every timer interrupt.  The timer interrupt
becomes the default scheduling quamtum, and all other timers are based on jiffies.
The timer interrupt rate (and jiffy increment rate) is defined by a compile-time
constant called HZ.  Different platforms use different values for HZ.  Historically,
the kernel used 100 as the value for HZ, yielding a jiffy interval of 10 ms.  
With 2.4, the HZ value for i386 was changed to 1000, yeilding a jiffy interval of
1 ms.  Recently (2.6.13) the kernel changed HZ for i386 to 250. (1000 was deemed 
too high).

Dynamic ticks
Tickless kernel, dynamic ticks or NO_HZ is a config option that enables a kernel
to run without a regular timer tick.  The timer tick is a timer interrupt that is
usually generated HZ times per second, with the value of HZ being set at compile
time and varying between around 100 to 1500.  Running without a timer tick means
the kernel does less work when idle and can potentially save power because it 
does not have to wake up regularly just to service time timer.  The configuration 
option is CONFIG_NO_HZ and is set by Tickless System (Dynamic Ticks), on the
Kernel Features configuration menu.


Beginning with the Pentium processor, Intel processors allow the programmer to 
access a time-stamp counter.  The time-stamp counter keeps an accurate count
of every cycle that occurs on the processor.  The Intel time-stamp counter is a
64-bit MSR (model specific register) that is incremented every clock cycle.
On reset, the time-stamp counter is set to zero.


#include <linux/param.h>
HZ

#include <linux/sched.h>
volatile unsigned long jiffies

Read the timestamp counter or its lower half.  THe header and macros are specific
to PC-class processors; other platform may need asm constructs to achieve
similar results.

#include <asm/msr.h>
rdtsc(low, high);
rdtscl(low);

extern struct timeval xtime;


update jiffies when idle was interrupted.
tick_nohz_update_jiffies()


do_IRQ:
	irq_enter()
		if idle: tick_nohz_update_jiffies()

void irq_enter(void)
{
	__irq_enter();
#ifdef CONFIG_NO_HZ
	if (idle_cpu(smp_processor_id()))
		tick_nohz_update_jiffies();
#endif
}

