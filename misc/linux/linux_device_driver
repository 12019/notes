insmod
modprobe
rmmod

#include <linux/init.h>
module_init(init_function);
module_exit(cleanup_function);

__init
__initdata
__exit
__exitdata

obj-m
	A makefile symbol used by the kernel build system to determine
	which modules should be built in the current directory.

#include <linux/module.h>
#include <linux/version.h>

ls -l
	char drivers             major minor
	crw-rw----   1 root root 203,   0 May 13 00:59 cpu0
	crw-rw----   1 root root 203,   1 May 13 00:59 cpu1
	crw-rw----   1 root root 203,   2 May 13 00:59 cpu2
	crw-rw----   1 root root 203,   3 May 13 00:59 cpu3
	crw-rw----   1 root root 203,   4 May 13 00:59 cpu4
	crw-rw----   1 root root 203,   5 May 13 00:59 cpu5
	crw-rw----   1 root root 203,   6 May 13 00:59 cpu6

	block drivers
	brw-r-----   1 root disk 253,   0 May 13 00:59 dm-0
	brw-r-----   1 root disk 253,   1 May 13 00:59 dm-1

MAJOR(dev_t dev);
MINOR(dev_t dev);
MKDEV(int major, int minor);

if (printk_ratelimit())
	printk(KERN_NOTICE "The printer is still on fire\n");


Alternatives to Locking
	Lock-Free Algorithms - such as circular buffer
	Atomic Variables
	Bit Operations
		set_bit()
		clear_bit()
		change_bit()
	seqlocks
		generally cannot be used to protect data structures
		involving pointers, bcoz the reader may be following
		a pointer that is invalid while the writer is
		changing the data structure.

		compare the seq value on exit.  If mismatch, retry.

		do {
			seq = read_seqbegin(&the_lock);
			/ * do something */
		} while read_seqretry(&the_lock, seq);

	Read-Copy_Update (RCU)
		optimized for reads are common and writes are rare.
		The resource being protected should be accessed via 
		pointers, and all references to those resources
		must be held only by atomic code.  When the data 
		structure needs to be changed, the writting thread
		makes a copy, changes the copy, then aims the 
		relevant pointer at the new version.

		struct my_stuff *stuff
		rcu_read_lock()
		stuff = find_the_stuff(args...)
		do_something_with(stuff)
		rcu_read_unlock()


mknod()/stat()
	# mknod /dev/mycdrv major minor

Major/Minor
	first = MKDEV(my_major, my_minor);

Reserving Major/Minor Number
	int register_chrdev_region(dev_t first, unsigned int count, char *name)
	void unregister_chrdev_region(dev_t first, unsigned int count)

Dynamic Allocation of Major
	int alloc_chrdev_region (dev_t *first, unsigned int firstminor, unsigned int count, char *name);

registering the device
	struct cdev *cdev_alloc(void);
	void cdev_init (struct cdev *p, const struct file_operations *fops);
	void cdev_put (struct cdev *p)
	struct kobject *cdev_get (struct cdev *p);
	int cdev_add (struct cdev *p, dev_t first, unsigned count);
	void cdev_del (struct cdev *p);

udev & HAL
	struct class *class_create (struct module *owner, const char *name);
	struct device *device_create (struct class *cls, struct device *parent, dev_t devt,
					void *drvdata, const char *fmt, ...);
	void device_destroy (struct class *cls, dev_t dev);
	void class_destroy (struct class *cls);
