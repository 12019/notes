 --- modulename: py_file, funcname: <module>
0.00 py_file.py(9): """
0.00 py_file.py(10): from fabric.api import *
 --- modulename: __init__, funcname: <module>
0.00 __init__.py(3): """
 --- modulename: api, funcname: <module>
0.01 api.py(8): """
0.01 api.py(9): from fabric.context_managers import cd, hide, settings, show, path, prefix, lcd
 --- modulename: context_managers, funcname: <module>
0.01 context_managers.py(8): """
0.01 context_managers.py(10): from contextlib import contextmanager, nested
 --- modulename: contextlib, funcname: <module>
0.01 contextlib.py(1): """Utilities for with-statement contexts.  See PEP 343."""
0.02 contextlib.py(3): import sys
0.02 contextlib.py(4): from functools import wraps
 --- modulename: functools, funcname: <module>
0.02 functools.py(2): """
0.02 functools.py(10): from _functools import partial, reduce
0.02 functools.py(15): WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__')
0.02 functools.py(16): WRAPPER_UPDATES = ('__dict__',)
0.02 functools.py(19):                    assigned = WRAPPER_ASSIGNMENTS,
0.02 functools.py(20):                    updated = WRAPPER_UPDATES):
0.02 functools.py(40):           assigned = WRAPPER_ASSIGNMENTS,
0.02 functools.py(41):           updated = WRAPPER_UPDATES):
0.02 functools.py(53): def total_ordering(cls):
0.02 functools.py(80): def cmp_to_key(mycmp):
0.02 contextlib.py(5): from warnings import warn
0.02 contextlib.py(7): __all__ = ["contextmanager", "nested", "closing"]
0.02 contextlib.py(9): class GeneratorContextManager(object):
 --- modulename: contextlib, funcname: GeneratorContextManager
0.02 contextlib.py(9): class GeneratorContextManager(object):
0.02 contextlib.py(10):     """Helper for @contextmanager decorator."""
0.02 contextlib.py(12):     def __init__(self, gen):
0.02 contextlib.py(15):     def __enter__(self):
0.02 contextlib.py(21):     def __exit__(self, type, value, traceback):
0.02 contextlib.py(54): def contextmanager(func):
0.02 contextlib.py(88): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
0.02 contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.02 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.02 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.02 functools.py(32):     for attr in assigned:
0.02 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.02 functools.py(32):     for attr in assigned:
0.02 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.02 functools.py(32):     for attr in assigned:
0.02 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.02 functools.py(32):     for attr in assigned:
0.02 functools.py(34):     for attr in updated:
0.02 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.02 functools.py(34):     for attr in updated:
0.02 functools.py(37):     return wrapper
0.02 contextlib.py(85):     return helper
0.02 contextlib.py(132): class closing(object):
 --- modulename: contextlib, funcname: closing
0.02 contextlib.py(132): class closing(object):
0.02 contextlib.py(148):     """
0.02 contextlib.py(149):     def __init__(self, thing):
0.02 contextlib.py(151):     def __enter__(self):
0.02 contextlib.py(153):     def __exit__(self, *exc_info):
0.02 context_managers.py(11): import sys
0.02 context_managers.py(13): from fabric.state import env, output, win32
 --- modulename: state, funcname: <module>
0.02 state.py(3): """
0.02 state.py(5): import os
0.02 state.py(6): import sys
0.02 state.py(7): from optparse import make_option
 --- modulename: optparse, funcname: <module>
0.02 optparse.py(22): """
0.03 optparse.py(24): __version__ = "1.5.3"
0.03 optparse.py(26): __all__ = ['Option',
0.03 optparse.py(27):            'make_option',
0.03 optparse.py(28):            'SUPPRESS_HELP',
0.03 optparse.py(29):            'SUPPRESS_USAGE',
0.03 optparse.py(30):            'Values',
0.03 optparse.py(31):            'OptionContainer',
0.03 optparse.py(32):            'OptionGroup',
0.03 optparse.py(33):            'OptionParser',
0.03 optparse.py(34):            'HelpFormatter',
0.03 optparse.py(35):            'IndentedHelpFormatter',
0.03 optparse.py(36):            'TitledHelpFormatter',
0.03 optparse.py(37):            'OptParseError',
0.03 optparse.py(38):            'OptionError',
0.03 optparse.py(39):            'OptionConflictError',
0.03 optparse.py(40):            'OptionValueError',
0.03 optparse.py(41):            'BadOptionError']
0.03 optparse.py(73): """
0.03 optparse.py(75): import sys, os
0.03 optparse.py(76): import types
0.03 optparse.py(77): import textwrap
 --- modulename: textwrap, funcname: <module>
0.03 textwrap.py(2): """
0.03 textwrap.py(8): __revision__ = "$Id$"
0.03 textwrap.py(10): import string, re
0.03 textwrap.py(20): __all__ = ['TextWrapper', 'wrap', 'fill', 'dedent']
0.03 textwrap.py(30): _whitespace = '\t\n\x0b\x0c\r '
0.03 textwrap.py(32): class TextWrapper:
 --- modulename: textwrap, funcname: TextWrapper
0.03 textwrap.py(32): class TextWrapper:
0.03 textwrap.py(72):     """
0.03 textwrap.py(74):     whitespace_trans = string.maketrans(_whitespace, ' ' * len(_whitespace))
0.03 textwrap.py(76):     unicode_whitespace_trans = {}
0.03 textwrap.py(77):     uspace = ord(u' ')
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(79):         unicode_whitespace_trans[x] = uspace
0.03 textwrap.py(78):     for x in map(ord, _whitespace):
0.03 textwrap.py(87):     wordsep_re = re.compile(
0.03 textwrap.py(88):         r'(\s+|'                                  # any whitespace
 --- modulename: re, funcname: compile
0.03 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.03 re.py(228):     cachekey = (type(key[0]),) + key
0.03 re.py(229):     p = _cache.get(cachekey)
0.03 re.py(230):     if p is not None:
0.03 re.py(232):     pattern, flags = key
0.03 re.py(233):     if isinstance(pattern, _pattern_type):
0.03 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.03 sre_compile.py(475):     for tp in STRING_TYPES:
0.04 sre_compile.py(476):         if isinstance(obj, tp):
0.04 sre_compile.py(477):             return 1
0.04 re.py(239):     try:
0.04 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.04 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.04 sre_compile.py(475):     for tp in STRING_TYPES:
0.04 sre_compile.py(476):         if isinstance(obj, tp):
0.04 sre_compile.py(477):             return 1
0.04 sre_compile.py(499):         pattern = p
0.04 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.04 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.04 sre_parse.py(179):         self.string = string
0.04 sre_parse.py(180):         self.index = 0
0.04 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.04 sre_parse.py(183):         if self.index >= len(self.string):
0.04 sre_parse.py(186):         char = self.string[self.index]
0.04 sre_parse.py(187):         if char[0] == "\\":
0.04 sre_parse.py(193):         self.index = self.index + len(char)
0.04 sre_parse.py(194):         self.next = char
0.04 sre_parse.py(668):     if pattern is None:
0.04 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(68):         self.flags = 0
0.05 sre_parse.py(69):         self.open = []
0.05 sre_parse.py(70):         self.groups = 1
0.05 sre_parse.py(71):         self.groupdict = {}
0.05 sre_parse.py(670):     pattern.flags = flags
0.05 sre_parse.py(671):     pattern.str = str
0.05 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.05 sre_parse.py(304):     items = []
0.05 sre_parse.py(305):     itemsappend = items.append
0.05 sre_parse.py(306):     sourcematch = source.match
0.05 sre_parse.py(307):     while 1:
0.05 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.05 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(93):             data = []
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(384):     subpatternappend = subpattern.append
0.05 sre_parse.py(385):     sourceget = source.get
0.05 sre_parse.py(386):     sourcematch = source.match
0.05 sre_parse.py(387):     _len = len
0.05 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.05 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.05 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.05 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.05 sre_parse.py(393):     while 1:
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(521):         elif this == ".":
0.05 sre_parse.py(524):         elif this == "(":
0.05 sre_parse.py(525):             group = 1
0.05 sre_parse.py(526):             name = None
0.05 sre_parse.py(527):             condgroup = None
0.05 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(623):             if group:
0.05 sre_parse.py(625):                 if group == 2:
0.05 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.05 sre_parse.py(73):         gid = self.groups
0.05 sre_parse.py(74):         self.groups = gid + 1
0.05 sre_parse.py(75):         if name is not None:
0.05 sre_parse.py(81):         self.open.append(gid)
0.05 sre_parse.py(82):         return gid
0.05 sre_parse.py(630):                 if condgroup:
0.05 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.05 sre_parse.py(304):     items = []
0.05 sre_parse.py(305):     itemsappend = items.append
0.05 sre_parse.py(306):     sourcematch = source.match
0.05 sre_parse.py(307):     while 1:
0.05 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.05 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(93):             data = []
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(384):     subpatternappend = subpattern.append
0.05 sre_parse.py(385):     sourceget = source.get
0.05 sre_parse.py(386):     sourcematch = source.match
0.05 sre_parse.py(387):     _len = len
0.05 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.05 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.05 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.05 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.05 sre_parse.py(393):     while 1:
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(521):         elif this == ".":
0.05 sre_parse.py(524):         elif this == "(":
0.05 sre_parse.py(648):         elif this == "^":
0.05 sre_parse.py(651):         elif this == "$":
0.05 sre_parse.py(654):         elif this and this[0] == "\\":
0.05 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.05 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(260):     if code:
0.05 sre_parse.py(261):         return code
0.05 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(474):             if this == "?":
0.05 sre_parse.py(476):             elif this == "*":
0.05 sre_parse.py(479):             elif this == "+":
0.05 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.05 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
0.05 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.05 sre_parse.py(135):         self.data[index] = code
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(396):             break # end of subpattern
0.05 sre_parse.py(661):     return subpattern
0.05 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(310):             continue
0.05 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.05 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(93):             data = []
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(384):     subpatternappend = subpattern.append
0.05 sre_parse.py(385):     sourceget = source.get
0.05 sre_parse.py(386):     sourcematch = source.match
0.05 sre_parse.py(387):     _len = len
0.05 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.05 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.05 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.05 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.05 sre_parse.py(393):     while 1:
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(417):             set = []
0.05 sre_parse.py(418):             setappend = set.append
0.05 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(422):                 setappend((NEGATE, None))
0.05 sre_parse.py(424):             start = set[:]
0.05 sre_parse.py(425):             while 1:
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(429):                 elif this and this[0] == "\\":
0.05 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.05 sre_parse.py(227):     code = ESCAPES.get(escape)
0.05 sre_parse.py(228):     if code:
0.05 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(231):     if code:
0.05 sre_parse.py(232):         return code
0.05 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(459):                     if code1[0] is IN:
0.05 sre_parse.py(460):                         code1 = code1[1][0]
0.05 sre_parse.py(461):                     setappend(code1)
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(429):                 elif this and this[0] == "\\":
0.05 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.05 sre_parse.py(227):     code = ESCAPES.get(escape)
0.05 sre_parse.py(228):     if code:
0.05 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(231):     if code:
0.05 sre_parse.py(232):         return code
0.05 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(459):                     if code1[0] is IN:
0.05 sre_parse.py(460):                         code1 = code1[1][0]
0.05 sre_parse.py(461):                     setappend(code1)
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(428):                     break
0.05 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.05 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.05 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(474):             if this == "?":
0.05 sre_parse.py(476):             elif this == "*":
0.05 sre_parse.py(477):                 min, max = 0, MAXREPEAT
0.05 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
0.05 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.05 sre_parse.py(135):         self.data[index] = code
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(521):         elif this == ".":
0.05 sre_parse.py(524):         elif this == "(":
0.05 sre_parse.py(648):         elif this == "^":
0.05 sre_parse.py(651):         elif this == "$":
0.05 sre_parse.py(654):         elif this and this[0] == "\\":
0.05 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.05 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(260):     if code:
0.05 sre_parse.py(261):         return code
0.05 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(474):             if this == "?":
0.05 sre_parse.py(476):             elif this == "*":
0.05 sre_parse.py(479):             elif this == "+":
0.05 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.05 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
0.05 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.05 sre_parse.py(135):         self.data[index] = code
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(417):             set = []
0.05 sre_parse.py(418):             setappend = set.append
0.05 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(422):                 setappend((NEGATE, None))
0.05 sre_parse.py(424):             start = set[:]
0.05 sre_parse.py(425):             while 1:
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(429):                 elif this and this[0] == "\\":
0.05 sre_parse.py(431):                 elif this:
0.05 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.05 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(438):                     if this == "]":
0.05 sre_parse.py(444):                     elif this:
0.05 sre_parse.py(445):                         if this[0] == "\\":
0.05 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.05 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.05 sre_parse.py(451):                         lo = code1[1]
0.05 sre_parse.py(452):                         hi = code2[1]
0.05 sre_parse.py(453):                         if hi < lo:
0.05 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(429):                 elif this and this[0] == "\\":
0.05 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.05 sre_parse.py(227):     code = ESCAPES.get(escape)
0.05 sre_parse.py(228):     if code:
0.05 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(231):     if code:
0.05 sre_parse.py(232):         return code
0.05 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(459):                     if code1[0] is IN:
0.05 sre_parse.py(460):                         code1 = code1[1][0]
0.05 sre_parse.py(461):                     setappend(code1)
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(428):                     break
0.05 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.05 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.05 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(413):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(521):         elif this == ".":
0.05 sre_parse.py(524):         elif this == "(":
0.05 sre_parse.py(525):             group = 1
0.05 sre_parse.py(526):             name = None
0.05 sre_parse.py(527):             condgroup = None
0.05 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(529):                 group = 0
0.05 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(568):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(571):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(580):                 elif source.next in ASSERTCHARS:
0.05 sre_parse.py(582):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(583):                     dir = 1
0.05 sre_parse.py(584):                     if char == "<":
0.05 sre_parse.py(589):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.05 sre_parse.py(304):     items = []
0.05 sre_parse.py(305):     itemsappend = items.append
0.05 sre_parse.py(306):     sourcematch = source.match
0.05 sre_parse.py(307):     while 1:
0.05 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.05 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(93):             data = []
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(384):     subpatternappend = subpattern.append
0.05 sre_parse.py(385):     sourceget = source.get
0.05 sre_parse.py(386):     sourcematch = source.match
0.05 sre_parse.py(387):     _len = len
0.05 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.05 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.05 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.05 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.05 sre_parse.py(393):     while 1:
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(521):         elif this == ".":
0.05 sre_parse.py(524):         elif this == "(":
0.05 sre_parse.py(648):         elif this == "^":
0.05 sre_parse.py(651):         elif this == "$":
0.05 sre_parse.py(654):         elif this and this[0] == "\\":
0.05 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.05 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.05 sre_parse.py(260):     if code:
0.05 sre_parse.py(261):         return code
0.05 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.05 sre_parse.py(139):         self.data.append(code)
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.05 sre_parse.py(474):             if this == "?":
0.05 sre_parse.py(476):             elif this == "*":
0.05 sre_parse.py(479):             elif this == "+":
0.05 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.05 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
0.05 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.05 sre_parse.py(91):         self.pattern = pattern
0.05 sre_parse.py(92):         if data is None:
0.05 sre_parse.py(94):         self.data = data
0.05 sre_parse.py(95):         self.width = None
0.05 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.05 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.05 sre_parse.py(131):         if isinstance(index, slice):
0.05 sre_parse.py(133):         return self.data[index]
0.05 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(200):         return 0
0.05 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.05 sre_parse.py(135):         self.data[index] = code
0.05 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.05 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(398):         if this is None:
0.05 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.05 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.05 sre_parse.py(415):         elif this == "[":
0.05 sre_parse.py(417):             set = []
0.05 sre_parse.py(418):             setappend = set.append
0.05 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(422):                 setappend((NEGATE, None))
0.05 sre_parse.py(424):             start = set[:]
0.05 sre_parse.py(425):             while 1:
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(427):                 if this == "]" and set != start:
0.05 sre_parse.py(429):                 elif this and this[0] == "\\":
0.05 sre_parse.py(431):                 elif this:
0.05 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.05 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.05 sre_parse.py(196):         if char == self.next:
0.05 sre_parse.py(197):             if skip:
0.05 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(199):             return 1
0.05 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.05 sre_parse.py(187):         if char[0] == "\\":
0.05 sre_parse.py(188):             try:
0.05 sre_parse.py(189):                 c = self.string[self.index + 1]
0.05 sre_parse.py(192):             char = char + c
0.05 sre_parse.py(193):         self.index = self.index + len(char)
0.05 sre_parse.py(194):         self.next = char
0.05 sre_parse.py(204):         return this
0.05 sre_parse.py(438):                     if this == "]":
0.05 sre_parse.py(444):                     elif this:
0.05 sre_parse.py(445):                         if this[0] == "\\":
0.05 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.05 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.05 sre_parse.py(451):                         lo = code1[1]
0.05 sre_parse.py(452):                         hi = code2[1]
0.05 sre_parse.py(453):                         if hi < lo:
0.05 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.05 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.05 sre_parse.py(202):         this = self.next
0.05 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.05 sre_parse.py(183):         if self.index >= len(self.string):
0.05 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(232):         return code
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(460):                         code1 = code1[1][0]
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(428):                     break
0.06 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.06 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.06 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(396):             break # end of subpattern
0.06 sre_parse.py(661):     return subpattern
0.06 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(311):         if not nested:
0.06 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(314):             break
0.06 sre_parse.py(318):     if len(items) == 1:
0.06 sre_parse.py(319):         return items[0]
0.06 sre_parse.py(590):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(592):                     if char == "=":
0.06 sre_parse.py(593):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(396):             break # end of subpattern
0.06 sre_parse.py(661):     return subpattern
0.06 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(310):             continue
0.06 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.06 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.06 sre_parse.py(91):         self.pattern = pattern
0.06 sre_parse.py(92):         if data is None:
0.06 sre_parse.py(93):             data = []
0.06 sre_parse.py(94):         self.data = data
0.06 sre_parse.py(95):         self.width = None
0.06 sre_parse.py(384):     subpatternappend = subpattern.append
0.06 sre_parse.py(385):     sourceget = source.get
0.06 sre_parse.py(386):     sourcematch = source.match
0.06 sre_parse.py(387):     _len = len
0.06 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.06 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.06 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.06 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.06 sre_parse.py(393):     while 1:
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(415):         elif this == "[":
0.06 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.06 sre_parse.py(521):         elif this == ".":
0.06 sre_parse.py(524):         elif this == "(":
0.06 sre_parse.py(525):             group = 1
0.06 sre_parse.py(526):             name = None
0.06 sre_parse.py(527):             condgroup = None
0.06 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(529):                 group = 0
0.06 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(568):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(571):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(580):                 elif source.next in ASSERTCHARS:
0.06 sre_parse.py(582):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(583):                     dir = 1
0.06 sre_parse.py(584):                     if char == "<":
0.06 sre_parse.py(585):                         if source.next not in LOOKBEHINDASSERTCHARS:
0.06 sre_parse.py(587):                         dir = -1 # lookbehind
0.06 sre_parse.py(588):                         char = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(589):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.06 sre_parse.py(304):     items = []
0.06 sre_parse.py(305):     itemsappend = items.append
0.06 sre_parse.py(306):     sourcematch = source.match
0.06 sre_parse.py(307):     while 1:
0.06 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.06 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.06 sre_parse.py(91):         self.pattern = pattern
0.06 sre_parse.py(92):         if data is None:
0.06 sre_parse.py(93):             data = []
0.06 sre_parse.py(94):         self.data = data
0.06 sre_parse.py(95):         self.width = None
0.06 sre_parse.py(384):     subpatternappend = subpattern.append
0.06 sre_parse.py(385):     sourceget = source.get
0.06 sre_parse.py(386):     sourcematch = source.match
0.06 sre_parse.py(387):     _len = len
0.06 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.06 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.06 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.06 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.06 sre_parse.py(393):     while 1:
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(415):         elif this == "[":
0.06 sre_parse.py(417):             set = []
0.06 sre_parse.py(418):             setappend = set.append
0.06 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(424):             start = set[:]
0.06 sre_parse.py(425):             while 1:
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(232):         return code
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(460):                         code1 = code1[1][0]
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(429):                 elif this and this[0] == "\\":
0.06 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.06 sre_parse.py(227):     code = ESCAPES.get(escape)
0.06 sre_parse.py(228):     if code:
0.06 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(231):     if code:
0.06 sre_parse.py(233):     try:
0.06 sre_parse.py(234):         c = escape[1:2]
0.06 sre_parse.py(235):         if c == "x":
0.06 sre_parse.py(243):         elif c in OCTDIGITS:
0.06 sre_parse.py(249):         elif c in DIGITS:
0.06 sre_parse.py(251):         if len(escape) == 2:
0.06 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.06 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(459):                     if code1[0] is IN:
0.06 sre_parse.py(461):                     setappend(code1)
0.06 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(427):                 if this == "]" and set != start:
0.06 sre_parse.py(428):                     break
0.06 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.06 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.06 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(396):             break # end of subpattern
0.06 sre_parse.py(661):     return subpattern
0.06 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(311):         if not nested:
0.06 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(314):             break
0.06 sre_parse.py(318):     if len(items) == 1:
0.06 sre_parse.py(319):         return items[0]
0.06 sre_parse.py(590):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(592):                     if char == "=":
0.06 sre_parse.py(593):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(413):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(415):         elif this == "[":
0.06 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.06 sre_parse.py(474):             if this == "?":
0.06 sre_parse.py(476):             elif this == "*":
0.06 sre_parse.py(479):             elif this == "+":
0.06 sre_parse.py(481):             elif this == "{":
0.06 sre_parse.py(482):                 if source.next == "}":
0.06 sre_parse.py(485):                 here = source.tell()
 --- modulename: sre_parse, funcname: tell
0.06 sre_parse.py(206):         return self.index, self.next
0.06 sre_parse.py(486):                 min, max = 0, MAXREPEAT
0.06 sre_parse.py(487):                 lo = hi = ""
0.06 sre_parse.py(488):                 while source.next in DIGITS:
0.06 sre_parse.py(489):                     lo = lo + source.get()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(488):                 while source.next in DIGITS:
0.06 sre_parse.py(490):                 if sourcematch(","):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(491):                     while source.next in DIGITS:
0.06 sre_parse.py(495):                 if not sourcematch("}"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(499):                 if lo:
0.06 sre_parse.py(500):                     min = int(lo)
0.06 sre_parse.py(501):                 if hi:
0.06 sre_parse.py(503):                 if max < min:
0.06 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
0.06 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.06 sre_parse.py(91):         self.pattern = pattern
0.06 sre_parse.py(92):         if data is None:
0.06 sre_parse.py(94):         self.data = data
0.06 sre_parse.py(95):         self.width = None
0.06 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(133):         return self.data[index]
0.06 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(133):         return self.data[index]
0.06 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.06 sre_parse.py(135):         self.data[index] = code
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(415):         elif this == "[":
0.06 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.06 sre_parse.py(521):         elif this == ".":
0.06 sre_parse.py(524):         elif this == "(":
0.06 sre_parse.py(525):             group = 1
0.06 sre_parse.py(526):             name = None
0.06 sre_parse.py(527):             condgroup = None
0.06 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(529):                 group = 0
0.06 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(568):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(571):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(580):                 elif source.next in ASSERTCHARS:
0.06 sre_parse.py(582):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(188):             try:
0.06 sre_parse.py(189):                 c = self.string[self.index + 1]
0.06 sre_parse.py(192):             char = char + c
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(583):                     dir = 1
0.06 sre_parse.py(584):                     if char == "<":
0.06 sre_parse.py(589):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.06 sre_parse.py(304):     items = []
0.06 sre_parse.py(305):     itemsappend = items.append
0.06 sre_parse.py(306):     sourcematch = source.match
0.06 sre_parse.py(307):     while 1:
0.06 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.06 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.06 sre_parse.py(91):         self.pattern = pattern
0.06 sre_parse.py(92):         if data is None:
0.06 sre_parse.py(93):             data = []
0.06 sre_parse.py(94):         self.data = data
0.06 sre_parse.py(95):         self.width = None
0.06 sre_parse.py(384):     subpatternappend = subpattern.append
0.06 sre_parse.py(385):     sourceget = source.get
0.06 sre_parse.py(386):     sourcematch = source.match
0.06 sre_parse.py(387):     _len = len
0.06 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.06 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.06 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.06 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.06 sre_parse.py(393):     while 1:
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(204):         return this
0.06 sre_parse.py(398):         if this is None:
0.06 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.06 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.06 sre_parse.py(415):         elif this == "[":
0.06 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.06 sre_parse.py(521):         elif this == ".":
0.06 sre_parse.py(524):         elif this == "(":
0.06 sre_parse.py(648):         elif this == "^":
0.06 sre_parse.py(651):         elif this == "$":
0.06 sre_parse.py(654):         elif this and this[0] == "\\":
0.06 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.06 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.06 sre_parse.py(260):     if code:
0.06 sre_parse.py(261):         return code
0.06 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(396):             break # end of subpattern
0.06 sre_parse.py(661):     return subpattern
0.06 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(311):         if not nested:
0.06 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(314):             break
0.06 sre_parse.py(318):     if len(items) == 1:
0.06 sre_parse.py(319):         return items[0]
0.06 sre_parse.py(590):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(186):         char = self.string[self.index]
0.06 sre_parse.py(187):         if char[0] == "\\":
0.06 sre_parse.py(193):         self.index = self.index + len(char)
0.06 sre_parse.py(194):         self.next = char
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(592):                     if char == "=":
0.06 sre_parse.py(593):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(396):             break # end of subpattern
0.06 sre_parse.py(661):     return subpattern
0.06 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(200):         return 0
0.06 sre_parse.py(311):         if not nested:
0.06 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(314):             break
0.06 sre_parse.py(318):     if len(items) == 1:
0.06 sre_parse.py(321):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.06 sre_parse.py(91):         self.pattern = pattern
0.06 sre_parse.py(92):         if data is None:
0.06 sre_parse.py(93):             data = []
0.06 sre_parse.py(94):         self.data = data
0.06 sre_parse.py(95):         self.width = None
0.06 sre_parse.py(322):     subpatternappend = subpattern.append
0.06 sre_parse.py(325):     while 1:
0.06 sre_parse.py(326):         prefix = None
0.06 sre_parse.py(327):         for item in items:
0.06 sre_parse.py(328):             if not item:
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
0.06 sre_parse.py(330):             if prefix is None:
0.06 sre_parse.py(331):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(133):         return self.data[index]
0.06 sre_parse.py(327):         for item in items:
0.06 sre_parse.py(328):             if not item:
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
0.06 sre_parse.py(330):             if prefix is None:
0.06 sre_parse.py(332):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(133):         return self.data[index]
0.06 sre_parse.py(333):                 break
0.06 sre_parse.py(341):         break
0.06 sre_parse.py(344):     for item in items:
0.06 sre_parse.py(345):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
0.06 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.06 sre_parse.py(131):         if isinstance(index, slice):
0.06 sre_parse.py(133):         return self.data[index]
0.06 sre_parse.py(346):             break
0.06 sre_parse.py(357):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(358):     return subpattern
0.06 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.06 sre_parse.py(196):         if char == self.next:
0.06 sre_parse.py(197):             if skip:
0.06 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.06 sre_parse.py(183):         if self.index >= len(self.string):
0.06 sre_parse.py(184):             self.next = None
0.06 sre_parse.py(185):             return
0.06 sre_parse.py(199):             return 1
0.06 sre_parse.py(636):                 if group is not None:
0.06 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.06 sre_parse.py(84):         self.open.remove(gid)
0.06 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.06 sre_parse.py(139):         self.data.append(code)
0.06 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.06 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.06 sre_parse.py(202):         this = self.next
0.06 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.07 sre_parse.py(183):         if self.index >= len(self.string):
0.07 sre_parse.py(184):             self.next = None
0.07 sre_parse.py(185):             return
0.07 sre_parse.py(204):         return this
0.07 sre_parse.py(398):         if this is None:
0.07 sre_parse.py(399):             break # end of pattern
0.07 sre_parse.py(661):     return subpattern
0.07 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.07 sre_parse.py(196):         if char == self.next:
0.07 sre_parse.py(200):         return 0
0.07 sre_parse.py(311):         if not nested:
0.07 sre_parse.py(312):             break
0.07 sre_parse.py(318):     if len(items) == 1:
0.07 sre_parse.py(319):         return items[0]
0.07 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.07 sre_parse.py(202):         this = self.next
0.07 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.07 sre_parse.py(183):         if self.index >= len(self.string):
0.07 sre_parse.py(184):             self.next = None
0.07 sre_parse.py(185):             return
0.07 sre_parse.py(204):         return this
0.07 sre_parse.py(676):     if tail == ")":
0.07 sre_parse.py(678):     elif tail:
0.07 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.07 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.07 sre_parse.py(689):     return p
0.07 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.07 sre_compile.py(482):     flags = p.pattern.flags | flags
0.07 sre_compile.py(483):     code = []
0.07 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.07 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(149):                 i = sys.maxint
0.07 sre_parse.py(150):                 j = 0
0.07 sre_parse.py(151):                 for av in av[1]:
0.07 sre_parse.py(152):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.07 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(153):                     i = min(i, l)
0.07 sre_parse.py(154):                     j = max(j, h)
0.07 sre_parse.py(151):                 for av in av[1]:
0.07 sre_parse.py(152):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.07 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.07 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(172):             elif op == SUCCESS:
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(153):                     i = min(i, l)
0.07 sre_parse.py(154):                     j = max(j, h)
0.07 sre_parse.py(151):                 for av in av[1]:
0.07 sre_parse.py(152):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(172):             elif op == SUCCESS:
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.07 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(172):             elif op == SUCCESS:
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(153):                     i = min(i, l)
0.07 sre_parse.py(154):                     j = max(j, h)
0.07 sre_parse.py(151):                 for av in av[1]:
0.07 sre_parse.py(155):                 lo = lo + i
0.07 sre_parse.py(156):                 hi = hi + j
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_parse.py(163):                 lo = lo + i
0.07 sre_parse.py(164):                 hi = hi + j
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_compile.py(366):     if lo == 0:
0.07 sre_compile.py(369):     prefix = []
0.07 sre_compile.py(370):     prefixappend = prefix.append
0.07 sre_compile.py(371):     prefix_skip = 0
0.07 sre_compile.py(372):     charset = [] # not used
0.07 sre_compile.py(373):     charsetappend = charset.append
0.07 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.07 sre_compile.py(376):         for op, av in pattern.data:
0.07 sre_compile.py(377):             if op is LITERAL:
0.07 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
0.07 sre_parse.py(127):         return len(self.data)
0.07 sre_compile.py(382):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(383):                 if op is LITERAL:
0.07 sre_compile.py(386):                     break
0.07 sre_compile.py(390):         if not prefix and pattern.data:
0.07 sre_compile.py(391):             op, av = pattern.data[0]
0.07 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
0.07 sre_parse.py(127):         return len(self.data)
0.07 sre_compile.py(393):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(394):                 if op is LITERAL:
0.07 sre_compile.py(396):                 elif op is BRANCH:
0.07 sre_compile.py(397):                     c = []
0.07 sre_compile.py(398):                     cappend = c.append
0.07 sre_compile.py(399):                     for p in av[1]:
0.07 sre_compile.py(400):                         if not p:
 --- modulename: sre_parse, funcname: __len__
0.07 sre_parse.py(127):         return len(self.data)
0.07 sre_compile.py(402):                         op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(403):                         if op is LITERAL:
0.07 sre_compile.py(406):                             break
0.07 sre_compile.py(429):     emit = code.append
0.07 sre_compile.py(430):     emit(OPCODES[INFO])
0.07 sre_compile.py(431):     skip = len(code); emit(0)
0.07 sre_compile.py(433):     mask = 0
0.07 sre_compile.py(434):     if prefix:
0.07 sre_compile.py(438):     elif charset:
0.07 sre_compile.py(440):     emit(mask)
0.07 sre_compile.py(442):     if lo < MAXCODE:
0.07 sre_compile.py(443):         emit(lo)
0.07 sre_compile.py(447):     if hi < MAXCODE:
0.07 sre_compile.py(448):         emit(hi)
0.07 sre_compile.py(452):     if prefix:
0.07 sre_compile.py(463):     elif charset:
0.07 sre_compile.py(465):     code[skip] = len(code) - skip
0.07 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(96):         elif op is SUBPATTERN:
0.07 sre_compile.py(97):             if av[0]:
0.07 sre_compile.py(98):                 emit(OPCODES[MARK])
0.07 sre_compile.py(99):                 emit((av[0]-1)*2)
0.07 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(96):         elif op is SUBPATTERN:
0.07 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.07 sre_compile.py(107):         elif op in ASSERT_CODES:
0.07 sre_compile.py(120):         elif op is CALL:
0.07 sre_compile.py(126):         elif op is AT:
0.07 sre_compile.py(135):         elif op is BRANCH:
0.07 sre_compile.py(136):             emit(OPCODES[op])
0.07 sre_compile.py(137):             tail = []
0.07 sre_compile.py(138):             tailappend = tail.append
0.07 sre_compile.py(139):             for av in av[1]:
0.07 sre_compile.py(140):                 skip = _len(code); emit(0)
0.07 sre_compile.py(142):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.07 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.07 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(143):             return self.width
0.07 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.07 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(75):                 if op is MAX_REPEAT:
0.07 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.07 sre_compile.py(79):                 skip = _len(code); emit(0)
0.07 sre_compile.py(80):                 emit(av[0])
0.07 sre_compile.py(81):                 emit(av[1])
0.07 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.07 sre_compile.py(58):             code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.07 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(143):                 emit(OPCODES[JUMP])
0.07 sre_compile.py(144):                 tailappend(_len(code)); emit(0)
0.07 sre_compile.py(145):                 code[skip] = _len(code) - skip
0.07 sre_compile.py(139):             for av in av[1]:
0.07 sre_compile.py(140):                 skip = _len(code); emit(0)
0.07 sre_compile.py(142):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.07 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.07 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(143):             return self.width
0.07 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.07 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(75):                 if op is MAX_REPEAT:
0.07 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.07 sre_compile.py(79):                 skip = _len(code); emit(0)
0.07 sre_compile.py(80):                 emit(av[0])
0.07 sre_compile.py(81):                 emit(av[1])
0.07 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(215):                 outappend((op, av))
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(186):             pass
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.07 sre_compile.py(58):             code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.07 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.07 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.07 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(143):             return self.width
0.07 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.07 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(75):                 if op is MAX_REPEAT:
0.07 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.07 sre_compile.py(79):                 skip = _len(code); emit(0)
0.07 sre_compile.py(80):                 emit(av[0])
0.07 sre_compile.py(81):                 emit(av[1])
0.07 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.07 sre_compile.py(58):             code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.07 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(215):                 outappend((op, av))
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(186):             pass
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.07 sre_compile.py(58):             code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(46):                 emit(OPCODES[op])
0.07 sre_compile.py(47):                 emit(av)
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(96):         elif op is SUBPATTERN:
0.07 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.07 sre_compile.py(107):         elif op in ASSERT_CODES:
0.07 sre_compile.py(108):             emit(OPCODES[op])
0.07 sre_compile.py(109):             skip = _len(code); emit(0)
0.07 sre_compile.py(110):             if av[0] >= 0:
0.07 sre_compile.py(111):                 emit(0) # look ahead
0.07 sre_compile.py(117):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(59):         elif op is ANY:
0.07 sre_compile.py(64):         elif op in REPEATING_CODES:
0.07 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.07 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.07 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.07 sre_parse.py(142):         if self.width:
0.07 sre_parse.py(144):         lo = hi = 0L
0.07 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.07 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(148):             if op is BRANCH:
0.07 sre_parse.py(157):             elif op is CALL:
0.07 sre_parse.py(161):             elif op is SUBPATTERN:
0.07 sre_parse.py(165):             elif op in REPEATCODES:
0.07 sre_parse.py(169):             elif op in UNITCODES:
0.07 sre_parse.py(170):                 lo = lo + 1
0.07 sre_parse.py(171):                 hi = hi + 1
0.07 sre_parse.py(147):         for op, av in self.data:
0.07 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.07 sre_parse.py(175):         return self.width
0.07 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.07 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(75):                 if op is MAX_REPEAT:
0.07 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.07 sre_compile.py(79):                 skip = _len(code); emit(0)
0.07 sre_compile.py(80):                 emit(av[0])
0.07 sre_compile.py(81):                 emit(av[1])
0.07 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.07 sre_compile.py(34):     emit = code.append
0.07 sre_compile.py(35):     _len = len
0.07 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.07 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.07 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.07 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.07 sre_compile.py(194):         elif op is BIGCHARSET:
0.07 sre_compile.py(196):         elif op is CATEGORY:
0.07 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.07 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.07 sre_compile.py(202):                 emit(CHCODES[av])
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.07 sre_compile.py(58):             code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.07 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.07 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.07 sre_parse.py(131):         if isinstance(index, slice):
0.07 sre_parse.py(133):         return self.data[index]
0.07 sre_compile.py(41):         if op in LITERAL_CODES:
0.07 sre_compile.py(48):         elif op is IN:
0.07 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.07 sre_compile.py(54):                 emit(OPCODES[op])
0.07 sre_compile.py(55):                 fixup = _identityfunction
0.07 sre_compile.py(56):             skip = _len(code); emit(0)
0.07 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.07 sre_compile.py(180):     emit = code.append
0.07 sre_compile.py(181):     if fixup is None:
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.07 sre_compile.py(209):     out = []
0.07 sre_compile.py(210):     outappend = out.append
0.07 sre_compile.py(211):     charmap = [0]*256
0.07 sre_compile.py(212):     try:
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(215):                 outappend((op, av))
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(220):                     charmap[i] = 1
0.07 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.07 sre_compile.py(213):         for op, av in charset:
0.07 sre_compile.py(214):             if op is NEGATE:
0.07 sre_compile.py(216):             elif op is LITERAL:
0.07 sre_compile.py(218):             elif op is RANGE:
0.07 sre_compile.py(221):             elif op is CATEGORY:
0.07 sre_compile.py(223):                 return charset # cannot compress
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(186):             pass
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.07 sre_compile.py(25):     return x
0.07 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.07 sre_compile.py(184):         emit(OPCODES[op])
0.07 sre_compile.py(185):         if op is NEGATE:
0.07 sre_compile.py(187):         elif op is LITERAL:
0.07 sre_compile.py(189):         elif op is RANGE:
0.07 sre_compile.py(192):         elif op is CHARSET:
0.08 sre_compile.py(194):         elif op is BIGCHARSET:
0.08 sre_compile.py(196):         elif op is CATEGORY:
0.08 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.08 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.08 sre_compile.py(202):                 emit(CHCODES[av])
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.08 sre_compile.py(58):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(118):             emit(OPCODES[SUCCESS])
0.08 sre_compile.py(119):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(143):                 emit(OPCODES[JUMP])
0.08 sre_compile.py(144):                 tailappend(_len(code)); emit(0)
0.08 sre_compile.py(145):                 code[skip] = _len(code) - skip
0.08 sre_compile.py(139):             for av in av[1]:
0.08 sre_compile.py(140):                 skip = _len(code); emit(0)
0.08 sre_compile.py(142):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(59):         elif op is ANY:
0.08 sre_compile.py(64):         elif op in REPEATING_CODES:
0.08 sre_compile.py(96):         elif op is SUBPATTERN:
0.08 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.08 sre_compile.py(107):         elif op in ASSERT_CODES:
0.08 sre_compile.py(108):             emit(OPCODES[op])
0.08 sre_compile.py(109):             skip = _len(code); emit(0)
0.08 sre_compile.py(110):             if av[0] >= 0:
0.08 sre_compile.py(113):                 lo, hi = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(144):         lo = hi = 0L
0.08 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.08 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(148):             if op is BRANCH:
0.08 sre_parse.py(157):             elif op is CALL:
0.08 sre_parse.py(161):             elif op is SUBPATTERN:
0.08 sre_parse.py(165):             elif op in REPEATCODES:
0.08 sre_parse.py(169):             elif op in UNITCODES:
0.08 sre_parse.py(170):                 lo = lo + 1
0.08 sre_parse.py(171):                 hi = hi + 1
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.08 sre_parse.py(175):         return self.width
0.08 sre_compile.py(114):                 if lo != hi:
0.08 sre_compile.py(116):                 emit(lo) # look behind
0.08 sre_compile.py(117):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.08 sre_compile.py(54):                 emit(OPCODES[op])
0.08 sre_compile.py(55):                 fixup = _identityfunction
0.08 sre_compile.py(56):             skip = _len(code); emit(0)
0.08 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.08 sre_compile.py(180):     emit = code.append
0.08 sre_compile.py(181):     if fixup is None:
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.08 sre_compile.py(209):     out = []
0.08 sre_compile.py(210):     outappend = out.append
0.08 sre_compile.py(211):     charmap = [0]*256
0.08 sre_compile.py(212):     try:
0.08 sre_compile.py(213):         for op, av in charset:
0.08 sre_compile.py(214):             if op is NEGATE:
0.08 sre_compile.py(216):             elif op is LITERAL:
0.08 sre_compile.py(218):             elif op is RANGE:
0.08 sre_compile.py(221):             elif op is CATEGORY:
0.08 sre_compile.py(223):                 return charset # cannot compress
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(189):         elif op is RANGE:
0.08 sre_compile.py(192):         elif op is CHARSET:
0.08 sre_compile.py(194):         elif op is BIGCHARSET:
0.08 sre_compile.py(196):         elif op is CATEGORY:
0.08 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.08 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.08 sre_compile.py(202):                 emit(CHCODES[av])
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.08 sre_compile.py(25):     return x
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.08 sre_compile.py(58):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(118):             emit(OPCODES[SUCCESS])
0.08 sre_compile.py(119):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(59):         elif op is ANY:
0.08 sre_compile.py(64):         elif op in REPEATING_CODES:
0.08 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.08 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.08 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(143):             return self.width
0.08 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.08 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(75):                 if op is MAX_REPEAT:
0.08 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.08 sre_compile.py(79):                 skip = _len(code); emit(0)
0.08 sre_compile.py(80):                 emit(av[0])
0.08 sre_compile.py(81):                 emit(av[1])
0.08 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.08 sre_compile.py(46):                 emit(OPCODES[op])
0.08 sre_compile.py(47):                 emit(av)
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.08 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(59):         elif op is ANY:
0.08 sre_compile.py(64):         elif op in REPEATING_CODES:
0.08 sre_compile.py(96):         elif op is SUBPATTERN:
0.08 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.08 sre_compile.py(107):         elif op in ASSERT_CODES:
0.08 sre_compile.py(108):             emit(OPCODES[op])
0.08 sre_compile.py(109):             skip = _len(code); emit(0)
0.08 sre_compile.py(110):             if av[0] >= 0:
0.08 sre_compile.py(111):                 emit(0) # look ahead
0.08 sre_compile.py(117):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.08 sre_compile.py(54):                 emit(OPCODES[op])
0.08 sre_compile.py(55):                 fixup = _identityfunction
0.08 sre_compile.py(56):             skip = _len(code); emit(0)
0.08 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.08 sre_compile.py(180):     emit = code.append
0.08 sre_compile.py(181):     if fixup is None:
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.08 sre_compile.py(209):     out = []
0.08 sre_compile.py(210):     outappend = out.append
0.08 sre_compile.py(211):     charmap = [0]*256
0.08 sre_compile.py(212):     try:
0.08 sre_compile.py(213):         for op, av in charset:
0.08 sre_compile.py(214):             if op is NEGATE:
0.08 sre_compile.py(216):             elif op is LITERAL:
0.08 sre_compile.py(218):             elif op is RANGE:
0.08 sre_compile.py(221):             elif op is CATEGORY:
0.08 sre_compile.py(223):                 return charset # cannot compress
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(189):         elif op is RANGE:
0.08 sre_compile.py(192):         elif op is CHARSET:
0.08 sre_compile.py(194):         elif op is BIGCHARSET:
0.08 sre_compile.py(196):         elif op is CATEGORY:
0.08 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.08 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.08 sre_compile.py(202):                 emit(CHCODES[av])
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.08 sre_compile.py(58):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(118):             emit(OPCODES[SUCCESS])
0.08 sre_compile.py(119):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(143):                 emit(OPCODES[JUMP])
0.08 sre_compile.py(144):                 tailappend(_len(code)); emit(0)
0.08 sre_compile.py(145):                 code[skip] = _len(code) - skip
0.08 sre_compile.py(139):             for av in av[1]:
0.08 sre_compile.py(146):             emit(0) # end of branch
0.08 sre_compile.py(147):             for tail in tail:
0.08 sre_compile.py(148):                 code[tail] = _len(code) - tail
0.08 sre_compile.py(147):             for tail in tail:
0.08 sre_compile.py(148):                 code[tail] = _len(code) - tail
0.08 sre_compile.py(147):             for tail in tail:
0.08 sre_compile.py(148):                 code[tail] = _len(code) - tail
0.08 sre_compile.py(147):             for tail in tail:
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(102):             if av[0]:
0.08 sre_compile.py(103):                 emit(OPCODES[MARK])
0.08 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.08 sre_compile.py(40):     for op, av in pattern:
0.08 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.08 sre_compile.py(493):     return code
0.08 sre_compile.py(509):     if p.pattern.groups > 100:
0.08 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.08 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.08 sre_compile.py(517):     for k, i in groupindex.items():
0.08 sre_compile.py(520):     return _sre.compile(
0.08 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.08 sre_compile.py(522):         p.pattern.groups-1,
0.08 sre_compile.py(523):         groupindex, indexgroup
0.08 re.py(243):     if len(_cache) >= _MAXCACHE:
0.08 re.py(245):     _cache[cachekey] = p
0.08 re.py(246):     return p
0.08 textwrap.py(96):     wordsep_simple_re = re.compile(r'(\s+)')
 --- modulename: re, funcname: compile
0.08 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.08 re.py(228):     cachekey = (type(key[0]),) + key
0.08 re.py(229):     p = _cache.get(cachekey)
0.08 re.py(230):     if p is not None:
0.08 re.py(232):     pattern, flags = key
0.08 re.py(233):     if isinstance(pattern, _pattern_type):
0.08 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.08 sre_compile.py(475):     for tp in STRING_TYPES:
0.08 sre_compile.py(476):         if isinstance(obj, tp):
0.08 sre_compile.py(477):             return 1
0.08 re.py(239):     try:
0.08 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.08 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.08 sre_compile.py(475):     for tp in STRING_TYPES:
0.08 sre_compile.py(476):         if isinstance(obj, tp):
0.08 sre_compile.py(477):             return 1
0.08 sre_compile.py(499):         pattern = p
0.08 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.08 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(179):         self.string = string
0.08 sre_parse.py(180):         self.index = 0
0.08 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(186):         char = self.string[self.index]
0.08 sre_parse.py(187):         if char[0] == "\\":
0.08 sre_parse.py(193):         self.index = self.index + len(char)
0.08 sre_parse.py(194):         self.next = char
0.08 sre_parse.py(668):     if pattern is None:
0.08 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(68):         self.flags = 0
0.08 sre_parse.py(69):         self.open = []
0.08 sre_parse.py(70):         self.groups = 1
0.08 sre_parse.py(71):         self.groupdict = {}
0.08 sre_parse.py(670):     pattern.flags = flags
0.08 sre_parse.py(671):     pattern.str = str
0.08 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.08 sre_parse.py(304):     items = []
0.08 sre_parse.py(305):     itemsappend = items.append
0.08 sre_parse.py(306):     sourcematch = source.match
0.08 sre_parse.py(307):     while 1:
0.08 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.08 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(91):         self.pattern = pattern
0.08 sre_parse.py(92):         if data is None:
0.08 sre_parse.py(93):             data = []
0.08 sre_parse.py(94):         self.data = data
0.08 sre_parse.py(95):         self.width = None
0.08 sre_parse.py(384):     subpatternappend = subpattern.append
0.08 sre_parse.py(385):     sourceget = source.get
0.08 sre_parse.py(386):     sourcematch = source.match
0.08 sre_parse.py(387):     _len = len
0.08 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.08 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.08 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.08 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.08 sre_parse.py(393):     while 1:
0.08 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.08 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.08 sre_parse.py(202):         this = self.next
0.08 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(186):         char = self.string[self.index]
0.08 sre_parse.py(187):         if char[0] == "\\":
0.08 sre_parse.py(188):             try:
0.08 sre_parse.py(189):                 c = self.string[self.index + 1]
0.08 sre_parse.py(192):             char = char + c
0.08 sre_parse.py(193):         self.index = self.index + len(char)
0.08 sre_parse.py(194):         self.next = char
0.08 sre_parse.py(204):         return this
0.08 sre_parse.py(398):         if this is None:
0.08 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.08 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.08 sre_parse.py(415):         elif this == "[":
0.08 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.08 sre_parse.py(521):         elif this == ".":
0.08 sre_parse.py(524):         elif this == "(":
0.08 sre_parse.py(525):             group = 1
0.08 sre_parse.py(526):             name = None
0.08 sre_parse.py(527):             condgroup = None
0.08 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(200):         return 0
0.08 sre_parse.py(623):             if group:
0.08 sre_parse.py(625):                 if group == 2:
0.08 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.08 sre_parse.py(73):         gid = self.groups
0.08 sre_parse.py(74):         self.groups = gid + 1
0.08 sre_parse.py(75):         if name is not None:
0.08 sre_parse.py(81):         self.open.append(gid)
0.08 sre_parse.py(82):         return gid
0.08 sre_parse.py(630):                 if condgroup:
0.08 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.08 sre_parse.py(304):     items = []
0.08 sre_parse.py(305):     itemsappend = items.append
0.08 sre_parse.py(306):     sourcematch = source.match
0.08 sre_parse.py(307):     while 1:
0.08 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.08 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(91):         self.pattern = pattern
0.08 sre_parse.py(92):         if data is None:
0.08 sre_parse.py(93):             data = []
0.08 sre_parse.py(94):         self.data = data
0.08 sre_parse.py(95):         self.width = None
0.08 sre_parse.py(384):     subpatternappend = subpattern.append
0.08 sre_parse.py(385):     sourceget = source.get
0.08 sre_parse.py(386):     sourcematch = source.match
0.08 sre_parse.py(387):     _len = len
0.08 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.08 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.08 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.08 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.08 sre_parse.py(393):     while 1:
0.08 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.08 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.08 sre_parse.py(202):         this = self.next
0.08 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(186):         char = self.string[self.index]
0.08 sre_parse.py(187):         if char[0] == "\\":
0.08 sre_parse.py(193):         self.index = self.index + len(char)
0.08 sre_parse.py(194):         self.next = char
0.08 sre_parse.py(204):         return this
0.08 sre_parse.py(398):         if this is None:
0.08 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.08 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.08 sre_parse.py(415):         elif this == "[":
0.08 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.08 sre_parse.py(521):         elif this == ".":
0.08 sre_parse.py(524):         elif this == "(":
0.08 sre_parse.py(648):         elif this == "^":
0.08 sre_parse.py(651):         elif this == "$":
0.08 sre_parse.py(654):         elif this and this[0] == "\\":
0.08 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.08 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.08 sre_parse.py(260):     if code:
0.08 sre_parse.py(261):         return code
0.08 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.08 sre_parse.py(139):         self.data.append(code)
0.08 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.08 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.08 sre_parse.py(202):         this = self.next
0.08 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(186):         char = self.string[self.index]
0.08 sre_parse.py(187):         if char[0] == "\\":
0.08 sre_parse.py(193):         self.index = self.index + len(char)
0.08 sre_parse.py(194):         self.next = char
0.08 sre_parse.py(204):         return this
0.08 sre_parse.py(398):         if this is None:
0.08 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.08 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.08 sre_parse.py(415):         elif this == "[":
0.08 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.08 sre_parse.py(474):             if this == "?":
0.08 sre_parse.py(476):             elif this == "*":
0.08 sre_parse.py(479):             elif this == "+":
0.08 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.08 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
0.08 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(91):         self.pattern = pattern
0.08 sre_parse.py(92):         if data is None:
0.08 sre_parse.py(94):         self.data = data
0.08 sre_parse.py(95):         self.width = None
0.08 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(200):         return 0
0.08 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.08 sre_parse.py(135):         self.data[index] = code
0.08 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.08 sre_parse.py(396):             break # end of subpattern
0.08 sre_parse.py(661):     return subpattern
0.08 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(200):         return 0
0.08 sre_parse.py(311):         if not nested:
0.08 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(197):             if skip:
0.08 sre_parse.py(199):             return 1
0.08 sre_parse.py(314):             break
0.08 sre_parse.py(318):     if len(items) == 1:
0.08 sre_parse.py(319):         return items[0]
0.08 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(197):             if skip:
0.08 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(184):             self.next = None
0.08 sre_parse.py(185):             return
0.08 sre_parse.py(199):             return 1
0.08 sre_parse.py(636):                 if group is not None:
0.08 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.08 sre_parse.py(84):         self.open.remove(gid)
0.08 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.08 sre_parse.py(139):         self.data.append(code)
0.08 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.08 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.08 sre_parse.py(202):         this = self.next
0.08 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(184):             self.next = None
0.08 sre_parse.py(185):             return
0.08 sre_parse.py(204):         return this
0.08 sre_parse.py(398):         if this is None:
0.08 sre_parse.py(399):             break # end of pattern
0.08 sre_parse.py(661):     return subpattern
0.08 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.08 sre_parse.py(196):         if char == self.next:
0.08 sre_parse.py(200):         return 0
0.08 sre_parse.py(311):         if not nested:
0.08 sre_parse.py(312):             break
0.08 sre_parse.py(318):     if len(items) == 1:
0.08 sre_parse.py(319):         return items[0]
0.08 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.08 sre_parse.py(202):         this = self.next
0.08 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(184):             self.next = None
0.08 sre_parse.py(185):             return
0.08 sre_parse.py(204):         return this
0.08 sre_parse.py(676):     if tail == ")":
0.08 sre_parse.py(678):     elif tail:
0.08 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.08 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.08 sre_parse.py(689):     return p
0.08 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.08 sre_compile.py(482):     flags = p.pattern.flags | flags
0.08 sre_compile.py(483):     code = []
0.08 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.08 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(144):         lo = hi = 0L
0.08 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.08 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(148):             if op is BRANCH:
0.08 sre_parse.py(157):             elif op is CALL:
0.08 sre_parse.py(161):             elif op is SUBPATTERN:
0.08 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(144):         lo = hi = 0L
0.08 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.08 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(148):             if op is BRANCH:
0.08 sre_parse.py(157):             elif op is CALL:
0.08 sre_parse.py(161):             elif op is SUBPATTERN:
0.08 sre_parse.py(165):             elif op in REPEATCODES:
0.08 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(144):         lo = hi = 0L
0.08 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.08 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(148):             if op is BRANCH:
0.08 sre_parse.py(157):             elif op is CALL:
0.08 sre_parse.py(161):             elif op is SUBPATTERN:
0.08 sre_parse.py(165):             elif op in REPEATCODES:
0.08 sre_parse.py(169):             elif op in UNITCODES:
0.08 sre_parse.py(170):                 lo = lo + 1
0.08 sre_parse.py(171):                 hi = hi + 1
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.08 sre_parse.py(175):         return self.width
0.08 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.08 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.08 sre_parse.py(175):         return self.width
0.08 sre_parse.py(163):                 lo = lo + i
0.08 sre_parse.py(164):                 hi = hi + j
0.08 sre_parse.py(147):         for op, av in self.data:
0.08 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.08 sre_parse.py(175):         return self.width
0.08 sre_compile.py(366):     if lo == 0:
0.08 sre_compile.py(369):     prefix = []
0.08 sre_compile.py(370):     prefixappend = prefix.append
0.08 sre_compile.py(371):     prefix_skip = 0
0.08 sre_compile.py(372):     charset = [] # not used
0.08 sre_compile.py(373):     charsetappend = charset.append
0.08 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.08 sre_compile.py(376):         for op, av in pattern.data:
0.08 sre_compile.py(377):             if op is LITERAL:
0.08 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
0.08 sre_compile.py(382):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(383):                 if op is LITERAL:
0.08 sre_compile.py(386):                     break
0.08 sre_compile.py(390):         if not prefix and pattern.data:
0.08 sre_compile.py(391):             op, av = pattern.data[0]
0.08 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
0.08 sre_parse.py(127):         return len(self.data)
0.08 sre_compile.py(393):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(394):                 if op is LITERAL:
0.08 sre_compile.py(396):                 elif op is BRANCH:
0.08 sre_compile.py(429):     emit = code.append
0.08 sre_compile.py(430):     emit(OPCODES[INFO])
0.08 sre_compile.py(431):     skip = len(code); emit(0)
0.08 sre_compile.py(433):     mask = 0
0.08 sre_compile.py(434):     if prefix:
0.08 sre_compile.py(438):     elif charset:
0.08 sre_compile.py(440):     emit(mask)
0.08 sre_compile.py(442):     if lo < MAXCODE:
0.08 sre_compile.py(443):         emit(lo)
0.08 sre_compile.py(447):     if hi < MAXCODE:
0.08 sre_compile.py(448):         emit(hi)
0.08 sre_compile.py(452):     if prefix:
0.08 sre_compile.py(463):     elif charset:
0.08 sre_compile.py(465):     code[skip] = len(code) - skip
0.08 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(59):         elif op is ANY:
0.08 sre_compile.py(64):         elif op in REPEATING_CODES:
0.08 sre_compile.py(96):         elif op is SUBPATTERN:
0.08 sre_compile.py(97):             if av[0]:
0.08 sre_compile.py(98):                 emit(OPCODES[MARK])
0.08 sre_compile.py(99):                 emit((av[0]-1)*2)
0.08 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(59):         elif op is ANY:
0.08 sre_compile.py(64):         elif op in REPEATING_CODES:
0.08 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.08 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.08 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.08 sre_parse.py(142):         if self.width:
0.08 sre_parse.py(143):             return self.width
0.08 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.08 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(75):                 if op is MAX_REPEAT:
0.08 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.08 sre_compile.py(79):                 skip = _len(code); emit(0)
0.08 sre_compile.py(80):                 emit(av[0])
0.08 sre_compile.py(81):                 emit(av[1])
0.08 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.08 sre_compile.py(34):     emit = code.append
0.08 sre_compile.py(35):     _len = len
0.08 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.08 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.08 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.08 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(41):         if op in LITERAL_CODES:
0.08 sre_compile.py(48):         elif op is IN:
0.08 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.08 sre_compile.py(54):                 emit(OPCODES[op])
0.08 sre_compile.py(55):                 fixup = _identityfunction
0.08 sre_compile.py(56):             skip = _len(code); emit(0)
0.08 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.08 sre_compile.py(180):     emit = code.append
0.08 sre_compile.py(181):     if fixup is None:
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.08 sre_compile.py(209):     out = []
0.08 sre_compile.py(210):     outappend = out.append
0.08 sre_compile.py(211):     charmap = [0]*256
0.08 sre_compile.py(212):     try:
0.08 sre_compile.py(213):         for op, av in charset:
0.08 sre_compile.py(214):             if op is NEGATE:
0.08 sre_compile.py(216):             elif op is LITERAL:
0.08 sre_compile.py(218):             elif op is RANGE:
0.08 sre_compile.py(221):             elif op is CATEGORY:
0.08 sre_compile.py(223):                 return charset # cannot compress
0.08 sre_compile.py(184):         emit(OPCODES[op])
0.08 sre_compile.py(185):         if op is NEGATE:
0.08 sre_compile.py(187):         elif op is LITERAL:
0.08 sre_compile.py(189):         elif op is RANGE:
0.08 sre_compile.py(192):         elif op is CHARSET:
0.08 sre_compile.py(194):         elif op is BIGCHARSET:
0.08 sre_compile.py(196):         elif op is CATEGORY:
0.08 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.08 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.08 sre_compile.py(202):                 emit(CHCODES[av])
0.08 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.08 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.08 sre_compile.py(58):             code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.08 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.08 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.08 sre_parse.py(131):         if isinstance(index, slice):
0.08 sre_parse.py(133):         return self.data[index]
0.08 sre_compile.py(102):             if av[0]:
0.08 sre_compile.py(103):                 emit(OPCODES[MARK])
0.08 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.08 sre_compile.py(40):     for op, av in pattern:
0.08 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.08 sre_compile.py(493):     return code
0.08 sre_compile.py(509):     if p.pattern.groups > 100:
0.08 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.08 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.08 sre_compile.py(517):     for k, i in groupindex.items():
0.08 sre_compile.py(520):     return _sre.compile(
0.08 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.08 sre_compile.py(522):         p.pattern.groups-1,
0.08 sre_compile.py(523):         groupindex, indexgroup
0.08 re.py(243):     if len(_cache) >= _MAXCACHE:
0.08 re.py(245):     _cache[cachekey] = p
0.08 re.py(246):     return p
0.08 textwrap.py(100):     sentence_end_re = re.compile(r'[%s]'              # lowercase letter
0.08 textwrap.py(104):                                  % string.lowercase)
 --- modulename: re, funcname: compile
0.08 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.08 re.py(228):     cachekey = (type(key[0]),) + key
0.08 re.py(229):     p = _cache.get(cachekey)
0.08 re.py(230):     if p is not None:
0.08 re.py(232):     pattern, flags = key
0.08 re.py(233):     if isinstance(pattern, _pattern_type):
0.08 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.08 sre_compile.py(475):     for tp in STRING_TYPES:
0.08 sre_compile.py(476):         if isinstance(obj, tp):
0.08 sre_compile.py(477):             return 1
0.08 re.py(239):     try:
0.08 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.08 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.08 sre_compile.py(475):     for tp in STRING_TYPES:
0.08 sre_compile.py(476):         if isinstance(obj, tp):
0.08 sre_compile.py(477):             return 1
0.08 sre_compile.py(499):         pattern = p
0.08 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.08 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(179):         self.string = string
0.08 sre_parse.py(180):         self.index = 0
0.08 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.08 sre_parse.py(183):         if self.index >= len(self.string):
0.08 sre_parse.py(186):         char = self.string[self.index]
0.08 sre_parse.py(187):         if char[0] == "\\":
0.08 sre_parse.py(193):         self.index = self.index + len(char)
0.08 sre_parse.py(194):         self.next = char
0.08 sre_parse.py(668):     if pattern is None:
0.08 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(68):         self.flags = 0
0.08 sre_parse.py(69):         self.open = []
0.08 sre_parse.py(70):         self.groups = 1
0.08 sre_parse.py(71):         self.groupdict = {}
0.08 sre_parse.py(670):     pattern.flags = flags
0.08 sre_parse.py(671):     pattern.str = str
0.08 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.08 sre_parse.py(304):     items = []
0.08 sre_parse.py(305):     itemsappend = items.append
0.08 sre_parse.py(306):     sourcematch = source.match
0.08 sre_parse.py(307):     while 1:
0.08 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.08 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.08 sre_parse.py(91):         self.pattern = pattern
0.08 sre_parse.py(92):         if data is None:
0.08 sre_parse.py(93):             data = []
0.08 sre_parse.py(94):         self.data = data
0.08 sre_parse.py(95):         self.width = None
0.08 sre_parse.py(384):     subpatternappend = subpattern.append
0.08 sre_parse.py(385):     sourceget = source.get
0.09 sre_parse.py(386):     sourcematch = source.match
0.09 sre_parse.py(387):     _len = len
0.09 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.09 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.09 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.09 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.09 sre_parse.py(393):     while 1:
0.09 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.09 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(398):         if this is None:
0.09 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.09 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.09 sre_parse.py(415):         elif this == "[":
0.09 sre_parse.py(417):             set = []
0.09 sre_parse.py(418):             setappend = set.append
0.09 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(424):             start = set[:]
0.09 sre_parse.py(425):             while 1:
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(431):                 elif this:
0.09 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(428):                     break
0.09 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.09 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.09 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.09 sre_parse.py(139):         self.data.append(code)
0.09 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.09 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(398):         if this is None:
0.09 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.09 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.09 sre_parse.py(415):         elif this == "[":
0.09 sre_parse.py(417):             set = []
0.09 sre_parse.py(418):             setappend = set.append
0.09 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(424):             start = set[:]
0.09 sre_parse.py(425):             while 1:
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.09 sre_parse.py(227):     code = ESCAPES.get(escape)
0.09 sre_parse.py(228):     if code:
0.09 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.09 sre_parse.py(231):     if code:
0.09 sre_parse.py(233):     try:
0.09 sre_parse.py(234):         c = escape[1:2]
0.09 sre_parse.py(235):         if c == "x":
0.09 sre_parse.py(243):         elif c in OCTDIGITS:
0.09 sre_parse.py(249):         elif c in DIGITS:
0.09 sre_parse.py(251):         if len(escape) == 2:
0.09 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.09 sre_parse.py(227):     code = ESCAPES.get(escape)
0.09 sre_parse.py(228):     if code:
0.09 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.09 sre_parse.py(231):     if code:
0.09 sre_parse.py(233):     try:
0.09 sre_parse.py(234):         c = escape[1:2]
0.09 sre_parse.py(235):         if c == "x":
0.09 sre_parse.py(243):         elif c in OCTDIGITS:
0.09 sre_parse.py(249):         elif c in DIGITS:
0.09 sre_parse.py(251):         if len(escape) == 2:
0.09 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.09 sre_parse.py(227):     code = ESCAPES.get(escape)
0.09 sre_parse.py(228):     if code:
0.09 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.09 sre_parse.py(231):     if code:
0.09 sre_parse.py(233):     try:
0.09 sre_parse.py(234):         c = escape[1:2]
0.09 sre_parse.py(235):         if c == "x":
0.09 sre_parse.py(243):         elif c in OCTDIGITS:
0.09 sre_parse.py(249):         elif c in DIGITS:
0.09 sre_parse.py(251):         if len(escape) == 2:
0.09 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(428):                     break
0.09 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.09 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.09 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.09 sre_parse.py(139):         self.data.append(code)
0.09 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.09 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(398):         if this is None:
0.09 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.09 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.09 sre_parse.py(415):         elif this == "[":
0.09 sre_parse.py(417):             set = []
0.09 sre_parse.py(418):             setappend = set.append
0.09 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(424):             start = set[:]
0.09 sre_parse.py(425):             while 1:
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.09 sre_parse.py(227):     code = ESCAPES.get(escape)
0.09 sre_parse.py(228):     if code:
0.09 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.09 sre_parse.py(231):     if code:
0.09 sre_parse.py(233):     try:
0.09 sre_parse.py(234):         c = escape[1:2]
0.09 sre_parse.py(235):         if c == "x":
0.09 sre_parse.py(243):         elif c in OCTDIGITS:
0.09 sre_parse.py(249):         elif c in DIGITS:
0.09 sre_parse.py(251):         if len(escape) == 2:
0.09 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(429):                 elif this and this[0] == "\\":
0.09 sre_parse.py(430):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
0.09 sre_parse.py(227):     code = ESCAPES.get(escape)
0.09 sre_parse.py(228):     if code:
0.09 sre_parse.py(230):     code = CATEGORIES.get(escape)
0.09 sre_parse.py(231):     if code:
0.09 sre_parse.py(233):     try:
0.09 sre_parse.py(234):         c = escape[1:2]
0.09 sre_parse.py(235):         if c == "x":
0.09 sre_parse.py(243):         elif c in OCTDIGITS:
0.09 sre_parse.py(249):         elif c in DIGITS:
0.09 sre_parse.py(251):         if len(escape) == 2:
0.09 sre_parse.py(252):             return LITERAL, ord(escape[1])
0.09 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.09 sre_parse.py(196):         if char == self.next:
0.09 sre_parse.py(200):         return 0
0.09 sre_parse.py(459):                     if code1[0] is IN:
0.09 sre_parse.py(461):                     setappend(code1)
0.09 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(427):                 if this == "]" and set != start:
0.09 sre_parse.py(428):                     break
0.09 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.09 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.09 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.09 sre_parse.py(139):         self.data.append(code)
0.09 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.09 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.09 sre_parse.py(202):         this = self.next
0.09 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.09 sre_parse.py(183):         if self.index >= len(self.string):
0.09 sre_parse.py(186):         char = self.string[self.index]
0.09 sre_parse.py(187):         if char[0] == "\\":
0.09 sre_parse.py(188):             try:
0.09 sre_parse.py(189):                 c = self.string[self.index + 1]
0.09 sre_parse.py(192):             char = char + c
0.09 sre_parse.py(193):         self.index = self.index + len(char)
0.09 sre_parse.py(194):         self.next = char
0.09 sre_parse.py(204):         return this
0.09 sre_parse.py(398):         if this is None:
0.09 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.09 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.09 sre_parse.py(415):         elif this == "[":
0.09 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.09 sre_parse.py(474):             if this == "?":
0.09 sre_parse.py(475):                 min, max = 0, 1
0.09 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.09 sre_parse.py(127):         return len(self.data)
0.09 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.09 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.09 sre_parse.py(131):         if isinstance(index, slice):
0.09 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.09 sre_parse.py(91):         self.pattern = pattern
0.09 sre_parse.py(92):         if data is None:
0.09 sre_parse.py(94):         self.data = data
0.09 sre_parse.py(95):         self.width = None
0.09 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.10 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.10 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.10 sre_parse.py(131):         if isinstance(index, slice):
0.10 sre_parse.py(133):         return self.data[index]
0.10 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.10 sre_parse.py(131):         if isinstance(index, slice):
0.10 sre_parse.py(133):         return self.data[index]
0.10 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.10 sre_parse.py(196):         if char == self.next:
0.10 sre_parse.py(200):         return 0
0.10 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.10 sre_parse.py(135):         self.data[index] = code
0.10 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.10 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.10 sre_parse.py(202):         this = self.next
0.10 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.10 sre_parse.py(183):         if self.index >= len(self.string):
0.10 sre_parse.py(184):             self.next = None
0.10 sre_parse.py(185):             return
0.10 sre_parse.py(204):         return this
0.10 sre_parse.py(398):         if this is None:
0.10 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.10 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.10 sre_parse.py(415):         elif this == "[":
0.10 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.10 sre_parse.py(521):         elif this == ".":
0.10 sre_parse.py(524):         elif this == "(":
0.10 sre_parse.py(648):         elif this == "^":
0.10 sre_parse.py(651):         elif this == "$":
0.10 sre_parse.py(654):         elif this and this[0] == "\\":
0.10 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.10 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.10 sre_parse.py(260):     if code:
0.10 sre_parse.py(261):         return code
0.10 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.10 sre_parse.py(139):         self.data.append(code)
0.10 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.10 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.10 sre_parse.py(202):         this = self.next
0.10 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.10 sre_parse.py(183):         if self.index >= len(self.string):
0.10 sre_parse.py(184):             self.next = None
0.10 sre_parse.py(185):             return
0.10 sre_parse.py(204):         return this
0.10 sre_parse.py(398):         if this is None:
0.10 sre_parse.py(399):             break # end of pattern
0.10 sre_parse.py(661):     return subpattern
0.10 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.10 sre_parse.py(196):         if char == self.next:
0.10 sre_parse.py(200):         return 0
0.10 sre_parse.py(311):         if not nested:
0.10 sre_parse.py(312):             break
0.10 sre_parse.py(318):     if len(items) == 1:
0.10 sre_parse.py(319):         return items[0]
0.10 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.10 sre_parse.py(202):         this = self.next
0.10 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.10 sre_parse.py(183):         if self.index >= len(self.string):
0.10 sre_parse.py(184):             self.next = None
0.10 sre_parse.py(185):             return
0.10 sre_parse.py(204):         return this
0.10 sre_parse.py(676):     if tail == ")":
0.10 sre_parse.py(678):     elif tail:
0.10 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.10 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.10 sre_parse.py(689):     return p
0.10 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.10 sre_compile.py(482):     flags = p.pattern.flags | flags
0.10 sre_compile.py(483):     code = []
0.10 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.10 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.10 sre_parse.py(142):         if self.width:
0.10 sre_parse.py(144):         lo = hi = 0L
0.10 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.10 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(148):             if op is BRANCH:
0.10 sre_parse.py(157):             elif op is CALL:
0.10 sre_parse.py(161):             elif op is SUBPATTERN:
0.10 sre_parse.py(165):             elif op in REPEATCODES:
0.10 sre_parse.py(169):             elif op in UNITCODES:
0.10 sre_parse.py(170):                 lo = lo + 1
0.10 sre_parse.py(171):                 hi = hi + 1
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(148):             if op is BRANCH:
0.10 sre_parse.py(157):             elif op is CALL:
0.10 sre_parse.py(161):             elif op is SUBPATTERN:
0.10 sre_parse.py(165):             elif op in REPEATCODES:
0.10 sre_parse.py(169):             elif op in UNITCODES:
0.10 sre_parse.py(170):                 lo = lo + 1
0.10 sre_parse.py(171):                 hi = hi + 1
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(148):             if op is BRANCH:
0.10 sre_parse.py(157):             elif op is CALL:
0.10 sre_parse.py(161):             elif op is SUBPATTERN:
0.10 sre_parse.py(165):             elif op in REPEATCODES:
0.10 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.10 sre_parse.py(142):         if self.width:
0.10 sre_parse.py(144):         lo = hi = 0L
0.10 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.10 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(148):             if op is BRANCH:
0.10 sre_parse.py(157):             elif op is CALL:
0.10 sre_parse.py(161):             elif op is SUBPATTERN:
0.10 sre_parse.py(165):             elif op in REPEATCODES:
0.10 sre_parse.py(169):             elif op in UNITCODES:
0.10 sre_parse.py(170):                 lo = lo + 1
0.10 sre_parse.py(171):                 hi = hi + 1
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.10 sre_parse.py(175):         return self.width
0.10 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.10 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(148):             if op is BRANCH:
0.10 sre_parse.py(157):             elif op is CALL:
0.10 sre_parse.py(161):             elif op is SUBPATTERN:
0.10 sre_parse.py(165):             elif op in REPEATCODES:
0.10 sre_parse.py(169):             elif op in UNITCODES:
0.10 sre_parse.py(172):             elif op == SUCCESS:
0.10 sre_parse.py(147):         for op, av in self.data:
0.10 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.10 sre_parse.py(175):         return self.width
0.10 sre_compile.py(366):     if lo == 0:
0.10 sre_compile.py(369):     prefix = []
0.10 sre_compile.py(370):     prefixappend = prefix.append
0.10 sre_compile.py(371):     prefix_skip = 0
0.10 sre_compile.py(372):     charset = [] # not used
0.10 sre_compile.py(373):     charsetappend = charset.append
0.10 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.10 sre_compile.py(376):         for op, av in pattern.data:
0.10 sre_compile.py(377):             if op is LITERAL:
0.10 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.10 sre_compile.py(388):                 break
0.10 sre_compile.py(390):         if not prefix and pattern.data:
0.10 sre_compile.py(391):             op, av = pattern.data[0]
0.10 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
0.10 sre_compile.py(409):             elif op is BRANCH:
0.10 sre_compile.py(422):             elif op is IN:
0.10 sre_compile.py(423):                 charset = av
0.10 sre_compile.py(429):     emit = code.append
0.10 sre_compile.py(430):     emit(OPCODES[INFO])
0.10 sre_compile.py(431):     skip = len(code); emit(0)
0.10 sre_compile.py(433):     mask = 0
0.10 sre_compile.py(434):     if prefix:
0.10 sre_compile.py(438):     elif charset:
0.10 sre_compile.py(439):         mask = mask + SRE_INFO_CHARSET
0.10 sre_compile.py(440):     emit(mask)
0.10 sre_compile.py(442):     if lo < MAXCODE:
0.10 sre_compile.py(443):         emit(lo)
0.10 sre_compile.py(447):     if hi < MAXCODE:
0.10 sre_compile.py(448):         emit(hi)
0.10 sre_compile.py(452):     if prefix:
0.10 sre_compile.py(463):     elif charset:
0.10 sre_compile.py(464):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
0.10 sre_compile.py(180):     emit = code.append
0.10 sre_compile.py(181):     if fixup is None:
0.10 sre_compile.py(182):         fixup = _identityfunction
0.10 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.10 sre_compile.py(209):     out = []
0.10 sre_compile.py(210):     outappend = out.append
0.10 sre_compile.py(211):     charmap = [0]*256
0.10 sre_compile.py(212):     try:
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(214):             if op is NEGATE:
0.10 sre_compile.py(216):             elif op is LITERAL:
0.10 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.10 sre_compile.py(25):     return x
0.10 sre_compile.py(213):         for op, av in charset:
0.10 sre_compile.py(228):     i = p = n = 0
0.10 sre_compile.py(229):     runs = []
0.10 sre_compile.py(230):     runsappend = runs.append
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(234):                 p = i
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(233):             if n == 0:
0.10 sre_compile.py(235):             n = n + 1
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(237):             runsappend((p, n))
0.10 sre_compile.py(238):             n = 0
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.10 sre_compile.py(231):     for c in charmap:
0.10 sre_compile.py(232):         if c:
0.10 sre_compile.py(236):         elif n:
0.10 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(240):     if n:
0.11 sre_compile.py(242):     if len(runs) <= 2:
0.11 sre_compile.py(244):         for p, n in runs:
0.11 sre_compile.py(245):             if n == 1:
0.11 sre_compile.py(248):                 outappend((RANGE, (p, p+n-1)))
0.11 sre_compile.py(244):         for p, n in runs:
0.11 sre_compile.py(249):         if len(out) < len(charset):
0.11 sre_compile.py(250):             return out
0.11 sre_compile.py(184):         emit(OPCODES[op])
0.11 sre_compile.py(185):         if op is NEGATE:
0.11 sre_compile.py(187):         elif op is LITERAL:
0.11 sre_compile.py(189):         elif op is RANGE:
0.11 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.11 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.11 sre_compile.py(465):     code[skip] = len(code) - skip
0.11 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.11 sre_compile.py(34):     emit = code.append
0.11 sre_compile.py(35):     _len = len
0.11 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.11 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.11 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.11 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.11 sre_compile.py(40):     for op, av in pattern:
0.11 sre_compile.py(41):         if op in LITERAL_CODES:
0.11 sre_compile.py(48):         elif op is IN:
0.11 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.11 sre_compile.py(54):                 emit(OPCODES[op])
0.11 sre_compile.py(55):                 fixup = _identityfunction
0.11 sre_compile.py(56):             skip = _len(code); emit(0)
0.11 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.11 sre_compile.py(180):     emit = code.append
0.11 sre_compile.py(181):     if fixup is None:
0.11 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.11 sre_compile.py(209):     out = []
0.11 sre_compile.py(210):     outappend = out.append
0.11 sre_compile.py(211):     charmap = [0]*256
0.11 sre_compile.py(212):     try:
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(214):             if op is NEGATE:
0.11 sre_compile.py(216):             elif op is LITERAL:
0.11 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.11 sre_compile.py(25):     return x
0.11 sre_compile.py(213):         for op, av in charset:
0.11 sre_compile.py(228):     i = p = n = 0
0.11 sre_compile.py(229):     runs = []
0.11 sre_compile.py(230):     runsappend = runs.append
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.11 sre_compile.py(232):         if c:
0.11 sre_compile.py(236):         elif n:
0.11 sre_compile.py(239):         i = i + 1
0.11 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(234):                 p = i
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(237):             runsappend((p, n))
0.12 sre_compile.py(238):             n = 0
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(240):     if n:
0.12 sre_compile.py(242):     if len(runs) <= 2:
0.12 sre_compile.py(244):         for p, n in runs:
0.12 sre_compile.py(245):             if n == 1:
0.12 sre_compile.py(248):                 outappend((RANGE, (p, p+n-1)))
0.12 sre_compile.py(244):         for p, n in runs:
0.12 sre_compile.py(249):         if len(out) < len(charset):
0.12 sre_compile.py(250):             return out
0.12 sre_compile.py(184):         emit(OPCODES[op])
0.12 sre_compile.py(185):         if op is NEGATE:
0.12 sre_compile.py(187):         elif op is LITERAL:
0.12 sre_compile.py(189):         elif op is RANGE:
0.12 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.12 sre_compile.py(25):     return x
0.12 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.12 sre_compile.py(25):     return x
0.12 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.12 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.12 sre_compile.py(58):             code[skip] = _len(code) - skip
0.12 sre_compile.py(40):     for op, av in pattern:
0.12 sre_compile.py(41):         if op in LITERAL_CODES:
0.12 sre_compile.py(48):         elif op is IN:
0.12 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.12 sre_compile.py(54):                 emit(OPCODES[op])
0.12 sre_compile.py(55):                 fixup = _identityfunction
0.12 sre_compile.py(56):             skip = _len(code); emit(0)
0.12 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.12 sre_compile.py(180):     emit = code.append
0.12 sre_compile.py(181):     if fixup is None:
0.12 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.12 sre_compile.py(209):     out = []
0.12 sre_compile.py(210):     outappend = out.append
0.12 sre_compile.py(211):     charmap = [0]*256
0.12 sre_compile.py(212):     try:
0.12 sre_compile.py(213):         for op, av in charset:
0.12 sre_compile.py(214):             if op is NEGATE:
0.12 sre_compile.py(216):             elif op is LITERAL:
0.12 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.12 sre_compile.py(25):     return x
0.12 sre_compile.py(213):         for op, av in charset:
0.12 sre_compile.py(214):             if op is NEGATE:
0.12 sre_compile.py(216):             elif op is LITERAL:
0.12 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.12 sre_compile.py(25):     return x
0.12 sre_compile.py(213):         for op, av in charset:
0.12 sre_compile.py(214):             if op is NEGATE:
0.12 sre_compile.py(216):             elif op is LITERAL:
0.12 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.12 sre_compile.py(25):     return x
0.12 sre_compile.py(213):         for op, av in charset:
0.12 sre_compile.py(228):     i = p = n = 0
0.12 sre_compile.py(229):     runs = []
0.12 sre_compile.py(230):     runsappend = runs.append
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(234):                 p = i
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(237):             runsappend((p, n))
0.12 sre_compile.py(238):             n = 0
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(233):             if n == 0:
0.12 sre_compile.py(234):                 p = i
0.12 sre_compile.py(235):             n = n + 1
0.12 sre_compile.py(239):         i = i + 1
0.12 sre_compile.py(231):     for c in charmap:
0.12 sre_compile.py(232):         if c:
0.12 sre_compile.py(236):         elif n:
0.12 sre_compile.py(237):             runsappend((p, n))
0.13 sre_compile.py(238):             n = 0
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(233):             if n == 0:
0.13 sre_compile.py(234):                 p = i
0.13 sre_compile.py(235):             n = n + 1
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(237):             runsappend((p, n))
0.13 sre_compile.py(238):             n = 0
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(232):         if c:
0.13 sre_compile.py(236):         elif n:
0.13 sre_compile.py(239):         i = i + 1
0.13 sre_compile.py(231):     for c in charmap:
0.13 sre_compile.py(240):     if n:
0.13 sre_compile.py(242):     if len(runs) <= 2:
0.13 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.13 sre_compile.py(259):     data = []
0.13 sre_compile.py(260):     dataappend = data.append
0.13 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.13 sre_compile.py(264):         start = (1L, 0L)
0.13 sre_compile.py(265):     m, v = start
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(271):             dataappend(v)
0.13 sre_compile.py(272):             m, v = start
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(269):         m = m + m
0.13 sre_compile.py(270):         if m > MAXCODE:
0.13 sre_compile.py(266):     for c in bits:
0.13 sre_compile.py(267):         if c:
0.13 sre_compile.py(268):             v = v + m
0.13 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(268):             v = v + m
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(268):             v = v + m
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(267):         if c:
0.14 sre_compile.py(269):         m = m + m
0.14 sre_compile.py(270):         if m > MAXCODE:
0.14 sre_compile.py(271):             dataappend(v)
0.14 sre_compile.py(272):             m, v = start
0.14 sre_compile.py(266):     for c in bits:
0.14 sre_compile.py(273):     return data
0.14 sre_compile.py(254):         outappend((CHARSET, data))
0.14 sre_compile.py(255):         return out
0.14 sre_compile.py(184):         emit(OPCODES[op])
0.14 sre_compile.py(185):         if op is NEGATE:
0.14 sre_compile.py(187):         elif op is LITERAL:
0.14 sre_compile.py(189):         elif op is RANGE:
0.14 sre_compile.py(192):         elif op is CHARSET:
0.14 sre_compile.py(193):             code.extend(av)
0.14 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.14 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.14 sre_compile.py(58):             code[skip] = _len(code) - skip
0.14 sre_compile.py(40):     for op, av in pattern:
0.14 sre_compile.py(41):         if op in LITERAL_CODES:
0.14 sre_compile.py(48):         elif op is IN:
0.14 sre_compile.py(59):         elif op is ANY:
0.14 sre_compile.py(64):         elif op in REPEATING_CODES:
0.14 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.14 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.14 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.14 sre_parse.py(142):         if self.width:
0.14 sre_parse.py(143):             return self.width
0.14 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.14 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.14 sre_parse.py(131):         if isinstance(index, slice):
0.14 sre_parse.py(133):         return self.data[index]
0.14 sre_compile.py(75):                 if op is MAX_REPEAT:
0.14 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.14 sre_compile.py(79):                 skip = _len(code); emit(0)
0.14 sre_compile.py(80):                 emit(av[0])
0.14 sre_compile.py(81):                 emit(av[1])
0.14 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.14 sre_compile.py(34):     emit = code.append
0.14 sre_compile.py(35):     _len = len
0.14 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.14 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.14 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.14 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.14 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.14 sre_parse.py(131):         if isinstance(index, slice):
0.14 sre_parse.py(133):         return self.data[index]
0.14 sre_compile.py(41):         if op in LITERAL_CODES:
0.14 sre_compile.py(48):         elif op is IN:
0.14 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.14 sre_compile.py(54):                 emit(OPCODES[op])
0.14 sre_compile.py(55):                 fixup = _identityfunction
0.14 sre_compile.py(56):             skip = _len(code); emit(0)
0.14 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.14 sre_compile.py(180):     emit = code.append
0.14 sre_compile.py(181):     if fixup is None:
0.14 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.14 sre_compile.py(209):     out = []
0.14 sre_compile.py(210):     outappend = out.append
0.14 sre_compile.py(211):     charmap = [0]*256
0.14 sre_compile.py(212):     try:
0.14 sre_compile.py(213):         for op, av in charset:
0.14 sre_compile.py(214):             if op is NEGATE:
0.14 sre_compile.py(216):             elif op is LITERAL:
0.14 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.14 sre_compile.py(25):     return x
0.14 sre_compile.py(213):         for op, av in charset:
0.14 sre_compile.py(214):             if op is NEGATE:
0.14 sre_compile.py(216):             elif op is LITERAL:
0.14 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.14 sre_compile.py(25):     return x
0.14 sre_compile.py(213):         for op, av in charset:
0.14 sre_compile.py(228):     i = p = n = 0
0.14 sre_compile.py(229):     runs = []
0.14 sre_compile.py(230):     runsappend = runs.append
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.14 sre_compile.py(232):         if c:
0.14 sre_compile.py(236):         elif n:
0.14 sre_compile.py(239):         i = i + 1
0.14 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(233):             if n == 0:
0.15 sre_compile.py(234):                 p = i
0.15 sre_compile.py(235):             n = n + 1
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(237):             runsappend((p, n))
0.15 sre_compile.py(238):             n = 0
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(233):             if n == 0:
0.15 sre_compile.py(234):                 p = i
0.15 sre_compile.py(235):             n = n + 1
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(237):             runsappend((p, n))
0.15 sre_compile.py(238):             n = 0
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(232):         if c:
0.15 sre_compile.py(236):         elif n:
0.15 sre_compile.py(239):         i = i + 1
0.15 sre_compile.py(231):     for c in charmap:
0.15 sre_compile.py(240):     if n:
0.15 sre_compile.py(242):     if len(runs) <= 2:
0.15 sre_compile.py(244):         for p, n in runs:
0.15 sre_compile.py(245):             if n == 1:
0.15 sre_compile.py(246):                 outappend((LITERAL, p))
0.15 sre_compile.py(244):         for p, n in runs:
0.15 sre_compile.py(245):             if n == 1:
0.15 sre_compile.py(246):                 outappend((LITERAL, p))
0.15 sre_compile.py(244):         for p, n in runs:
0.15 sre_compile.py(249):         if len(out) < len(charset):
0.15 sre_compile.py(256):     return charset
0.15 sre_compile.py(184):         emit(OPCODES[op])
0.15 sre_compile.py(185):         if op is NEGATE:
0.15 sre_compile.py(187):         elif op is LITERAL:
0.15 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.15 sre_compile.py(25):     return x
0.15 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.15 sre_compile.py(184):         emit(OPCODES[op])
0.15 sre_compile.py(185):         if op is NEGATE:
0.15 sre_compile.py(187):         elif op is LITERAL:
0.15 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.15 sre_compile.py(25):     return x
0.15 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.15 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.15 sre_compile.py(58):             code[skip] = _len(code) - skip
0.15 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.15 sre_parse.py(131):         if isinstance(index, slice):
0.15 sre_parse.py(133):         return self.data[index]
0.15 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.15 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.15 sre_compile.py(40):     for op, av in pattern:
0.15 sre_compile.py(41):         if op in LITERAL_CODES:
0.15 sre_compile.py(48):         elif op is IN:
0.15 sre_compile.py(59):         elif op is ANY:
0.15 sre_compile.py(64):         elif op in REPEATING_CODES:
0.15 sre_compile.py(96):         elif op is SUBPATTERN:
0.15 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.15 sre_compile.py(107):         elif op in ASSERT_CODES:
0.15 sre_compile.py(120):         elif op is CALL:
0.15 sre_compile.py(126):         elif op is AT:
0.15 sre_compile.py(127):             emit(OPCODES[op])
0.15 sre_compile.py(128):             if flags & SRE_FLAG_MULTILINE:
0.15 sre_compile.py(130):             if flags & SRE_FLAG_LOCALE:
0.15 sre_compile.py(132):             elif flags & SRE_FLAG_UNICODE:
0.15 sre_compile.py(134):             emit(ATCODES[av])
0.15 sre_compile.py(40):     for op, av in pattern:
0.16 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.16 sre_compile.py(493):     return code
0.16 sre_compile.py(509):     if p.pattern.groups > 100:
0.16 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.16 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.16 sre_compile.py(517):     for k, i in groupindex.items():
0.16 sre_compile.py(520):     return _sre.compile(
0.16 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.16 sre_compile.py(522):         p.pattern.groups-1,
0.16 sre_compile.py(523):         groupindex, indexgroup
0.16 re.py(243):     if len(_cache) >= _MAXCACHE:
0.16 re.py(245):     _cache[cachekey] = p
0.16 re.py(246):     return p
0.16 textwrap.py(108):                  width=70,
0.16 textwrap.py(109):                  initial_indent="",
0.16 textwrap.py(110):                  subsequent_indent="",
0.16 textwrap.py(111):                  expand_tabs=True,
0.16 textwrap.py(112):                  replace_whitespace=True,
0.16 textwrap.py(113):                  fix_sentence_endings=False,
0.16 textwrap.py(114):                  break_long_words=True,
0.16 textwrap.py(115):                  drop_whitespace=True,
0.16 textwrap.py(116):                  break_on_hyphens=True):
0.16 textwrap.py(138):     def _munge_whitespace(self, text):
0.16 textwrap.py(155):     def _split(self, text):
0.16 textwrap.py(184):     def _fix_sentence_endings(self, chunks):
0.16 textwrap.py(202):     def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):
0.16 textwrap.py(235):     def _wrap_chunks(self, chunks):
0.16 textwrap.py(308):     def wrap(self, text):
0.16 textwrap.py(323):     def fill(self, text):
0.16 textwrap.py(335): def wrap(text, width=70, **kwargs):
0.16 textwrap.py(348): def fill(text, width=70, **kwargs):
0.16 textwrap.py(363): _whitespace_only_re = re.compile('^[ \t]+$', re.MULTILINE)
 --- modulename: re, funcname: compile
0.16 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.16 re.py(228):     cachekey = (type(key[0]),) + key
0.16 re.py(229):     p = _cache.get(cachekey)
0.16 re.py(230):     if p is not None:
0.16 re.py(232):     pattern, flags = key
0.16 re.py(233):     if isinstance(pattern, _pattern_type):
0.16 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.16 sre_compile.py(475):     for tp in STRING_TYPES:
0.16 sre_compile.py(476):         if isinstance(obj, tp):
0.16 sre_compile.py(477):             return 1
0.16 re.py(239):     try:
0.16 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.16 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.16 sre_compile.py(475):     for tp in STRING_TYPES:
0.16 sre_compile.py(476):         if isinstance(obj, tp):
0.16 sre_compile.py(477):             return 1
0.16 sre_compile.py(499):         pattern = p
0.16 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.16 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.16 sre_parse.py(179):         self.string = string
0.16 sre_parse.py(180):         self.index = 0
0.16 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(668):     if pattern is None:
0.16 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.16 sre_parse.py(68):         self.flags = 0
0.16 sre_parse.py(69):         self.open = []
0.16 sre_parse.py(70):         self.groups = 1
0.16 sre_parse.py(71):         self.groupdict = {}
0.16 sre_parse.py(670):     pattern.flags = flags
0.16 sre_parse.py(671):     pattern.str = str
0.16 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.16 sre_parse.py(304):     items = []
0.16 sre_parse.py(305):     itemsappend = items.append
0.16 sre_parse.py(306):     sourcematch = source.match
0.16 sre_parse.py(307):     while 1:
0.16 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.16 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.16 sre_parse.py(91):         self.pattern = pattern
0.16 sre_parse.py(92):         if data is None:
0.16 sre_parse.py(93):             data = []
0.16 sre_parse.py(94):         self.data = data
0.16 sre_parse.py(95):         self.width = None
0.16 sre_parse.py(384):     subpatternappend = subpattern.append
0.16 sre_parse.py(385):     sourceget = source.get
0.16 sre_parse.py(386):     sourcematch = source.match
0.16 sre_parse.py(387):     _len = len
0.16 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.16 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.16 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.16 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.16 sre_parse.py(393):     while 1:
0.16 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.16 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(398):         if this is None:
0.16 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.16 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.16 sre_parse.py(415):         elif this == "[":
0.16 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.16 sre_parse.py(521):         elif this == ".":
0.16 sre_parse.py(524):         elif this == "(":
0.16 sre_parse.py(648):         elif this == "^":
0.16 sre_parse.py(649):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
0.16 sre_parse.py(139):         self.data.append(code)
0.16 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.16 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(398):         if this is None:
0.16 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.16 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.16 sre_parse.py(415):         elif this == "[":
0.16 sre_parse.py(417):             set = []
0.16 sre_parse.py(418):             setappend = set.append
0.16 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.16 sre_parse.py(196):         if char == self.next:
0.16 sre_parse.py(200):         return 0
0.16 sre_parse.py(424):             start = set[:]
0.16 sre_parse.py(425):             while 1:
0.16 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(427):                 if this == "]" and set != start:
0.16 sre_parse.py(429):                 elif this and this[0] == "\\":
0.16 sre_parse.py(431):                 elif this:
0.16 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.16 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.16 sre_parse.py(196):         if char == self.next:
0.16 sre_parse.py(200):         return 0
0.16 sre_parse.py(459):                     if code1[0] is IN:
0.16 sre_parse.py(461):                     setappend(code1)
0.16 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(427):                 if this == "]" and set != start:
0.16 sre_parse.py(429):                 elif this and this[0] == "\\":
0.16 sre_parse.py(431):                 elif this:
0.16 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.16 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.16 sre_parse.py(196):         if char == self.next:
0.16 sre_parse.py(200):         return 0
0.16 sre_parse.py(459):                     if code1[0] is IN:
0.16 sre_parse.py(461):                     setappend(code1)
0.16 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(427):                 if this == "]" and set != start:
0.16 sre_parse.py(428):                     break
0.16 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.16 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.16 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.16 sre_parse.py(139):         self.data.append(code)
0.16 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.16 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(186):         char = self.string[self.index]
0.16 sre_parse.py(187):         if char[0] == "\\":
0.16 sre_parse.py(193):         self.index = self.index + len(char)
0.16 sre_parse.py(194):         self.next = char
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(398):         if this is None:
0.16 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.16 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.16 sre_parse.py(415):         elif this == "[":
0.16 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.16 sre_parse.py(474):             if this == "?":
0.16 sre_parse.py(476):             elif this == "*":
0.16 sre_parse.py(479):             elif this == "+":
0.16 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.16 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.16 sre_parse.py(127):         return len(self.data)
0.16 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.16 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.16 sre_parse.py(131):         if isinstance(index, slice):
0.16 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.16 sre_parse.py(91):         self.pattern = pattern
0.16 sre_parse.py(92):         if data is None:
0.16 sre_parse.py(94):         self.data = data
0.16 sre_parse.py(95):         self.width = None
0.16 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.16 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.16 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.16 sre_parse.py(131):         if isinstance(index, slice):
0.16 sre_parse.py(133):         return self.data[index]
0.16 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.16 sre_parse.py(131):         if isinstance(index, slice):
0.16 sre_parse.py(133):         return self.data[index]
0.16 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.16 sre_parse.py(196):         if char == self.next:
0.16 sre_parse.py(200):         return 0
0.16 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.16 sre_parse.py(135):         self.data[index] = code
0.16 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.16 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(184):             self.next = None
0.16 sre_parse.py(185):             return
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(398):         if this is None:
0.16 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.16 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.16 sre_parse.py(415):         elif this == "[":
0.16 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.16 sre_parse.py(521):         elif this == ".":
0.16 sre_parse.py(524):         elif this == "(":
0.16 sre_parse.py(648):         elif this == "^":
0.16 sre_parse.py(651):         elif this == "$":
0.16 sre_parse.py(652):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
0.16 sre_parse.py(139):         self.data.append(code)
0.16 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.16 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(184):             self.next = None
0.16 sre_parse.py(185):             return
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(398):         if this is None:
0.16 sre_parse.py(399):             break # end of pattern
0.16 sre_parse.py(661):     return subpattern
0.16 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.16 sre_parse.py(196):         if char == self.next:
0.16 sre_parse.py(200):         return 0
0.16 sre_parse.py(311):         if not nested:
0.16 sre_parse.py(312):             break
0.16 sre_parse.py(318):     if len(items) == 1:
0.16 sre_parse.py(319):         return items[0]
0.16 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.16 sre_parse.py(202):         this = self.next
0.16 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.16 sre_parse.py(183):         if self.index >= len(self.string):
0.16 sre_parse.py(184):             self.next = None
0.16 sre_parse.py(185):             return
0.16 sre_parse.py(204):         return this
0.16 sre_parse.py(676):     if tail == ")":
0.16 sre_parse.py(678):     elif tail:
0.16 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.16 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.16 sre_parse.py(689):     return p
0.16 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.16 sre_compile.py(482):     flags = p.pattern.flags | flags
0.16 sre_compile.py(483):     code = []
0.16 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.16 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.16 sre_parse.py(142):         if self.width:
0.16 sre_parse.py(144):         lo = hi = 0L
0.16 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.16 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(148):             if op is BRANCH:
0.16 sre_parse.py(157):             elif op is CALL:
0.16 sre_parse.py(161):             elif op is SUBPATTERN:
0.16 sre_parse.py(165):             elif op in REPEATCODES:
0.16 sre_parse.py(169):             elif op in UNITCODES:
0.16 sre_parse.py(172):             elif op == SUCCESS:
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(148):             if op is BRANCH:
0.16 sre_parse.py(157):             elif op is CALL:
0.16 sre_parse.py(161):             elif op is SUBPATTERN:
0.16 sre_parse.py(165):             elif op in REPEATCODES:
0.16 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.16 sre_parse.py(142):         if self.width:
0.16 sre_parse.py(144):         lo = hi = 0L
0.16 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.16 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(148):             if op is BRANCH:
0.16 sre_parse.py(157):             elif op is CALL:
0.16 sre_parse.py(161):             elif op is SUBPATTERN:
0.16 sre_parse.py(165):             elif op in REPEATCODES:
0.16 sre_parse.py(169):             elif op in UNITCODES:
0.16 sre_parse.py(170):                 lo = lo + 1
0.16 sre_parse.py(171):                 hi = hi + 1
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.16 sre_parse.py(175):         return self.width
0.16 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.16 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(148):             if op is BRANCH:
0.16 sre_parse.py(157):             elif op is CALL:
0.16 sre_parse.py(161):             elif op is SUBPATTERN:
0.16 sre_parse.py(165):             elif op in REPEATCODES:
0.16 sre_parse.py(169):             elif op in UNITCODES:
0.16 sre_parse.py(172):             elif op == SUCCESS:
0.16 sre_parse.py(147):         for op, av in self.data:
0.16 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.16 sre_parse.py(175):         return self.width
0.16 sre_compile.py(366):     if lo == 0:
0.16 sre_compile.py(369):     prefix = []
0.16 sre_compile.py(370):     prefixappend = prefix.append
0.16 sre_compile.py(371):     prefix_skip = 0
0.16 sre_compile.py(372):     charset = [] # not used
0.16 sre_compile.py(373):     charsetappend = charset.append
0.16 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.16 sre_compile.py(376):         for op, av in pattern.data:
0.16 sre_compile.py(377):             if op is LITERAL:
0.16 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.16 sre_compile.py(388):                 break
0.16 sre_compile.py(390):         if not prefix and pattern.data:
0.16 sre_compile.py(391):             op, av = pattern.data[0]
0.16 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
0.16 sre_compile.py(409):             elif op is BRANCH:
0.16 sre_compile.py(422):             elif op is IN:
0.16 sre_compile.py(429):     emit = code.append
0.16 sre_compile.py(430):     emit(OPCODES[INFO])
0.16 sre_compile.py(431):     skip = len(code); emit(0)
0.16 sre_compile.py(433):     mask = 0
0.16 sre_compile.py(434):     if prefix:
0.16 sre_compile.py(438):     elif charset:
0.16 sre_compile.py(440):     emit(mask)
0.16 sre_compile.py(442):     if lo < MAXCODE:
0.16 sre_compile.py(443):         emit(lo)
0.16 sre_compile.py(447):     if hi < MAXCODE:
0.16 sre_compile.py(448):         emit(hi)
0.16 sre_compile.py(452):     if prefix:
0.16 sre_compile.py(463):     elif charset:
0.16 sre_compile.py(465):     code[skip] = len(code) - skip
0.16 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.16 sre_compile.py(34):     emit = code.append
0.16 sre_compile.py(35):     _len = len
0.16 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.16 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.16 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.16 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.16 sre_compile.py(40):     for op, av in pattern:
0.16 sre_compile.py(41):         if op in LITERAL_CODES:
0.16 sre_compile.py(48):         elif op is IN:
0.16 sre_compile.py(59):         elif op is ANY:
0.16 sre_compile.py(64):         elif op in REPEATING_CODES:
0.16 sre_compile.py(96):         elif op is SUBPATTERN:
0.16 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.16 sre_compile.py(107):         elif op in ASSERT_CODES:
0.16 sre_compile.py(120):         elif op is CALL:
0.16 sre_compile.py(126):         elif op is AT:
0.16 sre_compile.py(127):             emit(OPCODES[op])
0.16 sre_compile.py(128):             if flags & SRE_FLAG_MULTILINE:
0.16 sre_compile.py(129):                 av = AT_MULTILINE.get(av, av)
0.16 sre_compile.py(130):             if flags & SRE_FLAG_LOCALE:
0.16 sre_compile.py(132):             elif flags & SRE_FLAG_UNICODE:
0.16 sre_compile.py(134):             emit(ATCODES[av])
0.16 sre_compile.py(40):     for op, av in pattern:
0.16 sre_compile.py(41):         if op in LITERAL_CODES:
0.16 sre_compile.py(48):         elif op is IN:
0.16 sre_compile.py(59):         elif op is ANY:
0.16 sre_compile.py(64):         elif op in REPEATING_CODES:
0.16 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.16 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.16 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.16 sre_parse.py(142):         if self.width:
0.16 sre_parse.py(143):             return self.width
0.16 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.16 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.16 sre_parse.py(131):         if isinstance(index, slice):
0.16 sre_parse.py(133):         return self.data[index]
0.16 sre_compile.py(75):                 if op is MAX_REPEAT:
0.16 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.16 sre_compile.py(79):                 skip = _len(code); emit(0)
0.16 sre_compile.py(80):                 emit(av[0])
0.16 sre_compile.py(81):                 emit(av[1])
0.16 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.16 sre_compile.py(34):     emit = code.append
0.16 sre_compile.py(35):     _len = len
0.16 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.16 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.16 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.16 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.16 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.16 sre_parse.py(131):         if isinstance(index, slice):
0.16 sre_parse.py(133):         return self.data[index]
0.16 sre_compile.py(41):         if op in LITERAL_CODES:
0.16 sre_compile.py(48):         elif op is IN:
0.16 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.16 sre_compile.py(54):                 emit(OPCODES[op])
0.16 sre_compile.py(55):                 fixup = _identityfunction
0.16 sre_compile.py(56):             skip = _len(code); emit(0)
0.16 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.16 sre_compile.py(180):     emit = code.append
0.16 sre_compile.py(181):     if fixup is None:
0.16 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.16 sre_compile.py(209):     out = []
0.16 sre_compile.py(210):     outappend = out.append
0.16 sre_compile.py(211):     charmap = [0]*256
0.16 sre_compile.py(212):     try:
0.16 sre_compile.py(213):         for op, av in charset:
0.16 sre_compile.py(214):             if op is NEGATE:
0.16 sre_compile.py(216):             elif op is LITERAL:
0.16 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.16 sre_compile.py(25):     return x
0.16 sre_compile.py(213):         for op, av in charset:
0.16 sre_compile.py(214):             if op is NEGATE:
0.16 sre_compile.py(216):             elif op is LITERAL:
0.16 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.16 sre_compile.py(25):     return x
0.16 sre_compile.py(213):         for op, av in charset:
0.16 sre_compile.py(228):     i = p = n = 0
0.16 sre_compile.py(229):     runs = []
0.16 sre_compile.py(230):     runsappend = runs.append
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(233):             if n == 0:
0.16 sre_compile.py(234):                 p = i
0.16 sre_compile.py(235):             n = n + 1
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(237):             runsappend((p, n))
0.16 sre_compile.py(238):             n = 0
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(233):             if n == 0:
0.16 sre_compile.py(234):                 p = i
0.16 sre_compile.py(235):             n = n + 1
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(237):             runsappend((p, n))
0.16 sre_compile.py(238):             n = 0
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.16 sre_compile.py(236):         elif n:
0.16 sre_compile.py(239):         i = i + 1
0.16 sre_compile.py(231):     for c in charmap:
0.16 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(232):         if c:
0.17 sre_compile.py(236):         elif n:
0.17 sre_compile.py(239):         i = i + 1
0.17 sre_compile.py(231):     for c in charmap:
0.17 sre_compile.py(240):     if n:
0.17 sre_compile.py(242):     if len(runs) <= 2:
0.17 sre_compile.py(244):         for p, n in runs:
0.17 sre_compile.py(245):             if n == 1:
0.17 sre_compile.py(246):                 outappend((LITERAL, p))
0.17 sre_compile.py(244):         for p, n in runs:
0.17 sre_compile.py(245):             if n == 1:
0.17 sre_compile.py(246):                 outappend((LITERAL, p))
0.17 sre_compile.py(244):         for p, n in runs:
0.17 sre_compile.py(249):         if len(out) < len(charset):
0.17 sre_compile.py(256):     return charset
0.17 sre_compile.py(184):         emit(OPCODES[op])
0.17 sre_compile.py(185):         if op is NEGATE:
0.17 sre_compile.py(187):         elif op is LITERAL:
0.17 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.17 sre_compile.py(25):     return x
0.17 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.17 sre_compile.py(184):         emit(OPCODES[op])
0.17 sre_compile.py(185):         if op is NEGATE:
0.17 sre_compile.py(187):         elif op is LITERAL:
0.17 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.17 sre_compile.py(25):     return x
0.17 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.17 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.17 sre_compile.py(58):             code[skip] = _len(code) - skip
0.17 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.17 sre_parse.py(131):         if isinstance(index, slice):
0.17 sre_parse.py(133):         return self.data[index]
0.17 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.17 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.17 sre_compile.py(40):     for op, av in pattern:
0.17 sre_compile.py(41):         if op in LITERAL_CODES:
0.17 sre_compile.py(48):         elif op is IN:
0.17 sre_compile.py(59):         elif op is ANY:
0.17 sre_compile.py(64):         elif op in REPEATING_CODES:
0.17 sre_compile.py(96):         elif op is SUBPATTERN:
0.17 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.17 sre_compile.py(107):         elif op in ASSERT_CODES:
0.17 sre_compile.py(120):         elif op is CALL:
0.17 sre_compile.py(126):         elif op is AT:
0.17 sre_compile.py(127):             emit(OPCODES[op])
0.17 sre_compile.py(128):             if flags & SRE_FLAG_MULTILINE:
0.17 sre_compile.py(129):                 av = AT_MULTILINE.get(av, av)
0.17 sre_compile.py(130):             if flags & SRE_FLAG_LOCALE:
0.17 sre_compile.py(132):             elif flags & SRE_FLAG_UNICODE:
0.17 sre_compile.py(134):             emit(ATCODES[av])
0.17 sre_compile.py(40):     for op, av in pattern:
0.17 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.17 sre_compile.py(493):     return code
0.17 sre_compile.py(509):     if p.pattern.groups > 100:
0.17 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.17 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.17 sre_compile.py(517):     for k, i in groupindex.items():
0.17 sre_compile.py(520):     return _sre.compile(
0.17 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.17 sre_compile.py(522):         p.pattern.groups-1,
0.17 sre_compile.py(523):         groupindex, indexgroup
0.17 re.py(243):     if len(_cache) >= _MAXCACHE:
0.17 re.py(245):     _cache[cachekey] = p
0.17 re.py(246):     return p
0.17 textwrap.py(364): _leading_whitespace_re = re.compile('(^[ \t]*)(?:[^ \t\n])', re.MULTILINE)
 --- modulename: re, funcname: compile
0.17 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.17 re.py(228):     cachekey = (type(key[0]),) + key
0.17 re.py(229):     p = _cache.get(cachekey)
0.17 re.py(230):     if p is not None:
0.17 re.py(232):     pattern, flags = key
0.17 re.py(233):     if isinstance(pattern, _pattern_type):
0.17 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.17 sre_compile.py(475):     for tp in STRING_TYPES:
0.17 sre_compile.py(476):         if isinstance(obj, tp):
0.17 sre_compile.py(477):             return 1
0.17 re.py(239):     try:
0.17 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.17 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.17 sre_compile.py(475):     for tp in STRING_TYPES:
0.17 sre_compile.py(476):         if isinstance(obj, tp):
0.17 sre_compile.py(477):             return 1
0.17 sre_compile.py(499):         pattern = p
0.17 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.17 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.17 sre_parse.py(179):         self.string = string
0.17 sre_parse.py(180):         self.index = 0
0.17 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(668):     if pattern is None:
0.17 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.17 sre_parse.py(68):         self.flags = 0
0.17 sre_parse.py(69):         self.open = []
0.17 sre_parse.py(70):         self.groups = 1
0.17 sre_parse.py(71):         self.groupdict = {}
0.17 sre_parse.py(670):     pattern.flags = flags
0.17 sre_parse.py(671):     pattern.str = str
0.17 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.17 sre_parse.py(304):     items = []
0.17 sre_parse.py(305):     itemsappend = items.append
0.17 sre_parse.py(306):     sourcematch = source.match
0.17 sre_parse.py(307):     while 1:
0.17 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.17 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.17 sre_parse.py(91):         self.pattern = pattern
0.17 sre_parse.py(92):         if data is None:
0.17 sre_parse.py(93):             data = []
0.17 sre_parse.py(94):         self.data = data
0.17 sre_parse.py(95):         self.width = None
0.17 sre_parse.py(384):     subpatternappend = subpattern.append
0.17 sre_parse.py(385):     sourceget = source.get
0.17 sre_parse.py(386):     sourcematch = source.match
0.17 sre_parse.py(387):     _len = len
0.17 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.17 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.17 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.17 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.17 sre_parse.py(393):     while 1:
0.17 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.17 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(398):         if this is None:
0.17 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.17 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.17 sre_parse.py(415):         elif this == "[":
0.17 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.17 sre_parse.py(521):         elif this == ".":
0.17 sre_parse.py(524):         elif this == "(":
0.17 sre_parse.py(525):             group = 1
0.17 sre_parse.py(526):             name = None
0.17 sre_parse.py(527):             condgroup = None
0.17 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(623):             if group:
0.17 sre_parse.py(625):                 if group == 2:
0.17 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.17 sre_parse.py(73):         gid = self.groups
0.17 sre_parse.py(74):         self.groups = gid + 1
0.17 sre_parse.py(75):         if name is not None:
0.17 sre_parse.py(81):         self.open.append(gid)
0.17 sre_parse.py(82):         return gid
0.17 sre_parse.py(630):                 if condgroup:
0.17 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.17 sre_parse.py(304):     items = []
0.17 sre_parse.py(305):     itemsappend = items.append
0.17 sre_parse.py(306):     sourcematch = source.match
0.17 sre_parse.py(307):     while 1:
0.17 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.17 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.17 sre_parse.py(91):         self.pattern = pattern
0.17 sre_parse.py(92):         if data is None:
0.17 sre_parse.py(93):             data = []
0.17 sre_parse.py(94):         self.data = data
0.17 sre_parse.py(95):         self.width = None
0.17 sre_parse.py(384):     subpatternappend = subpattern.append
0.17 sre_parse.py(385):     sourceget = source.get
0.17 sre_parse.py(386):     sourcematch = source.match
0.17 sre_parse.py(387):     _len = len
0.17 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.17 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.17 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.17 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.17 sre_parse.py(393):     while 1:
0.17 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.17 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(398):         if this is None:
0.17 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.17 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.17 sre_parse.py(415):         elif this == "[":
0.17 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.17 sre_parse.py(521):         elif this == ".":
0.17 sre_parse.py(524):         elif this == "(":
0.17 sre_parse.py(648):         elif this == "^":
0.17 sre_parse.py(649):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
0.17 sre_parse.py(139):         self.data.append(code)
0.17 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.17 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(398):         if this is None:
0.17 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.17 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.17 sre_parse.py(415):         elif this == "[":
0.17 sre_parse.py(417):             set = []
0.17 sre_parse.py(418):             setappend = set.append
0.17 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(424):             start = set[:]
0.17 sre_parse.py(425):             while 1:
0.17 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(427):                 if this == "]" and set != start:
0.17 sre_parse.py(429):                 elif this and this[0] == "\\":
0.17 sre_parse.py(431):                 elif this:
0.17 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.17 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(459):                     if code1[0] is IN:
0.17 sre_parse.py(461):                     setappend(code1)
0.17 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(427):                 if this == "]" and set != start:
0.17 sre_parse.py(429):                 elif this and this[0] == "\\":
0.17 sre_parse.py(431):                 elif this:
0.17 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.17 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(459):                     if code1[0] is IN:
0.17 sre_parse.py(461):                     setappend(code1)
0.17 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(427):                 if this == "]" and set != start:
0.17 sre_parse.py(428):                     break
0.17 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.17 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.17 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.17 sre_parse.py(139):         self.data.append(code)
0.17 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.17 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.17 sre_parse.py(202):         this = self.next
0.17 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.17 sre_parse.py(183):         if self.index >= len(self.string):
0.17 sre_parse.py(186):         char = self.string[self.index]
0.17 sre_parse.py(187):         if char[0] == "\\":
0.17 sre_parse.py(193):         self.index = self.index + len(char)
0.17 sre_parse.py(194):         self.next = char
0.17 sre_parse.py(204):         return this
0.17 sre_parse.py(398):         if this is None:
0.17 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.17 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.17 sre_parse.py(415):         elif this == "[":
0.17 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.17 sre_parse.py(474):             if this == "?":
0.17 sre_parse.py(476):             elif this == "*":
0.17 sre_parse.py(477):                 min, max = 0, MAXREPEAT
0.17 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.17 sre_parse.py(127):         return len(self.data)
0.17 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.17 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.17 sre_parse.py(131):         if isinstance(index, slice):
0.17 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.17 sre_parse.py(91):         self.pattern = pattern
0.17 sre_parse.py(92):         if data is None:
0.17 sre_parse.py(94):         self.data = data
0.17 sre_parse.py(95):         self.width = None
0.17 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.17 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.17 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.17 sre_parse.py(131):         if isinstance(index, slice):
0.17 sre_parse.py(133):         return self.data[index]
0.17 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.17 sre_parse.py(131):         if isinstance(index, slice):
0.17 sre_parse.py(133):         return self.data[index]
0.17 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.17 sre_parse.py(135):         self.data[index] = code
0.17 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.17 sre_parse.py(396):             break # end of subpattern
0.17 sre_parse.py(661):     return subpattern
0.17 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(200):         return 0
0.17 sre_parse.py(311):         if not nested:
0.17 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.17 sre_parse.py(196):         if char == self.next:
0.17 sre_parse.py(197):             if skip:
0.17 sre_parse.py(199):             return 1
0.17 sre_parse.py(314):             break
0.17 sre_parse.py(318):     if len(items) == 1:
0.18 sre_parse.py(319):         return items[0]
0.18 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(636):                 if group is not None:
0.18 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.18 sre_parse.py(84):         self.open.remove(gid)
0.18 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.18 sre_parse.py(139):         self.data.append(code)
0.18 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.18 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(398):         if this is None:
0.18 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.18 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.18 sre_parse.py(415):         elif this == "[":
0.18 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.18 sre_parse.py(521):         elif this == ".":
0.18 sre_parse.py(524):         elif this == "(":
0.18 sre_parse.py(525):             group = 1
0.18 sre_parse.py(526):             name = None
0.18 sre_parse.py(527):             condgroup = None
0.18 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(529):                 group = 0
0.18 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(568):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(570):                     group = 2
0.18 sre_parse.py(623):             if group:
0.18 sre_parse.py(625):                 if group == 2:
0.18 sre_parse.py(627):                     group = None
0.18 sre_parse.py(630):                 if condgroup:
0.18 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.18 sre_parse.py(304):     items = []
0.18 sre_parse.py(305):     itemsappend = items.append
0.18 sre_parse.py(306):     sourcematch = source.match
0.18 sre_parse.py(307):     while 1:
0.18 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.18 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.18 sre_parse.py(91):         self.pattern = pattern
0.18 sre_parse.py(92):         if data is None:
0.18 sre_parse.py(93):             data = []
0.18 sre_parse.py(94):         self.data = data
0.18 sre_parse.py(95):         self.width = None
0.18 sre_parse.py(384):     subpatternappend = subpattern.append
0.18 sre_parse.py(385):     sourceget = source.get
0.18 sre_parse.py(386):     sourcematch = source.match
0.18 sre_parse.py(387):     _len = len
0.18 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.18 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.18 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.18 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.18 sre_parse.py(393):     while 1:
0.18 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.18 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(398):         if this is None:
0.18 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.18 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.18 sre_parse.py(415):         elif this == "[":
0.18 sre_parse.py(417):             set = []
0.18 sre_parse.py(418):             setappend = set.append
0.18 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(422):                 setappend((NEGATE, None))
0.18 sre_parse.py(424):             start = set[:]
0.18 sre_parse.py(425):             while 1:
0.18 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(427):                 if this == "]" and set != start:
0.18 sre_parse.py(429):                 elif this and this[0] == "\\":
0.18 sre_parse.py(431):                 elif this:
0.18 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.18 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(459):                     if code1[0] is IN:
0.18 sre_parse.py(461):                     setappend(code1)
0.18 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(427):                 if this == "]" and set != start:
0.18 sre_parse.py(429):                 elif this and this[0] == "\\":
0.18 sre_parse.py(431):                 elif this:
0.18 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.18 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(459):                     if code1[0] is IN:
0.18 sre_parse.py(461):                     setappend(code1)
0.18 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(427):                 if this == "]" and set != start:
0.18 sre_parse.py(429):                 elif this and this[0] == "\\":
0.18 sre_parse.py(431):                 elif this:
0.18 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.18 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(459):                     if code1[0] is IN:
0.18 sre_parse.py(461):                     setappend(code1)
0.18 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(186):         char = self.string[self.index]
0.18 sre_parse.py(187):         if char[0] == "\\":
0.18 sre_parse.py(193):         self.index = self.index + len(char)
0.18 sre_parse.py(194):         self.next = char
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(427):                 if this == "]" and set != start:
0.18 sre_parse.py(428):                     break
0.18 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.18 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.18 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.18 sre_parse.py(139):         self.data.append(code)
0.18 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.18 sre_parse.py(396):             break # end of subpattern
0.18 sre_parse.py(661):     return subpattern
0.18 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(311):         if not nested:
0.18 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(314):             break
0.18 sre_parse.py(318):     if len(items) == 1:
0.18 sre_parse.py(319):         return items[0]
0.18 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(197):             if skip:
0.18 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(184):             self.next = None
0.18 sre_parse.py(185):             return
0.18 sre_parse.py(199):             return 1
0.18 sre_parse.py(636):                 if group is not None:
0.18 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.18 sre_parse.py(139):         self.data.append(code)
0.18 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.18 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(184):             self.next = None
0.18 sre_parse.py(185):             return
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(398):         if this is None:
0.18 sre_parse.py(399):             break # end of pattern
0.18 sre_parse.py(661):     return subpattern
0.18 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.18 sre_parse.py(196):         if char == self.next:
0.18 sre_parse.py(200):         return 0
0.18 sre_parse.py(311):         if not nested:
0.18 sre_parse.py(312):             break
0.18 sre_parse.py(318):     if len(items) == 1:
0.18 sre_parse.py(319):         return items[0]
0.18 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.18 sre_parse.py(202):         this = self.next
0.18 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.18 sre_parse.py(183):         if self.index >= len(self.string):
0.18 sre_parse.py(184):             self.next = None
0.18 sre_parse.py(185):             return
0.18 sre_parse.py(204):         return this
0.18 sre_parse.py(676):     if tail == ")":
0.18 sre_parse.py(678):     elif tail:
0.18 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.18 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.18 sre_parse.py(689):     return p
0.18 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.18 sre_compile.py(482):     flags = p.pattern.flags | flags
0.18 sre_compile.py(483):     code = []
0.18 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.18 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.18 sre_parse.py(142):         if self.width:
0.18 sre_parse.py(144):         lo = hi = 0L
0.18 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.18 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.18 sre_parse.py(142):         if self.width:
0.18 sre_parse.py(144):         lo = hi = 0L
0.18 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.18 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(165):             elif op in REPEATCODES:
0.18 sre_parse.py(169):             elif op in UNITCODES:
0.18 sre_parse.py(172):             elif op == SUCCESS:
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(165):             elif op in REPEATCODES:
0.18 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.18 sre_parse.py(142):         if self.width:
0.18 sre_parse.py(144):         lo = hi = 0L
0.18 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.18 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(165):             elif op in REPEATCODES:
0.18 sre_parse.py(169):             elif op in UNITCODES:
0.18 sre_parse.py(170):                 lo = lo + 1
0.18 sre_parse.py(171):                 hi = hi + 1
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.18 sre_parse.py(175):         return self.width
0.18 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.18 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.18 sre_parse.py(175):         return self.width
0.18 sre_parse.py(163):                 lo = lo + i
0.18 sre_parse.py(164):                 hi = hi + j
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.18 sre_parse.py(142):         if self.width:
0.18 sre_parse.py(144):         lo = hi = 0L
0.18 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.18 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(148):             if op is BRANCH:
0.18 sre_parse.py(157):             elif op is CALL:
0.18 sre_parse.py(161):             elif op is SUBPATTERN:
0.18 sre_parse.py(165):             elif op in REPEATCODES:
0.18 sre_parse.py(169):             elif op in UNITCODES:
0.18 sre_parse.py(170):                 lo = lo + 1
0.18 sre_parse.py(171):                 hi = hi + 1
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.18 sre_parse.py(175):         return self.width
0.18 sre_parse.py(163):                 lo = lo + i
0.18 sre_parse.py(164):                 hi = hi + j
0.18 sre_parse.py(147):         for op, av in self.data:
0.18 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.18 sre_parse.py(175):         return self.width
0.18 sre_compile.py(366):     if lo == 0:
0.18 sre_compile.py(369):     prefix = []
0.18 sre_compile.py(370):     prefixappend = prefix.append
0.18 sre_compile.py(371):     prefix_skip = 0
0.18 sre_compile.py(372):     charset = [] # not used
0.18 sre_compile.py(373):     charsetappend = charset.append
0.18 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.18 sre_compile.py(376):         for op, av in pattern.data:
0.18 sre_compile.py(377):             if op is LITERAL:
0.18 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
0.18 sre_parse.py(127):         return len(self.data)
0.18 sre_compile.py(388):                 break
0.18 sre_compile.py(390):         if not prefix and pattern.data:
0.18 sre_compile.py(391):             op, av = pattern.data[0]
0.18 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
0.18 sre_parse.py(127):         return len(self.data)
0.18 sre_compile.py(393):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
0.18 sre_parse.py(131):         if isinstance(index, slice):
0.18 sre_parse.py(133):         return self.data[index]
0.18 sre_compile.py(394):                 if op is LITERAL:
0.18 sre_compile.py(396):                 elif op is BRANCH:
0.18 sre_compile.py(429):     emit = code.append
0.18 sre_compile.py(430):     emit(OPCODES[INFO])
0.18 sre_compile.py(431):     skip = len(code); emit(0)
0.18 sre_compile.py(433):     mask = 0
0.18 sre_compile.py(434):     if prefix:
0.18 sre_compile.py(438):     elif charset:
0.18 sre_compile.py(440):     emit(mask)
0.18 sre_compile.py(442):     if lo < MAXCODE:
0.18 sre_compile.py(443):         emit(lo)
0.18 sre_compile.py(447):     if hi < MAXCODE:
0.18 sre_compile.py(448):         emit(hi)
0.18 sre_compile.py(452):     if prefix:
0.18 sre_compile.py(463):     elif charset:
0.18 sre_compile.py(465):     code[skip] = len(code) - skip
0.18 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.18 sre_compile.py(34):     emit = code.append
0.18 sre_compile.py(35):     _len = len
0.18 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.18 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.18 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.18 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.18 sre_compile.py(40):     for op, av in pattern:
0.18 sre_compile.py(41):         if op in LITERAL_CODES:
0.18 sre_compile.py(48):         elif op is IN:
0.18 sre_compile.py(59):         elif op is ANY:
0.18 sre_compile.py(64):         elif op in REPEATING_CODES:
0.18 sre_compile.py(96):         elif op is SUBPATTERN:
0.18 sre_compile.py(97):             if av[0]:
0.18 sre_compile.py(98):                 emit(OPCODES[MARK])
0.18 sre_compile.py(99):                 emit((av[0]-1)*2)
0.18 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.18 sre_compile.py(34):     emit = code.append
0.18 sre_compile.py(35):     _len = len
0.18 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.18 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.18 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.18 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.18 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.18 sre_parse.py(131):         if isinstance(index, slice):
0.18 sre_parse.py(133):         return self.data[index]
0.18 sre_compile.py(41):         if op in LITERAL_CODES:
0.18 sre_compile.py(48):         elif op is IN:
0.18 sre_compile.py(59):         elif op is ANY:
0.18 sre_compile.py(64):         elif op in REPEATING_CODES:
0.18 sre_compile.py(96):         elif op is SUBPATTERN:
0.18 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.18 sre_compile.py(107):         elif op in ASSERT_CODES:
0.18 sre_compile.py(120):         elif op is CALL:
0.18 sre_compile.py(126):         elif op is AT:
0.18 sre_compile.py(127):             emit(OPCODES[op])
0.18 sre_compile.py(128):             if flags & SRE_FLAG_MULTILINE:
0.18 sre_compile.py(129):                 av = AT_MULTILINE.get(av, av)
0.18 sre_compile.py(130):             if flags & SRE_FLAG_LOCALE:
0.18 sre_compile.py(132):             elif flags & SRE_FLAG_UNICODE:
0.18 sre_compile.py(134):             emit(ATCODES[av])
0.18 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.18 sre_parse.py(131):         if isinstance(index, slice):
0.18 sre_parse.py(133):         return self.data[index]
0.18 sre_compile.py(41):         if op in LITERAL_CODES:
0.18 sre_compile.py(48):         elif op is IN:
0.18 sre_compile.py(59):         elif op is ANY:
0.18 sre_compile.py(64):         elif op in REPEATING_CODES:
0.18 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.18 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.18 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.18 sre_parse.py(142):         if self.width:
0.18 sre_parse.py(143):             return self.width
0.18 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.18 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.18 sre_parse.py(131):         if isinstance(index, slice):
0.18 sre_parse.py(133):         return self.data[index]
0.18 sre_compile.py(75):                 if op is MAX_REPEAT:
0.18 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.18 sre_compile.py(79):                 skip = _len(code); emit(0)
0.18 sre_compile.py(80):                 emit(av[0])
0.18 sre_compile.py(81):                 emit(av[1])
0.18 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.18 sre_compile.py(34):     emit = code.append
0.18 sre_compile.py(35):     _len = len
0.18 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.18 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.18 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.18 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.18 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.18 sre_parse.py(131):         if isinstance(index, slice):
0.18 sre_parse.py(133):         return self.data[index]
0.18 sre_compile.py(41):         if op in LITERAL_CODES:
0.18 sre_compile.py(48):         elif op is IN:
0.18 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.18 sre_compile.py(54):                 emit(OPCODES[op])
0.18 sre_compile.py(55):                 fixup = _identityfunction
0.18 sre_compile.py(56):             skip = _len(code); emit(0)
0.18 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.18 sre_compile.py(180):     emit = code.append
0.18 sre_compile.py(181):     if fixup is None:
0.18 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.18 sre_compile.py(209):     out = []
0.18 sre_compile.py(210):     outappend = out.append
0.18 sre_compile.py(211):     charmap = [0]*256
0.18 sre_compile.py(212):     try:
0.18 sre_compile.py(213):         for op, av in charset:
0.18 sre_compile.py(214):             if op is NEGATE:
0.18 sre_compile.py(216):             elif op is LITERAL:
0.18 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.18 sre_compile.py(25):     return x
0.18 sre_compile.py(213):         for op, av in charset:
0.18 sre_compile.py(214):             if op is NEGATE:
0.18 sre_compile.py(216):             elif op is LITERAL:
0.18 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.18 sre_compile.py(25):     return x
0.18 sre_compile.py(213):         for op, av in charset:
0.18 sre_compile.py(228):     i = p = n = 0
0.18 sre_compile.py(229):     runs = []
0.18 sre_compile.py(230):     runsappend = runs.append
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(233):             if n == 0:
0.18 sre_compile.py(234):                 p = i
0.18 sre_compile.py(235):             n = n + 1
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(237):             runsappend((p, n))
0.18 sre_compile.py(238):             n = 0
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(233):             if n == 0:
0.18 sre_compile.py(234):                 p = i
0.18 sre_compile.py(235):             n = n + 1
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(237):             runsappend((p, n))
0.18 sre_compile.py(238):             n = 0
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.18 sre_compile.py(232):         if c:
0.18 sre_compile.py(236):         elif n:
0.18 sre_compile.py(239):         i = i + 1
0.18 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(240):     if n:
0.19 sre_compile.py(242):     if len(runs) <= 2:
0.19 sre_compile.py(244):         for p, n in runs:
0.19 sre_compile.py(245):             if n == 1:
0.19 sre_compile.py(246):                 outappend((LITERAL, p))
0.19 sre_compile.py(244):         for p, n in runs:
0.19 sre_compile.py(245):             if n == 1:
0.19 sre_compile.py(246):                 outappend((LITERAL, p))
0.19 sre_compile.py(244):         for p, n in runs:
0.19 sre_compile.py(249):         if len(out) < len(charset):
0.19 sre_compile.py(256):     return charset
0.19 sre_compile.py(184):         emit(OPCODES[op])
0.19 sre_compile.py(185):         if op is NEGATE:
0.19 sre_compile.py(187):         elif op is LITERAL:
0.19 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.19 sre_compile.py(25):     return x
0.19 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.19 sre_compile.py(184):         emit(OPCODES[op])
0.19 sre_compile.py(185):         if op is NEGATE:
0.19 sre_compile.py(187):         elif op is LITERAL:
0.19 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.19 sre_compile.py(25):     return x
0.19 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.19 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.19 sre_compile.py(58):             code[skip] = _len(code) - skip
0.19 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.19 sre_parse.py(131):         if isinstance(index, slice):
0.19 sre_parse.py(133):         return self.data[index]
0.19 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.19 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.19 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.19 sre_parse.py(131):         if isinstance(index, slice):
0.19 sre_parse.py(133):         return self.data[index]
0.19 sre_compile.py(102):             if av[0]:
0.19 sre_compile.py(103):                 emit(OPCODES[MARK])
0.19 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.19 sre_compile.py(40):     for op, av in pattern:
0.19 sre_compile.py(41):         if op in LITERAL_CODES:
0.19 sre_compile.py(48):         elif op is IN:
0.19 sre_compile.py(59):         elif op is ANY:
0.19 sre_compile.py(64):         elif op in REPEATING_CODES:
0.19 sre_compile.py(96):         elif op is SUBPATTERN:
0.19 sre_compile.py(97):             if av[0]:
0.19 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.19 sre_compile.py(34):     emit = code.append
0.19 sre_compile.py(35):     _len = len
0.19 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.19 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.19 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.19 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.19 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.19 sre_parse.py(131):         if isinstance(index, slice):
0.19 sre_parse.py(133):         return self.data[index]
0.19 sre_compile.py(41):         if op in LITERAL_CODES:
0.19 sre_compile.py(48):         elif op is IN:
0.19 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.19 sre_compile.py(54):                 emit(OPCODES[op])
0.19 sre_compile.py(55):                 fixup = _identityfunction
0.19 sre_compile.py(56):             skip = _len(code); emit(0)
0.19 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.19 sre_compile.py(180):     emit = code.append
0.19 sre_compile.py(181):     if fixup is None:
0.19 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.19 sre_compile.py(209):     out = []
0.19 sre_compile.py(210):     outappend = out.append
0.19 sre_compile.py(211):     charmap = [0]*256
0.19 sre_compile.py(212):     try:
0.19 sre_compile.py(213):         for op, av in charset:
0.19 sre_compile.py(214):             if op is NEGATE:
0.19 sre_compile.py(215):                 outappend((op, av))
0.19 sre_compile.py(213):         for op, av in charset:
0.19 sre_compile.py(214):             if op is NEGATE:
0.19 sre_compile.py(216):             elif op is LITERAL:
0.19 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.19 sre_compile.py(25):     return x
0.19 sre_compile.py(213):         for op, av in charset:
0.19 sre_compile.py(214):             if op is NEGATE:
0.19 sre_compile.py(216):             elif op is LITERAL:
0.19 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.19 sre_compile.py(25):     return x
0.19 sre_compile.py(213):         for op, av in charset:
0.19 sre_compile.py(214):             if op is NEGATE:
0.19 sre_compile.py(216):             elif op is LITERAL:
0.19 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.19 sre_compile.py(25):     return x
0.19 sre_compile.py(213):         for op, av in charset:
0.19 sre_compile.py(228):     i = p = n = 0
0.19 sre_compile.py(229):     runs = []
0.19 sre_compile.py(230):     runsappend = runs.append
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(233):             if n == 0:
0.19 sre_compile.py(234):                 p = i
0.19 sre_compile.py(235):             n = n + 1
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(233):             if n == 0:
0.19 sre_compile.py(235):             n = n + 1
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(237):             runsappend((p, n))
0.19 sre_compile.py(238):             n = 0
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(233):             if n == 0:
0.19 sre_compile.py(234):                 p = i
0.19 sre_compile.py(235):             n = n + 1
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(237):             runsappend((p, n))
0.19 sre_compile.py(238):             n = 0
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.19 sre_compile.py(236):         elif n:
0.19 sre_compile.py(239):         i = i + 1
0.19 sre_compile.py(231):     for c in charmap:
0.19 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(232):         if c:
0.20 sre_compile.py(236):         elif n:
0.20 sre_compile.py(239):         i = i + 1
0.20 sre_compile.py(231):     for c in charmap:
0.20 sre_compile.py(240):     if n:
0.20 sre_compile.py(242):     if len(runs) <= 2:
0.20 sre_compile.py(244):         for p, n in runs:
0.20 sre_compile.py(245):             if n == 1:
0.20 sre_compile.py(248):                 outappend((RANGE, (p, p+n-1)))
0.20 sre_compile.py(244):         for p, n in runs:
0.20 sre_compile.py(245):             if n == 1:
0.20 sre_compile.py(246):                 outappend((LITERAL, p))
0.20 sre_compile.py(244):         for p, n in runs:
0.20 sre_compile.py(249):         if len(out) < len(charset):
0.20 sre_compile.py(250):             return out
0.20 sre_compile.py(184):         emit(OPCODES[op])
0.20 sre_compile.py(185):         if op is NEGATE:
0.20 sre_compile.py(186):             pass
0.20 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.20 sre_compile.py(184):         emit(OPCODES[op])
0.20 sre_compile.py(185):         if op is NEGATE:
0.20 sre_compile.py(187):         elif op is LITERAL:
0.20 sre_compile.py(189):         elif op is RANGE:
0.20 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.20 sre_compile.py(25):     return x
0.20 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.20 sre_compile.py(25):     return x
0.20 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.20 sre_compile.py(184):         emit(OPCODES[op])
0.20 sre_compile.py(185):         if op is NEGATE:
0.20 sre_compile.py(187):         elif op is LITERAL:
0.20 sre_compile.py(188):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
0.20 sre_compile.py(25):     return x
0.20 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.20 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.20 sre_compile.py(58):             code[skip] = _len(code) - skip
0.20 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.20 sre_parse.py(131):         if isinstance(index, slice):
0.20 sre_parse.py(133):         return self.data[index]
0.20 sre_compile.py(102):             if av[0]:
0.20 sre_compile.py(40):     for op, av in pattern:
0.20 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.20 sre_compile.py(493):     return code
0.20 sre_compile.py(509):     if p.pattern.groups > 100:
0.20 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.20 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.20 sre_compile.py(517):     for k, i in groupindex.items():
0.20 sre_compile.py(520):     return _sre.compile(
0.20 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.20 sre_compile.py(522):         p.pattern.groups-1,
0.20 sre_compile.py(523):         groupindex, indexgroup
0.20 re.py(243):     if len(_cache) >= _MAXCACHE:
0.20 re.py(245):     _cache[cachekey] = p
0.20 re.py(246):     return p
0.20 textwrap.py(366): def dedent(text):
0.20 textwrap.py(414): if __name__ == "__main__":
0.20 optparse.py(79): def _repr(self):
0.20 optparse.py(89): try:
0.20 optparse.py(90):     from gettext import gettext
 --- modulename: gettext, funcname: <module>
0.20 gettext.py(11): """
0.21 gettext.py(49): import locale, copy, os, re, struct, sys
 --- modulename: locale, funcname: <module>
0.21 locale.py(12): """
0.22 locale.py(14): import sys
0.22 locale.py(15): import encodings
0.22 locale.py(16): import encodings.aliases
0.22 locale.py(17): import re
0.22 locale.py(18): import operator
0.22 locale.py(19): import functools
0.22 locale.py(27): __all__ = ["getlocale", "getdefaultlocale", "getpreferredencoding", "Error",
0.22 locale.py(28):            "setlocale", "resetlocale", "localeconv", "strcoll", "strxfrm",
0.22 locale.py(29):            "str", "atof", "atoi", "format", "format_string", "currency",
0.22 locale.py(30):            "normalize", "LC_CTYPE", "LC_COLLATE", "LC_TIME", "LC_MONETARY",
0.22 locale.py(31):            "LC_NUMERIC", "LC_ALL", "CHAR_MAX"]
0.22 locale.py(33): try:
0.22 locale.py(35):     from _locale import *
0.22 locale.py(96): _localeconv = localeconv
0.22 locale.py(100): _override_localeconv = {}
0.22 locale.py(102): @functools.wraps(_localeconv)
 --- modulename: functools, funcname: wraps
0.22 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.22 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.22 functools.py(32):     for attr in assigned:
0.22 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.22 functools.py(32):     for attr in assigned:
0.22 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.22 functools.py(32):     for attr in assigned:
0.22 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.22 functools.py(32):     for attr in assigned:
0.22 functools.py(34):     for attr in updated:
0.22 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.22 functools.py(34):     for attr in updated:
0.22 functools.py(37):     return wrapper
0.22 locale.py(116): def _grouping_intervals(grouping):
0.22 locale.py(132): def _group(s, monetary=False):
0.22 locale.py(163): def _strip_padding(s, amount):
0.22 locale.py(174): _percent_re = re.compile(r'%(?:\((?P<key>.*?)\))?'
 --- modulename: re, funcname: compile
0.22 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.22 re.py(228):     cachekey = (type(key[0]),) + key
0.22 re.py(229):     p = _cache.get(cachekey)
0.22 re.py(230):     if p is not None:
0.22 re.py(232):     pattern, flags = key
0.22 re.py(233):     if isinstance(pattern, _pattern_type):
0.22 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.22 sre_compile.py(475):     for tp in STRING_TYPES:
0.22 sre_compile.py(476):         if isinstance(obj, tp):
0.22 sre_compile.py(477):             return 1
0.22 re.py(239):     try:
0.22 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.22 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.22 sre_compile.py(475):     for tp in STRING_TYPES:
0.22 sre_compile.py(476):         if isinstance(obj, tp):
0.22 sre_compile.py(477):             return 1
0.22 sre_compile.py(499):         pattern = p
0.22 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.22 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(179):         self.string = string
0.22 sre_parse.py(180):         self.index = 0
0.22 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(668):     if pattern is None:
0.22 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(68):         self.flags = 0
0.22 sre_parse.py(69):         self.open = []
0.22 sre_parse.py(70):         self.groups = 1
0.22 sre_parse.py(71):         self.groupdict = {}
0.22 sre_parse.py(670):     pattern.flags = flags
0.22 sre_parse.py(671):     pattern.str = str
0.22 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.22 sre_parse.py(304):     items = []
0.22 sre_parse.py(305):     itemsappend = items.append
0.22 sre_parse.py(306):     sourcematch = source.match
0.22 sre_parse.py(307):     while 1:
0.22 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.22 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(91):         self.pattern = pattern
0.22 sre_parse.py(92):         if data is None:
0.22 sre_parse.py(93):             data = []
0.22 sre_parse.py(94):         self.data = data
0.22 sre_parse.py(95):         self.width = None
0.22 sre_parse.py(384):     subpatternappend = subpattern.append
0.22 sre_parse.py(385):     sourceget = source.get
0.22 sre_parse.py(386):     sourcematch = source.match
0.22 sre_parse.py(387):     _len = len
0.22 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.22 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.22 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.22 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.22 sre_parse.py(393):     while 1:
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(413):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(521):         elif this == ".":
0.22 sre_parse.py(524):         elif this == "(":
0.22 sre_parse.py(525):             group = 1
0.22 sre_parse.py(526):             name = None
0.22 sre_parse.py(527):             condgroup = None
0.22 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(529):                 group = 0
0.22 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(200):         return 0
0.22 sre_parse.py(568):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(188):             try:
0.22 sre_parse.py(189):                 c = self.string[self.index + 1]
0.22 sre_parse.py(192):             char = char + c
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(570):                     group = 2
0.22 sre_parse.py(623):             if group:
0.22 sre_parse.py(625):                 if group == 2:
0.22 sre_parse.py(627):                     group = None
0.22 sre_parse.py(630):                 if condgroup:
0.22 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.22 sre_parse.py(304):     items = []
0.22 sre_parse.py(305):     itemsappend = items.append
0.22 sre_parse.py(306):     sourcematch = source.match
0.22 sre_parse.py(307):     while 1:
0.22 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.22 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(91):         self.pattern = pattern
0.22 sre_parse.py(92):         if data is None:
0.22 sre_parse.py(93):             data = []
0.22 sre_parse.py(94):         self.data = data
0.22 sre_parse.py(95):         self.width = None
0.22 sre_parse.py(384):     subpatternappend = subpattern.append
0.22 sre_parse.py(385):     sourceget = source.get
0.22 sre_parse.py(386):     sourcematch = source.match
0.22 sre_parse.py(387):     _len = len
0.22 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.22 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.22 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.22 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.22 sre_parse.py(393):     while 1:
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(521):         elif this == ".":
0.22 sre_parse.py(524):         elif this == "(":
0.22 sre_parse.py(648):         elif this == "^":
0.22 sre_parse.py(651):         elif this == "$":
0.22 sre_parse.py(654):         elif this and this[0] == "\\":
0.22 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.22 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.22 sre_parse.py(260):     if code:
0.22 sre_parse.py(262):     code = ESCAPES.get(escape)
0.22 sre_parse.py(263):     if code:
0.22 sre_parse.py(265):     try:
0.22 sre_parse.py(266):         c = escape[1:2]
0.22 sre_parse.py(267):         if c == "x":
0.22 sre_parse.py(274):         elif c == "0":
0.22 sre_parse.py(279):         elif c in DIGITS:
0.22 sre_parse.py(295):         if len(escape) == 2:
0.22 sre_parse.py(296):             return LITERAL, ord(escape[1])
0.22 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(521):         elif this == ".":
0.22 sre_parse.py(524):         elif this == "(":
0.22 sre_parse.py(525):             group = 1
0.22 sre_parse.py(526):             name = None
0.22 sre_parse.py(527):             condgroup = None
0.22 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(529):                 group = 0
0.22 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(533):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(535):                         name = ""
0.22 sre_parse.py(536):                         while 1:
0.22 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(538):                             if char is None:
0.22 sre_parse.py(540):                             if char == ">":
0.22 sre_parse.py(542):                             name = name + char
0.22 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(538):                             if char is None:
0.22 sre_parse.py(540):                             if char == ">":
0.22 sre_parse.py(542):                             name = name + char
0.22 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(538):                             if char is None:
0.22 sre_parse.py(540):                             if char == ">":
0.22 sre_parse.py(542):                             name = name + char
0.22 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(538):                             if char is None:
0.22 sre_parse.py(540):                             if char == ">":
0.22 sre_parse.py(541):                                 break
0.22 sre_parse.py(543):                         group = 1
0.22 sre_parse.py(544):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
0.22 sre_parse.py(218):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
0.22 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.22 sre_parse.py(220):     for char in name[1:]:
0.22 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.22 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.22 sre_parse.py(220):     for char in name[1:]:
0.22 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.22 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.22 sre_parse.py(220):     for char in name[1:]:
0.22 sre_parse.py(223):     return True
0.22 sre_parse.py(623):             if group:
0.22 sre_parse.py(625):                 if group == 2:
0.22 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.22 sre_parse.py(73):         gid = self.groups
0.22 sre_parse.py(74):         self.groups = gid + 1
0.22 sre_parse.py(75):         if name is not None:
0.22 sre_parse.py(76):             ogid = self.groupdict.get(name, None)
0.22 sre_parse.py(77):             if ogid is not None:
0.22 sre_parse.py(80):             self.groupdict[name] = gid
0.22 sre_parse.py(81):         self.open.append(gid)
0.22 sre_parse.py(82):         return gid
0.22 sre_parse.py(630):                 if condgroup:
0.22 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.22 sre_parse.py(304):     items = []
0.22 sre_parse.py(305):     itemsappend = items.append
0.22 sre_parse.py(306):     sourcematch = source.match
0.22 sre_parse.py(307):     while 1:
0.22 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.22 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(91):         self.pattern = pattern
0.22 sre_parse.py(92):         if data is None:
0.22 sre_parse.py(93):             data = []
0.22 sre_parse.py(94):         self.data = data
0.22 sre_parse.py(95):         self.width = None
0.22 sre_parse.py(384):     subpatternappend = subpattern.append
0.22 sre_parse.py(385):     sourceget = source.get
0.22 sre_parse.py(386):     sourcematch = source.match
0.22 sre_parse.py(387):     _len = len
0.22 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.22 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.22 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.22 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.22 sre_parse.py(393):     while 1:
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(521):         elif this == ".":
0.22 sre_parse.py(522):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(474):             if this == "?":
0.22 sre_parse.py(476):             elif this == "*":
0.22 sre_parse.py(477):                 min, max = 0, MAXREPEAT
0.22 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.22 sre_parse.py(127):         return len(self.data)
0.22 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.22 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.22 sre_parse.py(131):         if isinstance(index, slice):
0.22 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.22 sre_parse.py(91):         self.pattern = pattern
0.22 sre_parse.py(92):         if data is None:
0.22 sre_parse.py(94):         self.data = data
0.22 sre_parse.py(95):         self.width = None
0.22 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.22 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.22 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.22 sre_parse.py(131):         if isinstance(index, slice):
0.22 sre_parse.py(133):         return self.data[index]
0.22 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.22 sre_parse.py(131):         if isinstance(index, slice):
0.22 sre_parse.py(133):         return self.data[index]
0.22 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(517):                 subpattern[-1] = (MIN_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.22 sre_parse.py(135):         self.data[index] = code
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(396):             break # end of subpattern
0.22 sre_parse.py(661):     return subpattern
0.22 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(200):         return 0
0.22 sre_parse.py(311):         if not nested:
0.22 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(314):             break
0.22 sre_parse.py(318):     if len(items) == 1:
0.22 sre_parse.py(319):         return items[0]
0.22 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(188):             try:
0.22 sre_parse.py(189):                 c = self.string[self.index + 1]
0.22 sre_parse.py(192):             char = char + c
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(636):                 if group is not None:
0.22 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.22 sre_parse.py(84):         self.open.remove(gid)
0.22 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(204):         return this
0.22 sre_parse.py(398):         if this is None:
0.22 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.22 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.22 sre_parse.py(415):         elif this == "[":
0.22 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.22 sre_parse.py(521):         elif this == ".":
0.22 sre_parse.py(524):         elif this == "(":
0.22 sre_parse.py(648):         elif this == "^":
0.22 sre_parse.py(651):         elif this == "$":
0.22 sre_parse.py(654):         elif this and this[0] == "\\":
0.22 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.22 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.22 sre_parse.py(260):     if code:
0.22 sre_parse.py(262):     code = ESCAPES.get(escape)
0.22 sre_parse.py(263):     if code:
0.22 sre_parse.py(265):     try:
0.22 sre_parse.py(266):         c = escape[1:2]
0.22 sre_parse.py(267):         if c == "x":
0.22 sre_parse.py(274):         elif c == "0":
0.22 sre_parse.py(279):         elif c in DIGITS:
0.22 sre_parse.py(295):         if len(escape) == 2:
0.22 sre_parse.py(296):             return LITERAL, ord(escape[1])
0.22 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(396):             break # end of subpattern
0.22 sre_parse.py(661):     return subpattern
0.22 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(200):         return 0
0.22 sre_parse.py(311):         if not nested:
0.22 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(314):             break
0.22 sre_parse.py(318):     if len(items) == 1:
0.22 sre_parse.py(319):         return items[0]
0.22 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.22 sre_parse.py(196):         if char == self.next:
0.22 sre_parse.py(197):             if skip:
0.22 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.22 sre_parse.py(199):             return 1
0.22 sre_parse.py(636):                 if group is not None:
0.22 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.22 sre_parse.py(139):         self.data.append(code)
0.22 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.22 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.22 sre_parse.py(202):         this = self.next
0.22 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.22 sre_parse.py(183):         if self.index >= len(self.string):
0.22 sre_parse.py(186):         char = self.string[self.index]
0.22 sre_parse.py(187):         if char[0] == "\\":
0.22 sre_parse.py(193):         self.index = self.index + len(char)
0.22 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(398):         if this is None:
0.23 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.23 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.23 sre_parse.py(415):         elif this == "[":
0.23 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.23 sre_parse.py(474):             if this == "?":
0.23 sre_parse.py(475):                 min, max = 0, 1
0.23 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
0.23 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.23 sre_parse.py(91):         self.pattern = pattern
0.23 sre_parse.py(92):         if data is None:
0.23 sre_parse.py(94):         self.data = data
0.23 sre_parse.py(95):         self.width = None
0.23 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(133):         return self.data[index]
0.23 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(133):         return self.data[index]
0.23 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.23 sre_parse.py(135):         self.data[index] = code
0.23 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.23 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(398):         if this is None:
0.23 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.23 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.23 sre_parse.py(415):         elif this == "[":
0.23 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.23 sre_parse.py(521):         elif this == ".":
0.23 sre_parse.py(524):         elif this == "(":
0.23 sre_parse.py(525):             group = 1
0.23 sre_parse.py(526):             name = None
0.23 sre_parse.py(527):             condgroup = None
0.23 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(529):                 group = 0
0.23 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(533):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(535):                         name = ""
0.23 sre_parse.py(536):                         while 1:
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(542):                             name = name + char
0.23 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(538):                             if char is None:
0.23 sre_parse.py(540):                             if char == ">":
0.23 sre_parse.py(541):                                 break
0.23 sre_parse.py(543):                         group = 1
0.23 sre_parse.py(544):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
0.23 sre_parse.py(218):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.23 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.23 sre_parse.py(220):     for char in name[1:]:
0.23 sre_parse.py(223):     return True
0.23 sre_parse.py(623):             if group:
0.23 sre_parse.py(625):                 if group == 2:
0.23 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.23 sre_parse.py(73):         gid = self.groups
0.23 sre_parse.py(74):         self.groups = gid + 1
0.23 sre_parse.py(75):         if name is not None:
0.23 sre_parse.py(76):             ogid = self.groupdict.get(name, None)
0.23 sre_parse.py(77):             if ogid is not None:
0.23 sre_parse.py(80):             self.groupdict[name] = gid
0.23 sre_parse.py(81):         self.open.append(gid)
0.23 sre_parse.py(82):         return gid
0.23 sre_parse.py(630):                 if condgroup:
0.23 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.23 sre_parse.py(304):     items = []
0.23 sre_parse.py(305):     itemsappend = items.append
0.23 sre_parse.py(306):     sourcematch = source.match
0.23 sre_parse.py(307):     while 1:
0.23 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.23 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.23 sre_parse.py(91):         self.pattern = pattern
0.23 sre_parse.py(92):         if data is None:
0.23 sre_parse.py(93):             data = []
0.23 sre_parse.py(94):         self.data = data
0.23 sre_parse.py(95):         self.width = None
0.23 sre_parse.py(384):     subpatternappend = subpattern.append
0.23 sre_parse.py(385):     sourceget = source.get
0.23 sre_parse.py(386):     sourcematch = source.match
0.23 sre_parse.py(387):     _len = len
0.23 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.23 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.23 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.23 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.23 sre_parse.py(393):     while 1:
0.23 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.23 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(398):         if this is None:
0.23 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.23 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.23 sre_parse.py(415):         elif this == "[":
0.23 sre_parse.py(417):             set = []
0.23 sre_parse.py(418):             setappend = set.append
0.23 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(424):             start = set[:]
0.23 sre_parse.py(425):             while 1:
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(438):                     if this == "]":
0.23 sre_parse.py(444):                     elif this:
0.23 sre_parse.py(445):                         if this[0] == "\\":
0.23 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.23 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.23 sre_parse.py(451):                         lo = code1[1]
0.23 sre_parse.py(452):                         hi = code2[1]
0.23 sre_parse.py(453):                         if hi < lo:
0.23 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(428):                     break
0.23 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.23 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.23 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.23 sre_parse.py(139):         self.data.append(code)
0.23 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.23 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(398):         if this is None:
0.23 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.23 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.23 sre_parse.py(415):         elif this == "[":
0.23 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.23 sre_parse.py(474):             if this == "?":
0.23 sre_parse.py(476):             elif this == "*":
0.23 sre_parse.py(477):                 min, max = 0, MAXREPEAT
0.23 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
0.23 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.23 sre_parse.py(91):         self.pattern = pattern
0.23 sre_parse.py(92):         if data is None:
0.23 sre_parse.py(94):         self.data = data
0.23 sre_parse.py(95):         self.width = None
0.23 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.23 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(133):         return self.data[index]
0.23 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.23 sre_parse.py(131):         if isinstance(index, slice):
0.23 sre_parse.py(133):         return self.data[index]
0.23 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(517):                 subpattern[-1] = (MIN_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.23 sre_parse.py(135):         self.data[index] = code
0.23 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.23 sre_parse.py(396):             break # end of subpattern
0.23 sre_parse.py(661):     return subpattern
0.23 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(311):         if not nested:
0.23 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(314):             break
0.23 sre_parse.py(318):     if len(items) == 1:
0.23 sre_parse.py(319):         return items[0]
0.23 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(197):             if skip:
0.23 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(199):             return 1
0.23 sre_parse.py(636):                 if group is not None:
0.23 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.23 sre_parse.py(84):         self.open.remove(gid)
0.23 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.23 sre_parse.py(139):         self.data.append(code)
0.23 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.23 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(398):         if this is None:
0.23 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.23 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.23 sre_parse.py(415):         elif this == "[":
0.23 sre_parse.py(417):             set = []
0.23 sre_parse.py(418):             setappend = set.append
0.23 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(424):             start = set[:]
0.23 sre_parse.py(425):             while 1:
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.23 sre_parse.py(461):                     setappend(code1)
0.23 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.23 sre_parse.py(202):         this = self.next
0.23 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.23 sre_parse.py(183):         if self.index >= len(self.string):
0.23 sre_parse.py(186):         char = self.string[self.index]
0.23 sre_parse.py(187):         if char[0] == "\\":
0.23 sre_parse.py(193):         self.index = self.index + len(char)
0.23 sre_parse.py(194):         self.next = char
0.23 sre_parse.py(204):         return this
0.23 sre_parse.py(427):                 if this == "]" and set != start:
0.23 sre_parse.py(429):                 elif this and this[0] == "\\":
0.23 sre_parse.py(431):                 elif this:
0.23 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.23 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.23 sre_parse.py(196):         if char == self.next:
0.23 sre_parse.py(200):         return 0
0.23 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(186):         char = self.string[self.index]
0.24 sre_parse.py(187):         if char[0] == "\\":
0.24 sre_parse.py(193):         self.index = self.index + len(char)
0.24 sre_parse.py(194):         self.next = char
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(429):                 elif this and this[0] == "\\":
0.24 sre_parse.py(431):                 elif this:
0.24 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.24 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(459):                     if code1[0] is IN:
0.24 sre_parse.py(461):                     setappend(code1)
0.24 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(184):             self.next = None
0.24 sre_parse.py(185):             return
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(427):                 if this == "]" and set != start:
0.24 sre_parse.py(428):                     break
0.24 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.24 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.24 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.24 sre_parse.py(139):         self.data.append(code)
0.24 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.24 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(184):             self.next = None
0.24 sre_parse.py(185):             return
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(398):         if this is None:
0.24 sre_parse.py(399):             break # end of pattern
0.24 sre_parse.py(661):     return subpattern
0.24 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.24 sre_parse.py(196):         if char == self.next:
0.24 sre_parse.py(200):         return 0
0.24 sre_parse.py(311):         if not nested:
0.24 sre_parse.py(312):             break
0.24 sre_parse.py(318):     if len(items) == 1:
0.24 sre_parse.py(319):         return items[0]
0.24 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.24 sre_parse.py(202):         this = self.next
0.24 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.24 sre_parse.py(183):         if self.index >= len(self.string):
0.24 sre_parse.py(184):             self.next = None
0.24 sre_parse.py(185):             return
0.24 sre_parse.py(204):         return this
0.24 sre_parse.py(676):     if tail == ")":
0.24 sre_parse.py(678):     elif tail:
0.24 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.24 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.24 sre_parse.py(689):     return p
0.24 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.24 sre_compile.py(482):     flags = p.pattern.flags | flags
0.24 sre_compile.py(483):     code = []
0.24 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.24 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.24 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(163):                 lo = lo + i
0.24 sre_parse.py(164):                 hi = hi + j
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(163):                 lo = lo + i
0.24 sre_parse.py(164):                 hi = hi + j
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.24 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(144):         lo = hi = 0L
0.24 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.24 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.24 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_parse.py(163):                 lo = lo + i
0.24 sre_parse.py(164):                 hi = hi + j
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(148):             if op is BRANCH:
0.24 sre_parse.py(157):             elif op is CALL:
0.24 sre_parse.py(161):             elif op is SUBPATTERN:
0.24 sre_parse.py(165):             elif op in REPEATCODES:
0.24 sre_parse.py(169):             elif op in UNITCODES:
0.24 sre_parse.py(170):                 lo = lo + 1
0.24 sre_parse.py(171):                 hi = hi + 1
0.24 sre_parse.py(147):         for op, av in self.data:
0.24 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.24 sre_parse.py(175):         return self.width
0.24 sre_compile.py(366):     if lo == 0:
0.24 sre_compile.py(369):     prefix = []
0.24 sre_compile.py(370):     prefixappend = prefix.append
0.24 sre_compile.py(371):     prefix_skip = 0
0.24 sre_compile.py(372):     charset = [] # not used
0.24 sre_compile.py(373):     charsetappend = charset.append
0.24 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.24 sre_compile.py(376):         for op, av in pattern.data:
0.24 sre_compile.py(377):             if op is LITERAL:
0.24 sre_compile.py(378):                 if len(prefix) == prefix_skip:
0.24 sre_compile.py(379):                     prefix_skip = prefix_skip + 1
0.24 sre_compile.py(380):                 prefixappend(av)
0.24 sre_compile.py(376):         for op, av in pattern.data:
0.24 sre_compile.py(377):             if op is LITERAL:
0.24 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.24 sre_compile.py(388):                 break
0.24 sre_compile.py(390):         if not prefix and pattern.data:
0.24 sre_compile.py(429):     emit = code.append
0.24 sre_compile.py(430):     emit(OPCODES[INFO])
0.24 sre_compile.py(431):     skip = len(code); emit(0)
0.24 sre_compile.py(433):     mask = 0
0.24 sre_compile.py(434):     if prefix:
0.24 sre_compile.py(435):         mask = SRE_INFO_PREFIX
0.24 sre_compile.py(436):         if len(prefix) == prefix_skip == len(pattern.data):
0.24 sre_compile.py(440):     emit(mask)
0.24 sre_compile.py(442):     if lo < MAXCODE:
0.24 sre_compile.py(443):         emit(lo)
0.24 sre_compile.py(447):     if hi < MAXCODE:
0.24 sre_compile.py(448):         emit(hi)
0.24 sre_compile.py(452):     if prefix:
0.24 sre_compile.py(453):         emit(len(prefix)) # length
0.24 sre_compile.py(454):         emit(prefix_skip) # skip
0.24 sre_compile.py(455):         code.extend(prefix)
0.24 sre_compile.py(457):         table = [-1] + ([0]*len(prefix))
0.24 sre_compile.py(458):         for i in xrange(len(prefix)):
0.24 sre_compile.py(459):             table[i+1] = table[i]+1
0.24 sre_compile.py(460):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
0.24 sre_compile.py(458):         for i in xrange(len(prefix)):
0.24 sre_compile.py(462):         code.extend(table[1:]) # don't store first entry
0.24 sre_compile.py(465):     code[skip] = len(code) - skip
0.24 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.24 sre_compile.py(46):                 emit(OPCODES[op])
0.24 sre_compile.py(47):                 emit(av)
0.24 sre_compile.py(40):     for op, av in pattern:
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.24 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.24 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(143):             return self.width
0.24 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.24 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
0.24 sre_compile.py(86):                 emit(OPCODES[REPEAT])
0.24 sre_compile.py(87):                 skip = _len(code); emit(0)
0.24 sre_compile.py(88):                 emit(av[0])
0.24 sre_compile.py(89):                 emit(av[1])
0.24 sre_compile.py(90):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(96):         elif op is SUBPATTERN:
0.24 sre_compile.py(97):             if av[0]:
0.24 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.24 sre_compile.py(46):                 emit(OPCODES[op])
0.24 sre_compile.py(47):                 emit(av)
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(96):         elif op is SUBPATTERN:
0.24 sre_compile.py(97):             if av[0]:
0.24 sre_compile.py(98):                 emit(OPCODES[MARK])
0.24 sre_compile.py(99):                 emit((av[0]-1)*2)
0.24 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.24 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.24 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(143):             return self.width
0.24 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.24 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(75):                 if op is MAX_REPEAT:
0.24 sre_compile.py(78):                     emit(OPCODES[MIN_REPEAT_ONE])
0.24 sre_compile.py(79):                 skip = _len(code); emit(0)
0.24 sre_compile.py(80):                 emit(av[0])
0.24 sre_compile.py(81):                 emit(av[1])
0.24 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(60):             if flags & SRE_FLAG_DOTALL:
0.24 sre_compile.py(63):                 emit(OPCODES[ANY])
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.24 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(102):             if av[0]:
0.24 sre_compile.py(103):                 emit(OPCODES[MARK])
0.24 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.24 sre_compile.py(46):                 emit(OPCODES[op])
0.24 sre_compile.py(47):                 emit(av)
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(102):             if av[0]:
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(91):                 code[skip] = _len(code) - skip
0.24 sre_compile.py(92):                 if op is MAX_REPEAT:
0.24 sre_compile.py(93):                     emit(OPCODES[MAX_UNTIL])
0.24 sre_compile.py(40):     for op, av in pattern:
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(96):         elif op is SUBPATTERN:
0.24 sre_compile.py(97):             if av[0]:
0.24 sre_compile.py(98):                 emit(OPCODES[MARK])
0.24 sre_compile.py(99):                 emit((av[0]-1)*2)
0.24 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(59):         elif op is ANY:
0.24 sre_compile.py(64):         elif op in REPEATING_CODES:
0.24 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.24 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.24 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.24 sre_parse.py(142):         if self.width:
0.24 sre_parse.py(143):             return self.width
0.24 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.24 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(75):                 if op is MAX_REPEAT:
0.24 sre_compile.py(78):                     emit(OPCODES[MIN_REPEAT_ONE])
0.24 sre_compile.py(79):                 skip = _len(code); emit(0)
0.24 sre_compile.py(80):                 emit(av[0])
0.24 sre_compile.py(81):                 emit(av[1])
0.24 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.24 sre_compile.py(34):     emit = code.append
0.24 sre_compile.py(35):     _len = len
0.24 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.24 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.24 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.24 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.24 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.24 sre_parse.py(131):         if isinstance(index, slice):
0.24 sre_parse.py(133):         return self.data[index]
0.24 sre_compile.py(41):         if op in LITERAL_CODES:
0.24 sre_compile.py(48):         elif op is IN:
0.24 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.24 sre_compile.py(54):                 emit(OPCODES[op])
0.24 sre_compile.py(55):                 fixup = _identityfunction
0.24 sre_compile.py(56):             skip = _len(code); emit(0)
0.24 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.24 sre_compile.py(180):     emit = code.append
0.24 sre_compile.py(181):     if fixup is None:
0.24 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.24 sre_compile.py(209):     out = []
0.24 sre_compile.py(210):     outappend = out.append
0.24 sre_compile.py(211):     charmap = [0]*256
0.24 sre_compile.py(212):     try:
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(218):             elif op is RANGE:
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(220):                     charmap[i] = 1
0.24 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(214):             if op is NEGATE:
0.24 sre_compile.py(216):             elif op is LITERAL:
0.24 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.24 sre_compile.py(25):     return x
0.24 sre_compile.py(213):         for op, av in charset:
0.24 sre_compile.py(228):     i = p = n = 0
0.24 sre_compile.py(229):     runs = []
0.24 sre_compile.py(230):     runsappend = runs.append
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(234):                 p = i
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(237):             runsappend((p, n))
0.24 sre_compile.py(238):             n = 0
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(234):                 p = i
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(237):             runsappend((p, n))
0.24 sre_compile.py(238):             n = 0
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(234):                 p = i
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.24 sre_compile.py(237):             runsappend((p, n))
0.24 sre_compile.py(238):             n = 0
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(234):                 p = i
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(233):             if n == 0:
0.24 sre_compile.py(235):             n = n + 1
0.24 sre_compile.py(239):         i = i + 1
0.24 sre_compile.py(231):     for c in charmap:
0.24 sre_compile.py(232):         if c:
0.24 sre_compile.py(236):         elif n:
0.25 sre_compile.py(237):             runsappend((p, n))
0.25 sre_compile.py(238):             n = 0
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(234):                 p = i
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(237):             runsappend((p, n))
0.25 sre_compile.py(238):             n = 0
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(234):                 p = i
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(237):             runsappend((p, n))
0.25 sre_compile.py(238):             n = 0
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(234):                 p = i
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(237):             runsappend((p, n))
0.25 sre_compile.py(238):             n = 0
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(233):             if n == 0:
0.25 sre_compile.py(234):                 p = i
0.25 sre_compile.py(235):             n = n + 1
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(237):             runsappend((p, n))
0.25 sre_compile.py(238):             n = 0
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(232):         if c:
0.25 sre_compile.py(236):         elif n:
0.25 sre_compile.py(239):         i = i + 1
0.25 sre_compile.py(231):     for c in charmap:
0.25 sre_compile.py(240):     if n:
0.25 sre_compile.py(242):     if len(runs) <= 2:
0.25 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.25 sre_compile.py(259):     data = []
0.25 sre_compile.py(260):     dataappend = data.append
0.25 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.25 sre_compile.py(264):         start = (1L, 0L)
0.25 sre_compile.py(265):     m, v = start
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.25 sre_compile.py(267):         if c:
0.25 sre_compile.py(269):         m = m + m
0.25 sre_compile.py(270):         if m > MAXCODE:
0.25 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(268):             v = v + m
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(267):         if c:
0.26 sre_compile.py(269):         m = m + m
0.26 sre_compile.py(270):         if m > MAXCODE:
0.26 sre_compile.py(271):             dataappend(v)
0.26 sre_compile.py(272):             m, v = start
0.26 sre_compile.py(266):     for c in bits:
0.26 sre_compile.py(273):     return data
0.26 sre_compile.py(254):         outappend((CHARSET, data))
0.26 sre_compile.py(255):         return out
0.26 sre_compile.py(184):         emit(OPCODES[op])
0.26 sre_compile.py(185):         if op is NEGATE:
0.26 sre_compile.py(187):         elif op is LITERAL:
0.26 sre_compile.py(189):         elif op is RANGE:
0.26 sre_compile.py(192):         elif op is CHARSET:
0.26 sre_compile.py(193):             code.extend(av)
0.26 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.26 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.26 sre_compile.py(58):             code[skip] = _len(code) - skip
0.26 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.26 sre_parse.py(131):         if isinstance(index, slice):
0.26 sre_parse.py(133):         return self.data[index]
0.26 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.26 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.26 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.26 sre_parse.py(131):         if isinstance(index, slice):
0.26 sre_parse.py(133):         return self.data[index]
0.26 sre_compile.py(102):             if av[0]:
0.26 sre_compile.py(103):                 emit(OPCODES[MARK])
0.26 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.26 sre_compile.py(40):     for op, av in pattern:
0.26 sre_compile.py(41):         if op in LITERAL_CODES:
0.26 sre_compile.py(48):         elif op is IN:
0.26 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.26 sre_compile.py(54):                 emit(OPCODES[op])
0.26 sre_compile.py(55):                 fixup = _identityfunction
0.26 sre_compile.py(56):             skip = _len(code); emit(0)
0.26 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.26 sre_compile.py(180):     emit = code.append
0.26 sre_compile.py(181):     if fixup is None:
0.26 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.26 sre_compile.py(209):     out = []
0.26 sre_compile.py(210):     outappend = out.append
0.26 sre_compile.py(211):     charmap = [0]*256
0.26 sre_compile.py(212):     try:
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.26 sre_compile.py(214):             if op is NEGATE:
0.26 sre_compile.py(216):             elif op is LITERAL:
0.26 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.26 sre_compile.py(25):     return x
0.26 sre_compile.py(213):         for op, av in charset:
0.27 sre_compile.py(214):             if op is NEGATE:
0.27 sre_compile.py(216):             elif op is LITERAL:
0.27 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.27 sre_compile.py(25):     return x
0.27 sre_compile.py(213):         for op, av in charset:
0.27 sre_compile.py(214):             if op is NEGATE:
0.27 sre_compile.py(216):             elif op is LITERAL:
0.27 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.27 sre_compile.py(25):     return x
0.27 sre_compile.py(213):         for op, av in charset:
0.27 sre_compile.py(228):     i = p = n = 0
0.27 sre_compile.py(229):     runs = []
0.27 sre_compile.py(230):     runsappend = runs.append
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(233):             if n == 0:
0.27 sre_compile.py(234):                 p = i
0.27 sre_compile.py(235):             n = n + 1
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(237):             runsappend((p, n))
0.27 sre_compile.py(238):             n = 0
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.27 sre_compile.py(239):         i = i + 1
0.27 sre_compile.py(231):     for c in charmap:
0.27 sre_compile.py(232):         if c:
0.27 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(232):         if c:
0.28 sre_compile.py(236):         elif n:
0.28 sre_compile.py(239):         i = i + 1
0.28 sre_compile.py(231):     for c in charmap:
0.28 sre_compile.py(240):     if n:
0.28 sre_compile.py(242):     if len(runs) <= 2:
0.28 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.28 sre_compile.py(259):     data = []
0.28 sre_compile.py(260):     dataappend = data.append
0.28 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.28 sre_compile.py(264):         start = (1L, 0L)
0.28 sre_compile.py(265):     m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(268):             v = v + m
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(271):             dataappend(v)
0.28 sre_compile.py(272):             m, v = start
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.28 sre_compile.py(266):     for c in bits:
0.28 sre_compile.py(267):         if c:
0.28 sre_compile.py(269):         m = m + m
0.28 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(267):         if c:
0.29 sre_compile.py(269):         m = m + m
0.29 sre_compile.py(270):         if m > MAXCODE:
0.29 sre_compile.py(271):             dataappend(v)
0.29 sre_compile.py(272):             m, v = start
0.29 sre_compile.py(266):     for c in bits:
0.29 sre_compile.py(273):     return data
0.29 sre_compile.py(254):         outappend((CHARSET, data))
0.29 sre_compile.py(255):         return out
0.29 sre_compile.py(184):         emit(OPCODES[op])
0.29 sre_compile.py(185):         if op is NEGATE:
0.29 sre_compile.py(187):         elif op is LITERAL:
0.29 sre_compile.py(189):         elif op is RANGE:
0.29 sre_compile.py(192):         elif op is CHARSET:
0.29 sre_compile.py(193):             code.extend(av)
0.29 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.29 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.29 sre_compile.py(58):             code[skip] = _len(code) - skip
0.29 sre_compile.py(40):     for op, av in pattern:
0.29 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.29 sre_compile.py(493):     return code
0.29 sre_compile.py(509):     if p.pattern.groups > 100:
0.29 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.29 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.29 sre_compile.py(517):     for k, i in groupindex.items():
0.29 sre_compile.py(518):         indexgroup[i] = k
0.29 sre_compile.py(517):     for k, i in groupindex.items():
0.29 sre_compile.py(518):         indexgroup[i] = k
0.29 sre_compile.py(517):     for k, i in groupindex.items():
0.29 sre_compile.py(520):     return _sre.compile(
0.29 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.29 sre_compile.py(522):         p.pattern.groups-1,
0.29 sre_compile.py(523):         groupindex, indexgroup
0.29 re.py(243):     if len(_cache) >= _MAXCACHE:
0.29 re.py(245):     _cache[cachekey] = p
0.29 re.py(246):     return p
0.29 locale.py(177): def format(percent, value, grouping=False, monetary=False, *additional):
0.29 locale.py(190): def _format(percent, value, grouping=False, monetary=False, *additional):
0.29 locale.py(214): def format_string(f, val, grouping=False):
0.29 locale.py(248): def currency(val, symbol=True, grouping=False, international=False):
0.29 locale.py(293): def str(val):
0.29 locale.py(297): def atof(string, func=float):
0.29 locale.py(310): def atoi(str):
0.29 locale.py(314): def _test():
0.29 locale.py(330): _setlocale = setlocale
0.29 locale.py(334): _ascii_lower_map = ''.join(
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
0.29 locale.py(336):     for x in range(256)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
0.29 locale.py(335):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
0.29 locale.py(339): def normalize(localename):
0.29 locale.py(407): def _parse_localename(localename):
0.29 locale.py(437): def _build_localename(localetuple):
0.29 locale.py(453): def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
0.29 locale.py(506): def getlocale(category=LC_CTYPE):
0.29 locale.py(524): def setlocale(category, locale=None):
0.29 locale.py(541): def resetlocale(category=LC_ALL):
0.29 locale.py(551): if sys.platform.startswith("win"):
0.29 locale.py(559):     try:
0.29 locale.py(560):         CODESET
0.29 locale.py(568):         def getpreferredencoding(do_setlocale = True):
0.29 locale.py(599): locale_encoding_alias = {
0.29 locale.py(602):     '437':                          'C',
0.29 locale.py(603):     'c':                            'C',
0.29 locale.py(604):     'en':                           'ISO8859-1',
0.29 locale.py(605):     'jis':                          'JIS7',
0.29 locale.py(606):     'jis7':                         'JIS7',
0.29 locale.py(607):     'ajec':                         'eucJP',
0.29 locale.py(610):     'ascii':                        'ISO8859-1',
0.29 locale.py(611):     'latin_1':                      'ISO8859-1',
0.29 locale.py(612):     'iso8859_1':                    'ISO8859-1',
0.29 locale.py(613):     'iso8859_10':                   'ISO8859-10',
0.29 locale.py(614):     'iso8859_11':                   'ISO8859-11',
0.29 locale.py(615):     'iso8859_13':                   'ISO8859-13',
0.29 locale.py(616):     'iso8859_14':                   'ISO8859-14',
0.29 locale.py(617):     'iso8859_15':                   'ISO8859-15',
0.29 locale.py(618):     'iso8859_16':                   'ISO8859-16',
0.29 locale.py(619):     'iso8859_2':                    'ISO8859-2',
0.29 locale.py(620):     'iso8859_3':                    'ISO8859-3',
0.29 locale.py(621):     'iso8859_4':                    'ISO8859-4',
0.29 locale.py(622):     'iso8859_5':                    'ISO8859-5',
0.29 locale.py(623):     'iso8859_6':                    'ISO8859-6',
0.29 locale.py(624):     'iso8859_7':                    'ISO8859-7',
0.29 locale.py(625):     'iso8859_8':                    'ISO8859-8',
0.29 locale.py(626):     'iso8859_9':                    'ISO8859-9',
0.29 locale.py(627):     'iso2022_jp':                   'JIS7',
0.29 locale.py(628):     'shift_jis':                    'SJIS',
0.29 locale.py(629):     'tactis':                       'TACTIS',
0.29 locale.py(630):     'euc_jp':                       'eucJP',
0.29 locale.py(631):     'euc_kr':                       'eucKR',
0.29 locale.py(632):     'utf_8':                        'UTF-8',
0.29 locale.py(633):     'koi8_r':                       'KOI8-R',
0.29 locale.py(634):     'koi8_u':                       'KOI8-U',
0.29 locale.py(730): locale_alias = {
0.29 locale.py(731):     'a3':                                   'a3_AZ.KOI8-C',
0.29 locale.py(732):     'a3_az':                                'a3_AZ.KOI8-C',
0.29 locale.py(733):     'a3_az.koi8c':                          'a3_AZ.KOI8-C',
0.29 locale.py(734):     'af':                                   'af_ZA.ISO8859-1',
0.29 locale.py(735):     'af_za':                                'af_ZA.ISO8859-1',
0.29 locale.py(736):     'af_za.iso88591':                       'af_ZA.ISO8859-1',
0.29 locale.py(737):     'am':                                   'am_ET.UTF-8',
0.29 locale.py(738):     'am_et':                                'am_ET.UTF-8',
0.29 locale.py(739):     'american':                             'en_US.ISO8859-1',
0.29 locale.py(740):     'american.iso88591':                    'en_US.ISO8859-1',
0.29 locale.py(741):     'ar':                                   'ar_AA.ISO8859-6',
0.29 locale.py(742):     'ar_aa':                                'ar_AA.ISO8859-6',
0.29 locale.py(743):     'ar_aa.iso88596':                       'ar_AA.ISO8859-6',
0.29 locale.py(744):     'ar_ae':                                'ar_AE.ISO8859-6',
0.29 locale.py(745):     'ar_ae.iso88596':                       'ar_AE.ISO8859-6',
0.29 locale.py(746):     'ar_bh':                                'ar_BH.ISO8859-6',
0.29 locale.py(747):     'ar_bh.iso88596':                       'ar_BH.ISO8859-6',
0.29 locale.py(748):     'ar_dz':                                'ar_DZ.ISO8859-6',
0.29 locale.py(749):     'ar_dz.iso88596':                       'ar_DZ.ISO8859-6',
0.29 locale.py(750):     'ar_eg':                                'ar_EG.ISO8859-6',
0.29 locale.py(751):     'ar_eg.iso88596':                       'ar_EG.ISO8859-6',
0.29 locale.py(752):     'ar_iq':                                'ar_IQ.ISO8859-6',
0.29 locale.py(753):     'ar_iq.iso88596':                       'ar_IQ.ISO8859-6',
0.29 locale.py(754):     'ar_jo':                                'ar_JO.ISO8859-6',
0.29 locale.py(755):     'ar_jo.iso88596':                       'ar_JO.ISO8859-6',
0.29 locale.py(756):     'ar_kw':                                'ar_KW.ISO8859-6',
0.29 locale.py(757):     'ar_kw.iso88596':                       'ar_KW.ISO8859-6',
0.29 locale.py(758):     'ar_lb':                                'ar_LB.ISO8859-6',
0.29 locale.py(759):     'ar_lb.iso88596':                       'ar_LB.ISO8859-6',
0.29 locale.py(760):     'ar_ly':                                'ar_LY.ISO8859-6',
0.29 locale.py(761):     'ar_ly.iso88596':                       'ar_LY.ISO8859-6',
0.29 locale.py(762):     'ar_ma':                                'ar_MA.ISO8859-6',
0.29 locale.py(763):     'ar_ma.iso88596':                       'ar_MA.ISO8859-6',
0.29 locale.py(764):     'ar_om':                                'ar_OM.ISO8859-6',
0.29 locale.py(765):     'ar_om.iso88596':                       'ar_OM.ISO8859-6',
0.29 locale.py(766):     'ar_qa':                                'ar_QA.ISO8859-6',
0.29 locale.py(767):     'ar_qa.iso88596':                       'ar_QA.ISO8859-6',
0.29 locale.py(768):     'ar_sa':                                'ar_SA.ISO8859-6',
0.29 locale.py(769):     'ar_sa.iso88596':                       'ar_SA.ISO8859-6',
0.29 locale.py(770):     'ar_sd':                                'ar_SD.ISO8859-6',
0.29 locale.py(771):     'ar_sd.iso88596':                       'ar_SD.ISO8859-6',
0.29 locale.py(772):     'ar_sy':                                'ar_SY.ISO8859-6',
0.29 locale.py(773):     'ar_sy.iso88596':                       'ar_SY.ISO8859-6',
0.29 locale.py(774):     'ar_tn':                                'ar_TN.ISO8859-6',
0.29 locale.py(775):     'ar_tn.iso88596':                       'ar_TN.ISO8859-6',
0.29 locale.py(776):     'ar_ye':                                'ar_YE.ISO8859-6',
0.29 locale.py(777):     'ar_ye.iso88596':                       'ar_YE.ISO8859-6',
0.29 locale.py(778):     'arabic':                               'ar_AA.ISO8859-6',
0.29 locale.py(779):     'arabic.iso88596':                      'ar_AA.ISO8859-6',
0.29 locale.py(780):     'as':                                   'as_IN.UTF-8',
0.29 locale.py(781):     'az':                                   'az_AZ.ISO8859-9E',
0.29 locale.py(782):     'az_az':                                'az_AZ.ISO8859-9E',
0.29 locale.py(783):     'az_az.iso88599e':                      'az_AZ.ISO8859-9E',
0.29 locale.py(784):     'be':                                   'be_BY.CP1251',
0.29 locale.py(785):     'be@latin':                             'be_BY.UTF-8@latin',
0.29 locale.py(786):     'be_by':                                'be_BY.CP1251',
0.29 locale.py(787):     'be_by.cp1251':                         'be_BY.CP1251',
0.29 locale.py(788):     'be_by.microsoftcp1251':                'be_BY.CP1251',
0.29 locale.py(789):     'be_by.utf8@latin':                     'be_BY.UTF-8@latin',
0.29 locale.py(790):     'be_by@latin':                          'be_BY.UTF-8@latin',
0.29 locale.py(791):     'bg':                                   'bg_BG.CP1251',
0.29 locale.py(792):     'bg_bg':                                'bg_BG.CP1251',
0.29 locale.py(793):     'bg_bg.cp1251':                         'bg_BG.CP1251',
0.29 locale.py(794):     'bg_bg.iso88595':                       'bg_BG.ISO8859-5',
0.29 locale.py(795):     'bg_bg.koi8r':                          'bg_BG.KOI8-R',
0.29 locale.py(796):     'bg_bg.microsoftcp1251':                'bg_BG.CP1251',
0.29 locale.py(797):     'bn_in':                                'bn_IN.UTF-8',
0.29 locale.py(798):     'bokmal':                               'nb_NO.ISO8859-1',
0.29 locale.py(799):     'bokm\xe5l':                            'nb_NO.ISO8859-1',
0.29 locale.py(800):     'br':                                   'br_FR.ISO8859-1',
0.29 locale.py(801):     'br_fr':                                'br_FR.ISO8859-1',
0.29 locale.py(802):     'br_fr.iso88591':                       'br_FR.ISO8859-1',
0.29 locale.py(803):     'br_fr.iso885914':                      'br_FR.ISO8859-14',
0.29 locale.py(804):     'br_fr.iso885915':                      'br_FR.ISO8859-15',
0.29 locale.py(805):     'br_fr.iso885915@euro':                 'br_FR.ISO8859-15',
0.29 locale.py(806):     'br_fr.utf8@euro':                      'br_FR.UTF-8',
0.29 locale.py(807):     'br_fr@euro':                           'br_FR.ISO8859-15',
0.29 locale.py(808):     'bs':                                   'bs_BA.ISO8859-2',
0.29 locale.py(809):     'bs_ba':                                'bs_BA.ISO8859-2',
0.29 locale.py(810):     'bs_ba.iso88592':                       'bs_BA.ISO8859-2',
0.29 locale.py(811):     'bulgarian':                            'bg_BG.CP1251',
0.29 locale.py(812):     'c':                                    'C',
0.29 locale.py(813):     'c-french':                             'fr_CA.ISO8859-1',
0.29 locale.py(814):     'c-french.iso88591':                    'fr_CA.ISO8859-1',
0.29 locale.py(815):     'c.en':                                 'C',
0.29 locale.py(816):     'c.iso88591':                           'en_US.ISO8859-1',
0.29 locale.py(817):     'c_c':                                  'C',
0.29 locale.py(818):     'c_c.c':                                'C',
0.29 locale.py(819):     'ca':                                   'ca_ES.ISO8859-1',
0.29 locale.py(820):     'ca_ad':                                'ca_AD.ISO8859-1',
0.29 locale.py(821):     'ca_ad.iso88591':                       'ca_AD.ISO8859-1',
0.29 locale.py(822):     'ca_ad.iso885915':                      'ca_AD.ISO8859-15',
0.29 locale.py(823):     'ca_ad.iso885915@euro':                 'ca_AD.ISO8859-15',
0.29 locale.py(824):     'ca_ad.utf8@euro':                      'ca_AD.UTF-8',
0.29 locale.py(825):     'ca_ad@euro':                           'ca_AD.ISO8859-15',
0.29 locale.py(826):     'ca_es':                                'ca_ES.ISO8859-1',
0.29 locale.py(827):     'ca_es.iso88591':                       'ca_ES.ISO8859-1',
0.29 locale.py(828):     'ca_es.iso885915':                      'ca_ES.ISO8859-15',
0.29 locale.py(829):     'ca_es.iso885915@euro':                 'ca_ES.ISO8859-15',
0.29 locale.py(830):     'ca_es.utf8@euro':                      'ca_ES.UTF-8',
0.29 locale.py(831):     'ca_es@euro':                           'ca_ES.ISO8859-15',
0.29 locale.py(832):     'ca_fr':                                'ca_FR.ISO8859-1',
0.29 locale.py(833):     'ca_fr.iso88591':                       'ca_FR.ISO8859-1',
0.29 locale.py(834):     'ca_fr.iso885915':                      'ca_FR.ISO8859-15',
0.29 locale.py(835):     'ca_fr.iso885915@euro':                 'ca_FR.ISO8859-15',
0.29 locale.py(836):     'ca_fr.utf8@euro':                      'ca_FR.UTF-8',
0.29 locale.py(837):     'ca_fr@euro':                           'ca_FR.ISO8859-15',
0.29 locale.py(838):     'ca_it':                                'ca_IT.ISO8859-1',
0.29 locale.py(839):     'ca_it.iso88591':                       'ca_IT.ISO8859-1',
0.29 locale.py(840):     'ca_it.iso885915':                      'ca_IT.ISO8859-15',
0.29 locale.py(841):     'ca_it.iso885915@euro':                 'ca_IT.ISO8859-15',
0.29 locale.py(842):     'ca_it.utf8@euro':                      'ca_IT.UTF-8',
0.29 locale.py(843):     'ca_it@euro':                           'ca_IT.ISO8859-15',
0.29 locale.py(844):     'catalan':                              'ca_ES.ISO8859-1',
0.29 locale.py(845):     'cextend':                              'en_US.ISO8859-1',
0.29 locale.py(846):     'cextend.en':                           'en_US.ISO8859-1',
0.29 locale.py(847):     'chinese-s':                            'zh_CN.eucCN',
0.29 locale.py(848):     'chinese-t':                            'zh_TW.eucTW',
0.29 locale.py(849):     'croatian':                             'hr_HR.ISO8859-2',
0.29 locale.py(850):     'cs':                                   'cs_CZ.ISO8859-2',
0.29 locale.py(851):     'cs_cs':                                'cs_CZ.ISO8859-2',
0.29 locale.py(852):     'cs_cs.iso88592':                       'cs_CS.ISO8859-2',
0.29 locale.py(853):     'cs_cz':                                'cs_CZ.ISO8859-2',
0.29 locale.py(854):     'cs_cz.iso88592':                       'cs_CZ.ISO8859-2',
0.29 locale.py(855):     'cy':                                   'cy_GB.ISO8859-1',
0.29 locale.py(856):     'cy_gb':                                'cy_GB.ISO8859-1',
0.29 locale.py(857):     'cy_gb.iso88591':                       'cy_GB.ISO8859-1',
0.29 locale.py(858):     'cy_gb.iso885914':                      'cy_GB.ISO8859-14',
0.29 locale.py(859):     'cy_gb.iso885915':                      'cy_GB.ISO8859-15',
0.29 locale.py(860):     'cy_gb@euro':                           'cy_GB.ISO8859-15',
0.29 locale.py(861):     'cz':                                   'cs_CZ.ISO8859-2',
0.29 locale.py(862):     'cz_cz':                                'cs_CZ.ISO8859-2',
0.29 locale.py(863):     'czech':                                'cs_CZ.ISO8859-2',
0.29 locale.py(864):     'da':                                   'da_DK.ISO8859-1',
0.29 locale.py(865):     'da.iso885915':                         'da_DK.ISO8859-15',
0.29 locale.py(866):     'da_dk':                                'da_DK.ISO8859-1',
0.29 locale.py(867):     'da_dk.88591':                          'da_DK.ISO8859-1',
0.29 locale.py(868):     'da_dk.885915':                         'da_DK.ISO8859-15',
0.29 locale.py(869):     'da_dk.iso88591':                       'da_DK.ISO8859-1',
0.29 locale.py(870):     'da_dk.iso885915':                      'da_DK.ISO8859-15',
0.29 locale.py(871):     'da_dk@euro':                           'da_DK.ISO8859-15',
0.29 locale.py(872):     'danish':                               'da_DK.ISO8859-1',
0.29 locale.py(873):     'danish.iso88591':                      'da_DK.ISO8859-1',
0.29 locale.py(874):     'dansk':                                'da_DK.ISO8859-1',
0.29 locale.py(875):     'de':                                   'de_DE.ISO8859-1',
0.29 locale.py(876):     'de.iso885915':                         'de_DE.ISO8859-15',
0.29 locale.py(877):     'de_at':                                'de_AT.ISO8859-1',
0.29 locale.py(878):     'de_at.iso88591':                       'de_AT.ISO8859-1',
0.29 locale.py(879):     'de_at.iso885915':                      'de_AT.ISO8859-15',
0.29 locale.py(880):     'de_at.iso885915@euro':                 'de_AT.ISO8859-15',
0.29 locale.py(881):     'de_at.utf8@euro':                      'de_AT.UTF-8',
0.29 locale.py(882):     'de_at@euro':                           'de_AT.ISO8859-15',
0.29 locale.py(883):     'de_be':                                'de_BE.ISO8859-1',
0.29 locale.py(884):     'de_be.iso88591':                       'de_BE.ISO8859-1',
0.29 locale.py(885):     'de_be.iso885915':                      'de_BE.ISO8859-15',
0.29 locale.py(886):     'de_be.iso885915@euro':                 'de_BE.ISO8859-15',
0.29 locale.py(887):     'de_be.utf8@euro':                      'de_BE.UTF-8',
0.29 locale.py(888):     'de_be@euro':                           'de_BE.ISO8859-15',
0.29 locale.py(889):     'de_ch':                                'de_CH.ISO8859-1',
0.29 locale.py(890):     'de_ch.iso88591':                       'de_CH.ISO8859-1',
0.29 locale.py(891):     'de_ch.iso885915':                      'de_CH.ISO8859-15',
0.29 locale.py(892):     'de_ch@euro':                           'de_CH.ISO8859-15',
0.29 locale.py(893):     'de_de':                                'de_DE.ISO8859-1',
0.29 locale.py(894):     'de_de.88591':                          'de_DE.ISO8859-1',
0.29 locale.py(895):     'de_de.885915':                         'de_DE.ISO8859-15',
0.29 locale.py(896):     'de_de.885915@euro':                    'de_DE.ISO8859-15',
0.29 locale.py(897):     'de_de.iso88591':                       'de_DE.ISO8859-1',
0.29 locale.py(898):     'de_de.iso885915':                      'de_DE.ISO8859-15',
0.29 locale.py(899):     'de_de.iso885915@euro':                 'de_DE.ISO8859-15',
0.29 locale.py(900):     'de_de.utf8@euro':                      'de_DE.UTF-8',
0.29 locale.py(901):     'de_de@euro':                           'de_DE.ISO8859-15',
0.29 locale.py(902):     'de_lu':                                'de_LU.ISO8859-1',
0.29 locale.py(903):     'de_lu.iso88591':                       'de_LU.ISO8859-1',
0.29 locale.py(904):     'de_lu.iso885915':                      'de_LU.ISO8859-15',
0.29 locale.py(905):     'de_lu.iso885915@euro':                 'de_LU.ISO8859-15',
0.29 locale.py(906):     'de_lu.utf8@euro':                      'de_LU.UTF-8',
0.29 locale.py(907):     'de_lu@euro':                           'de_LU.ISO8859-15',
0.29 locale.py(908):     'deutsch':                              'de_DE.ISO8859-1',
0.29 locale.py(909):     'dutch':                                'nl_NL.ISO8859-1',
0.29 locale.py(910):     'dutch.iso88591':                       'nl_BE.ISO8859-1',
0.29 locale.py(911):     'ee':                                   'ee_EE.ISO8859-4',
0.29 locale.py(912):     'ee_ee':                                'ee_EE.ISO8859-4',
0.29 locale.py(913):     'ee_ee.iso88594':                       'ee_EE.ISO8859-4',
0.29 locale.py(914):     'eesti':                                'et_EE.ISO8859-1',
0.29 locale.py(915):     'el':                                   'el_GR.ISO8859-7',
0.29 locale.py(916):     'el_gr':                                'el_GR.ISO8859-7',
0.29 locale.py(917):     'el_gr.iso88597':                       'el_GR.ISO8859-7',
0.29 locale.py(918):     'el_gr@euro':                           'el_GR.ISO8859-15',
0.29 locale.py(919):     'en':                                   'en_US.ISO8859-1',
0.29 locale.py(920):     'en.iso88591':                          'en_US.ISO8859-1',
0.29 locale.py(921):     'en_au':                                'en_AU.ISO8859-1',
0.29 locale.py(922):     'en_au.iso88591':                       'en_AU.ISO8859-1',
0.29 locale.py(923):     'en_be':                                'en_BE.ISO8859-1',
0.29 locale.py(924):     'en_be@euro':                           'en_BE.ISO8859-15',
0.29 locale.py(925):     'en_bw':                                'en_BW.ISO8859-1',
0.29 locale.py(926):     'en_bw.iso88591':                       'en_BW.ISO8859-1',
0.29 locale.py(927):     'en_ca':                                'en_CA.ISO8859-1',
0.29 locale.py(928):     'en_ca.iso88591':                       'en_CA.ISO8859-1',
0.29 locale.py(929):     'en_gb':                                'en_GB.ISO8859-1',
0.29 locale.py(930):     'en_gb.88591':                          'en_GB.ISO8859-1',
0.29 locale.py(931):     'en_gb.iso88591':                       'en_GB.ISO8859-1',
0.29 locale.py(932):     'en_gb.iso885915':                      'en_GB.ISO8859-15',
0.29 locale.py(933):     'en_gb@euro':                           'en_GB.ISO8859-15',
0.29 locale.py(934):     'en_hk':                                'en_HK.ISO8859-1',
0.29 locale.py(935):     'en_hk.iso88591':                       'en_HK.ISO8859-1',
0.29 locale.py(936):     'en_ie':                                'en_IE.ISO8859-1',
0.29 locale.py(937):     'en_ie.iso88591':                       'en_IE.ISO8859-1',
0.29 locale.py(938):     'en_ie.iso885915':                      'en_IE.ISO8859-15',
0.29 locale.py(939):     'en_ie.iso885915@euro':                 'en_IE.ISO8859-15',
0.29 locale.py(940):     'en_ie.utf8@euro':                      'en_IE.UTF-8',
0.29 locale.py(941):     'en_ie@euro':                           'en_IE.ISO8859-15',
0.29 locale.py(942):     'en_in':                                'en_IN.ISO8859-1',
0.29 locale.py(943):     'en_nz':                                'en_NZ.ISO8859-1',
0.29 locale.py(944):     'en_nz.iso88591':                       'en_NZ.ISO8859-1',
0.29 locale.py(945):     'en_ph':                                'en_PH.ISO8859-1',
0.29 locale.py(946):     'en_ph.iso88591':                       'en_PH.ISO8859-1',
0.29 locale.py(947):     'en_sg':                                'en_SG.ISO8859-1',
0.29 locale.py(948):     'en_sg.iso88591':                       'en_SG.ISO8859-1',
0.29 locale.py(949):     'en_uk':                                'en_GB.ISO8859-1',
0.29 locale.py(950):     'en_us':                                'en_US.ISO8859-1',
0.29 locale.py(951):     'en_us.88591':                          'en_US.ISO8859-1',
0.29 locale.py(952):     'en_us.885915':                         'en_US.ISO8859-15',
0.29 locale.py(953):     'en_us.iso88591':                       'en_US.ISO8859-1',
0.29 locale.py(954):     'en_us.iso885915':                      'en_US.ISO8859-15',
0.29 locale.py(955):     'en_us.iso885915@euro':                 'en_US.ISO8859-15',
0.29 locale.py(956):     'en_us@euro':                           'en_US.ISO8859-15',
0.29 locale.py(957):     'en_us@euro@euro':                      'en_US.ISO8859-15',
0.29 locale.py(958):     'en_za':                                'en_ZA.ISO8859-1',
0.29 locale.py(959):     'en_za.88591':                          'en_ZA.ISO8859-1',
0.29 locale.py(960):     'en_za.iso88591':                       'en_ZA.ISO8859-1',
0.29 locale.py(961):     'en_za.iso885915':                      'en_ZA.ISO8859-15',
0.29 locale.py(962):     'en_za@euro':                           'en_ZA.ISO8859-15',
0.29 locale.py(963):     'en_zw':                                'en_ZW.ISO8859-1',
0.29 locale.py(964):     'en_zw.iso88591':                       'en_ZW.ISO8859-1',
0.29 locale.py(965):     'eng_gb':                               'en_GB.ISO8859-1',
0.29 locale.py(966):     'eng_gb.8859':                          'en_GB.ISO8859-1',
0.29 locale.py(967):     'english':                              'en_EN.ISO8859-1',
0.29 locale.py(968):     'english.iso88591':                     'en_EN.ISO8859-1',
0.29 locale.py(969):     'english_uk':                           'en_GB.ISO8859-1',
0.29 locale.py(970):     'english_uk.8859':                      'en_GB.ISO8859-1',
0.29 locale.py(971):     'english_united-states':                'en_US.ISO8859-1',
0.29 locale.py(972):     'english_united-states.437':            'C',
0.29 locale.py(973):     'english_us':                           'en_US.ISO8859-1',
0.29 locale.py(974):     'english_us.8859':                      'en_US.ISO8859-1',
0.29 locale.py(975):     'english_us.ascii':                     'en_US.ISO8859-1',
0.29 locale.py(976):     'eo':                                   'eo_XX.ISO8859-3',
0.29 locale.py(977):     'eo_eo':                                'eo_EO.ISO8859-3',
0.29 locale.py(978):     'eo_eo.iso88593':                       'eo_EO.ISO8859-3',
0.29 locale.py(979):     'eo_xx':                                'eo_XX.ISO8859-3',
0.29 locale.py(980):     'eo_xx.iso88593':                       'eo_XX.ISO8859-3',
0.29 locale.py(981):     'es':                                   'es_ES.ISO8859-1',
0.29 locale.py(982):     'es_ar':                                'es_AR.ISO8859-1',
0.29 locale.py(983):     'es_ar.iso88591':                       'es_AR.ISO8859-1',
0.29 locale.py(984):     'es_bo':                                'es_BO.ISO8859-1',
0.29 locale.py(985):     'es_bo.iso88591':                       'es_BO.ISO8859-1',
0.29 locale.py(986):     'es_cl':                                'es_CL.ISO8859-1',
0.29 locale.py(987):     'es_cl.iso88591':                       'es_CL.ISO8859-1',
0.29 locale.py(988):     'es_co':                                'es_CO.ISO8859-1',
0.29 locale.py(989):     'es_co.iso88591':                       'es_CO.ISO8859-1',
0.29 locale.py(990):     'es_cr':                                'es_CR.ISO8859-1',
0.29 locale.py(991):     'es_cr.iso88591':                       'es_CR.ISO8859-1',
0.29 locale.py(992):     'es_do':                                'es_DO.ISO8859-1',
0.29 locale.py(993):     'es_do.iso88591':                       'es_DO.ISO8859-1',
0.29 locale.py(994):     'es_ec':                                'es_EC.ISO8859-1',
0.29 locale.py(995):     'es_ec.iso88591':                       'es_EC.ISO8859-1',
0.29 locale.py(996):     'es_es':                                'es_ES.ISO8859-1',
0.29 locale.py(997):     'es_es.88591':                          'es_ES.ISO8859-1',
0.29 locale.py(998):     'es_es.iso88591':                       'es_ES.ISO8859-1',
0.29 locale.py(999):     'es_es.iso885915':                      'es_ES.ISO8859-15',
0.29 locale.py(1000):     'es_es.iso885915@euro':                 'es_ES.ISO8859-15',
0.29 locale.py(1001):     'es_es.utf8@euro':                      'es_ES.UTF-8',
0.29 locale.py(1002):     'es_es@euro':                           'es_ES.ISO8859-15',
0.29 locale.py(1003):     'es_gt':                                'es_GT.ISO8859-1',
0.29 locale.py(1004):     'es_gt.iso88591':                       'es_GT.ISO8859-1',
0.29 locale.py(1005):     'es_hn':                                'es_HN.ISO8859-1',
0.29 locale.py(1006):     'es_hn.iso88591':                       'es_HN.ISO8859-1',
0.29 locale.py(1007):     'es_mx':                                'es_MX.ISO8859-1',
0.29 locale.py(1008):     'es_mx.iso88591':                       'es_MX.ISO8859-1',
0.29 locale.py(1009):     'es_ni':                                'es_NI.ISO8859-1',
0.29 locale.py(1010):     'es_ni.iso88591':                       'es_NI.ISO8859-1',
0.29 locale.py(1011):     'es_pa':                                'es_PA.ISO8859-1',
0.29 locale.py(1012):     'es_pa.iso88591':                       'es_PA.ISO8859-1',
0.29 locale.py(1013):     'es_pa.iso885915':                      'es_PA.ISO8859-15',
0.29 locale.py(1014):     'es_pa@euro':                           'es_PA.ISO8859-15',
0.29 locale.py(1015):     'es_pe':                                'es_PE.ISO8859-1',
0.29 locale.py(1016):     'es_pe.iso88591':                       'es_PE.ISO8859-1',
0.29 locale.py(1017):     'es_pe.iso885915':                      'es_PE.ISO8859-15',
0.29 locale.py(1018):     'es_pe@euro':                           'es_PE.ISO8859-15',
0.29 locale.py(1019):     'es_pr':                                'es_PR.ISO8859-1',
0.29 locale.py(1020):     'es_pr.iso88591':                       'es_PR.ISO8859-1',
0.29 locale.py(1021):     'es_py':                                'es_PY.ISO8859-1',
0.29 locale.py(1022):     'es_py.iso88591':                       'es_PY.ISO8859-1',
0.29 locale.py(1023):     'es_py.iso885915':                      'es_PY.ISO8859-15',
0.29 locale.py(1024):     'es_py@euro':                           'es_PY.ISO8859-15',
0.29 locale.py(1025):     'es_sv':                                'es_SV.ISO8859-1',
0.29 locale.py(1026):     'es_sv.iso88591':                       'es_SV.ISO8859-1',
0.29 locale.py(1027):     'es_sv.iso885915':                      'es_SV.ISO8859-15',
0.29 locale.py(1028):     'es_sv@euro':                           'es_SV.ISO8859-15',
0.29 locale.py(1029):     'es_us':                                'es_US.ISO8859-1',
0.29 locale.py(1030):     'es_us.iso88591':                       'es_US.ISO8859-1',
0.29 locale.py(1031):     'es_uy':                                'es_UY.ISO8859-1',
0.29 locale.py(1032):     'es_uy.iso88591':                       'es_UY.ISO8859-1',
0.29 locale.py(1033):     'es_uy.iso885915':                      'es_UY.ISO8859-15',
0.29 locale.py(1034):     'es_uy@euro':                           'es_UY.ISO8859-15',
0.29 locale.py(1035):     'es_ve':                                'es_VE.ISO8859-1',
0.29 locale.py(1036):     'es_ve.iso88591':                       'es_VE.ISO8859-1',
0.29 locale.py(1037):     'es_ve.iso885915':                      'es_VE.ISO8859-15',
0.29 locale.py(1038):     'es_ve@euro':                           'es_VE.ISO8859-15',
0.29 locale.py(1039):     'estonian':                             'et_EE.ISO8859-1',
0.29 locale.py(1040):     'et':                                   'et_EE.ISO8859-15',
0.29 locale.py(1041):     'et_ee':                                'et_EE.ISO8859-15',
0.29 locale.py(1042):     'et_ee.iso88591':                       'et_EE.ISO8859-1',
0.29 locale.py(1043):     'et_ee.iso885913':                      'et_EE.ISO8859-13',
0.29 locale.py(1044):     'et_ee.iso885915':                      'et_EE.ISO8859-15',
0.29 locale.py(1045):     'et_ee.iso88594':                       'et_EE.ISO8859-4',
0.29 locale.py(1046):     'et_ee@euro':                           'et_EE.ISO8859-15',
0.29 locale.py(1047):     'eu':                                   'eu_ES.ISO8859-1',
0.29 locale.py(1048):     'eu_es':                                'eu_ES.ISO8859-1',
0.29 locale.py(1049):     'eu_es.iso88591':                       'eu_ES.ISO8859-1',
0.29 locale.py(1050):     'eu_es.iso885915':                      'eu_ES.ISO8859-15',
0.29 locale.py(1051):     'eu_es.iso885915@euro':                 'eu_ES.ISO8859-15',
0.30 locale.py(1052):     'eu_es.utf8@euro':                      'eu_ES.UTF-8',
0.30 locale.py(1053):     'eu_es@euro':                           'eu_ES.ISO8859-15',
0.30 locale.py(1054):     'fa':                                   'fa_IR.UTF-8',
0.30 locale.py(1055):     'fa_ir':                                'fa_IR.UTF-8',
0.30 locale.py(1056):     'fa_ir.isiri3342':                      'fa_IR.ISIRI-3342',
0.30 locale.py(1057):     'fi':                                   'fi_FI.ISO8859-15',
0.30 locale.py(1058):     'fi.iso885915':                         'fi_FI.ISO8859-15',
0.30 locale.py(1059):     'fi_fi':                                'fi_FI.ISO8859-15',
0.30 locale.py(1060):     'fi_fi.88591':                          'fi_FI.ISO8859-1',
0.30 locale.py(1061):     'fi_fi.iso88591':                       'fi_FI.ISO8859-1',
0.30 locale.py(1062):     'fi_fi.iso885915':                      'fi_FI.ISO8859-15',
0.30 locale.py(1063):     'fi_fi.iso885915@euro':                 'fi_FI.ISO8859-15',
0.30 locale.py(1064):     'fi_fi.utf8@euro':                      'fi_FI.UTF-8',
0.30 locale.py(1065):     'fi_fi@euro':                           'fi_FI.ISO8859-15',
0.30 locale.py(1066):     'finnish':                              'fi_FI.ISO8859-1',
0.30 locale.py(1067):     'finnish.iso88591':                     'fi_FI.ISO8859-1',
0.30 locale.py(1068):     'fo':                                   'fo_FO.ISO8859-1',
0.30 locale.py(1069):     'fo_fo':                                'fo_FO.ISO8859-1',
0.30 locale.py(1070):     'fo_fo.iso88591':                       'fo_FO.ISO8859-1',
0.30 locale.py(1071):     'fo_fo.iso885915':                      'fo_FO.ISO8859-15',
0.30 locale.py(1072):     'fo_fo@euro':                           'fo_FO.ISO8859-15',
0.30 locale.py(1073):     'fr':                                   'fr_FR.ISO8859-1',
0.30 locale.py(1074):     'fr.iso885915':                         'fr_FR.ISO8859-15',
0.30 locale.py(1075):     'fr_be':                                'fr_BE.ISO8859-1',
0.30 locale.py(1076):     'fr_be.88591':                          'fr_BE.ISO8859-1',
0.30 locale.py(1077):     'fr_be.iso88591':                       'fr_BE.ISO8859-1',
0.30 locale.py(1078):     'fr_be.iso885915':                      'fr_BE.ISO8859-15',
0.30 locale.py(1079):     'fr_be.iso885915@euro':                 'fr_BE.ISO8859-15',
0.30 locale.py(1080):     'fr_be.utf8@euro':                      'fr_BE.UTF-8',
0.30 locale.py(1081):     'fr_be@euro':                           'fr_BE.ISO8859-15',
0.30 locale.py(1082):     'fr_ca':                                'fr_CA.ISO8859-1',
0.30 locale.py(1083):     'fr_ca.88591':                          'fr_CA.ISO8859-1',
0.30 locale.py(1084):     'fr_ca.iso88591':                       'fr_CA.ISO8859-1',
0.30 locale.py(1085):     'fr_ca.iso885915':                      'fr_CA.ISO8859-15',
0.30 locale.py(1086):     'fr_ca@euro':                           'fr_CA.ISO8859-15',
0.30 locale.py(1087):     'fr_ch':                                'fr_CH.ISO8859-1',
0.30 locale.py(1088):     'fr_ch.88591':                          'fr_CH.ISO8859-1',
0.30 locale.py(1089):     'fr_ch.iso88591':                       'fr_CH.ISO8859-1',
0.30 locale.py(1090):     'fr_ch.iso885915':                      'fr_CH.ISO8859-15',
0.30 locale.py(1091):     'fr_ch@euro':                           'fr_CH.ISO8859-15',
0.30 locale.py(1092):     'fr_fr':                                'fr_FR.ISO8859-1',
0.30 locale.py(1093):     'fr_fr.88591':                          'fr_FR.ISO8859-1',
0.30 locale.py(1094):     'fr_fr.iso88591':                       'fr_FR.ISO8859-1',
0.30 locale.py(1095):     'fr_fr.iso885915':                      'fr_FR.ISO8859-15',
0.30 locale.py(1096):     'fr_fr.iso885915@euro':                 'fr_FR.ISO8859-15',
0.30 locale.py(1097):     'fr_fr.utf8@euro':                      'fr_FR.UTF-8',
0.30 locale.py(1098):     'fr_fr@euro':                           'fr_FR.ISO8859-15',
0.30 locale.py(1099):     'fr_lu':                                'fr_LU.ISO8859-1',
0.30 locale.py(1100):     'fr_lu.88591':                          'fr_LU.ISO8859-1',
0.30 locale.py(1101):     'fr_lu.iso88591':                       'fr_LU.ISO8859-1',
0.30 locale.py(1102):     'fr_lu.iso885915':                      'fr_LU.ISO8859-15',
0.30 locale.py(1103):     'fr_lu.iso885915@euro':                 'fr_LU.ISO8859-15',
0.30 locale.py(1104):     'fr_lu.utf8@euro':                      'fr_LU.UTF-8',
0.30 locale.py(1105):     'fr_lu@euro':                           'fr_LU.ISO8859-15',
0.30 locale.py(1106):     'fran\xe7ais':                          'fr_FR.ISO8859-1',
0.30 locale.py(1107):     'fre_fr':                               'fr_FR.ISO8859-1',
0.30 locale.py(1108):     'fre_fr.8859':                          'fr_FR.ISO8859-1',
0.30 locale.py(1109):     'french':                               'fr_FR.ISO8859-1',
0.30 locale.py(1110):     'french.iso88591':                      'fr_CH.ISO8859-1',
0.30 locale.py(1111):     'french_france':                        'fr_FR.ISO8859-1',
0.30 locale.py(1112):     'french_france.8859':                   'fr_FR.ISO8859-1',
0.30 locale.py(1113):     'ga':                                   'ga_IE.ISO8859-1',
0.30 locale.py(1114):     'ga_ie':                                'ga_IE.ISO8859-1',
0.30 locale.py(1115):     'ga_ie.iso88591':                       'ga_IE.ISO8859-1',
0.30 locale.py(1116):     'ga_ie.iso885914':                      'ga_IE.ISO8859-14',
0.30 locale.py(1117):     'ga_ie.iso885915':                      'ga_IE.ISO8859-15',
0.30 locale.py(1118):     'ga_ie.iso885915@euro':                 'ga_IE.ISO8859-15',
0.30 locale.py(1119):     'ga_ie.utf8@euro':                      'ga_IE.UTF-8',
0.30 locale.py(1120):     'ga_ie@euro':                           'ga_IE.ISO8859-15',
0.30 locale.py(1121):     'galego':                               'gl_ES.ISO8859-1',
0.30 locale.py(1122):     'galician':                             'gl_ES.ISO8859-1',
0.30 locale.py(1123):     'gd':                                   'gd_GB.ISO8859-1',
0.30 locale.py(1124):     'gd_gb':                                'gd_GB.ISO8859-1',
0.30 locale.py(1125):     'gd_gb.iso88591':                       'gd_GB.ISO8859-1',
0.30 locale.py(1126):     'gd_gb.iso885914':                      'gd_GB.ISO8859-14',
0.30 locale.py(1127):     'gd_gb.iso885915':                      'gd_GB.ISO8859-15',
0.30 locale.py(1128):     'gd_gb@euro':                           'gd_GB.ISO8859-15',
0.30 locale.py(1129):     'ger_de':                               'de_DE.ISO8859-1',
0.30 locale.py(1130):     'ger_de.8859':                          'de_DE.ISO8859-1',
0.30 locale.py(1131):     'german':                               'de_DE.ISO8859-1',
0.30 locale.py(1132):     'german.iso88591':                      'de_CH.ISO8859-1',
0.30 locale.py(1133):     'german_germany':                       'de_DE.ISO8859-1',
0.30 locale.py(1134):     'german_germany.8859':                  'de_DE.ISO8859-1',
0.30 locale.py(1135):     'gl':                                   'gl_ES.ISO8859-1',
0.30 locale.py(1136):     'gl_es':                                'gl_ES.ISO8859-1',
0.30 locale.py(1137):     'gl_es.iso88591':                       'gl_ES.ISO8859-1',
0.30 locale.py(1138):     'gl_es.iso885915':                      'gl_ES.ISO8859-15',
0.30 locale.py(1139):     'gl_es.iso885915@euro':                 'gl_ES.ISO8859-15',
0.30 locale.py(1140):     'gl_es.utf8@euro':                      'gl_ES.UTF-8',
0.30 locale.py(1141):     'gl_es@euro':                           'gl_ES.ISO8859-15',
0.30 locale.py(1142):     'greek':                                'el_GR.ISO8859-7',
0.30 locale.py(1143):     'greek.iso88597':                       'el_GR.ISO8859-7',
0.30 locale.py(1144):     'gu_in':                                'gu_IN.UTF-8',
0.30 locale.py(1145):     'gv':                                   'gv_GB.ISO8859-1',
0.30 locale.py(1146):     'gv_gb':                                'gv_GB.ISO8859-1',
0.30 locale.py(1147):     'gv_gb.iso88591':                       'gv_GB.ISO8859-1',
0.30 locale.py(1148):     'gv_gb.iso885914':                      'gv_GB.ISO8859-14',
0.30 locale.py(1149):     'gv_gb.iso885915':                      'gv_GB.ISO8859-15',
0.30 locale.py(1150):     'gv_gb@euro':                           'gv_GB.ISO8859-15',
0.30 locale.py(1151):     'he':                                   'he_IL.ISO8859-8',
0.30 locale.py(1152):     'he_il':                                'he_IL.ISO8859-8',
0.30 locale.py(1153):     'he_il.cp1255':                         'he_IL.CP1255',
0.30 locale.py(1154):     'he_il.iso88598':                       'he_IL.ISO8859-8',
0.30 locale.py(1155):     'he_il.microsoftcp1255':                'he_IL.CP1255',
0.30 locale.py(1156):     'hebrew':                               'iw_IL.ISO8859-8',
0.30 locale.py(1157):     'hebrew.iso88598':                      'iw_IL.ISO8859-8',
0.30 locale.py(1158):     'hi':                                   'hi_IN.ISCII-DEV',
0.30 locale.py(1159):     'hi_in':                                'hi_IN.ISCII-DEV',
0.30 locale.py(1160):     'hi_in.isciidev':                       'hi_IN.ISCII-DEV',
0.30 locale.py(1161):     'hne':                                  'hne_IN.UTF-8',
0.30 locale.py(1162):     'hr':                                   'hr_HR.ISO8859-2',
0.30 locale.py(1163):     'hr_hr':                                'hr_HR.ISO8859-2',
0.30 locale.py(1164):     'hr_hr.iso88592':                       'hr_HR.ISO8859-2',
0.30 locale.py(1165):     'hrvatski':                             'hr_HR.ISO8859-2',
0.30 locale.py(1166):     'hu':                                   'hu_HU.ISO8859-2',
0.30 locale.py(1167):     'hu_hu':                                'hu_HU.ISO8859-2',
0.30 locale.py(1168):     'hu_hu.iso88592':                       'hu_HU.ISO8859-2',
0.30 locale.py(1169):     'hungarian':                            'hu_HU.ISO8859-2',
0.30 locale.py(1170):     'icelandic':                            'is_IS.ISO8859-1',
0.30 locale.py(1171):     'icelandic.iso88591':                   'is_IS.ISO8859-1',
0.30 locale.py(1172):     'id':                                   'id_ID.ISO8859-1',
0.30 locale.py(1173):     'id_id':                                'id_ID.ISO8859-1',
0.30 locale.py(1174):     'in':                                   'id_ID.ISO8859-1',
0.30 locale.py(1175):     'in_id':                                'id_ID.ISO8859-1',
0.30 locale.py(1176):     'is':                                   'is_IS.ISO8859-1',
0.30 locale.py(1177):     'is_is':                                'is_IS.ISO8859-1',
0.30 locale.py(1178):     'is_is.iso88591':                       'is_IS.ISO8859-1',
0.30 locale.py(1179):     'is_is.iso885915':                      'is_IS.ISO8859-15',
0.30 locale.py(1180):     'is_is@euro':                           'is_IS.ISO8859-15',
0.30 locale.py(1181):     'iso-8859-1':                           'en_US.ISO8859-1',
0.30 locale.py(1182):     'iso-8859-15':                          'en_US.ISO8859-15',
0.30 locale.py(1183):     'iso8859-1':                            'en_US.ISO8859-1',
0.30 locale.py(1184):     'iso8859-15':                           'en_US.ISO8859-15',
0.30 locale.py(1185):     'iso_8859_1':                           'en_US.ISO8859-1',
0.30 locale.py(1186):     'iso_8859_15':                          'en_US.ISO8859-15',
0.30 locale.py(1187):     'it':                                   'it_IT.ISO8859-1',
0.30 locale.py(1188):     'it.iso885915':                         'it_IT.ISO8859-15',
0.30 locale.py(1189):     'it_ch':                                'it_CH.ISO8859-1',
0.30 locale.py(1190):     'it_ch.iso88591':                       'it_CH.ISO8859-1',
0.30 locale.py(1191):     'it_ch.iso885915':                      'it_CH.ISO8859-15',
0.30 locale.py(1192):     'it_ch@euro':                           'it_CH.ISO8859-15',
0.30 locale.py(1193):     'it_it':                                'it_IT.ISO8859-1',
0.30 locale.py(1194):     'it_it.88591':                          'it_IT.ISO8859-1',
0.30 locale.py(1195):     'it_it.iso88591':                       'it_IT.ISO8859-1',
0.30 locale.py(1196):     'it_it.iso885915':                      'it_IT.ISO8859-15',
0.30 locale.py(1197):     'it_it.iso885915@euro':                 'it_IT.ISO8859-15',
0.30 locale.py(1198):     'it_it.utf8@euro':                      'it_IT.UTF-8',
0.30 locale.py(1199):     'it_it@euro':                           'it_IT.ISO8859-15',
0.30 locale.py(1200):     'italian':                              'it_IT.ISO8859-1',
0.30 locale.py(1201):     'italian.iso88591':                     'it_IT.ISO8859-1',
0.30 locale.py(1202):     'iu':                                   'iu_CA.NUNACOM-8',
0.30 locale.py(1203):     'iu_ca':                                'iu_CA.NUNACOM-8',
0.30 locale.py(1204):     'iu_ca.nunacom8':                       'iu_CA.NUNACOM-8',
0.30 locale.py(1205):     'iw':                                   'he_IL.ISO8859-8',
0.30 locale.py(1206):     'iw_il':                                'he_IL.ISO8859-8',
0.30 locale.py(1207):     'iw_il.iso88598':                       'he_IL.ISO8859-8',
0.30 locale.py(1208):     'ja':                                   'ja_JP.eucJP',
0.30 locale.py(1209):     'ja.jis':                               'ja_JP.JIS7',
0.30 locale.py(1210):     'ja.sjis':                              'ja_JP.SJIS',
0.30 locale.py(1211):     'ja_jp':                                'ja_JP.eucJP',
0.30 locale.py(1212):     'ja_jp.ajec':                           'ja_JP.eucJP',
0.30 locale.py(1213):     'ja_jp.euc':                            'ja_JP.eucJP',
0.30 locale.py(1214):     'ja_jp.eucjp':                          'ja_JP.eucJP',
0.30 locale.py(1215):     'ja_jp.iso-2022-jp':                    'ja_JP.JIS7',
0.30 locale.py(1216):     'ja_jp.iso2022jp':                      'ja_JP.JIS7',
0.30 locale.py(1217):     'ja_jp.jis':                            'ja_JP.JIS7',
0.30 locale.py(1218):     'ja_jp.jis7':                           'ja_JP.JIS7',
0.30 locale.py(1219):     'ja_jp.mscode':                         'ja_JP.SJIS',
0.30 locale.py(1220):     'ja_jp.pck':                            'ja_JP.SJIS',
0.30 locale.py(1221):     'ja_jp.sjis':                           'ja_JP.SJIS',
0.30 locale.py(1222):     'ja_jp.ujis':                           'ja_JP.eucJP',
0.30 locale.py(1223):     'japan':                                'ja_JP.eucJP',
0.30 locale.py(1224):     'japanese':                             'ja_JP.eucJP',
0.30 locale.py(1225):     'japanese-euc':                         'ja_JP.eucJP',
0.30 locale.py(1226):     'japanese.euc':                         'ja_JP.eucJP',
0.30 locale.py(1227):     'japanese.sjis':                        'ja_JP.SJIS',
0.30 locale.py(1228):     'jp_jp':                                'ja_JP.eucJP',
0.30 locale.py(1229):     'ka':                                   'ka_GE.GEORGIAN-ACADEMY',
0.30 locale.py(1230):     'ka_ge':                                'ka_GE.GEORGIAN-ACADEMY',
0.30 locale.py(1231):     'ka_ge.georgianacademy':                'ka_GE.GEORGIAN-ACADEMY',
0.30 locale.py(1232):     'ka_ge.georgianps':                     'ka_GE.GEORGIAN-PS',
0.30 locale.py(1233):     'ka_ge.georgianrs':                     'ka_GE.GEORGIAN-ACADEMY',
0.30 locale.py(1234):     'kl':                                   'kl_GL.ISO8859-1',
0.30 locale.py(1235):     'kl_gl':                                'kl_GL.ISO8859-1',
0.30 locale.py(1236):     'kl_gl.iso88591':                       'kl_GL.ISO8859-1',
0.30 locale.py(1237):     'kl_gl.iso885915':                      'kl_GL.ISO8859-15',
0.30 locale.py(1238):     'kl_gl@euro':                           'kl_GL.ISO8859-15',
0.30 locale.py(1239):     'km_kh':                                'km_KH.UTF-8',
0.30 locale.py(1240):     'kn':                                   'kn_IN.UTF-8',
0.30 locale.py(1241):     'kn_in':                                'kn_IN.UTF-8',
0.30 locale.py(1242):     'ko':                                   'ko_KR.eucKR',
0.30 locale.py(1243):     'ko_kr':                                'ko_KR.eucKR',
0.30 locale.py(1244):     'ko_kr.euc':                            'ko_KR.eucKR',
0.30 locale.py(1245):     'ko_kr.euckr':                          'ko_KR.eucKR',
0.30 locale.py(1246):     'korean':                               'ko_KR.eucKR',
0.30 locale.py(1247):     'korean.euc':                           'ko_KR.eucKR',
0.30 locale.py(1248):     'ks':                                   'ks_IN.UTF-8',
0.30 locale.py(1249):     'ks_in@devanagari':                     'ks_IN@devanagari.UTF-8',
0.30 locale.py(1250):     'kw':                                   'kw_GB.ISO8859-1',
0.30 locale.py(1251):     'kw_gb':                                'kw_GB.ISO8859-1',
0.30 locale.py(1252):     'kw_gb.iso88591':                       'kw_GB.ISO8859-1',
0.30 locale.py(1253):     'kw_gb.iso885914':                      'kw_GB.ISO8859-14',
0.30 locale.py(1254):     'kw_gb.iso885915':                      'kw_GB.ISO8859-15',
0.30 locale.py(1255):     'kw_gb@euro':                           'kw_GB.ISO8859-15',
0.30 locale.py(1256):     'ky':                                   'ky_KG.UTF-8',
0.30 locale.py(1257):     'ky_kg':                                'ky_KG.UTF-8',
0.30 locale.py(1258):     'lithuanian':                           'lt_LT.ISO8859-13',
0.30 locale.py(1259):     'lo':                                   'lo_LA.MULELAO-1',
0.30 locale.py(1260):     'lo_la':                                'lo_LA.MULELAO-1',
0.30 locale.py(1261):     'lo_la.cp1133':                         'lo_LA.IBM-CP1133',
0.30 locale.py(1262):     'lo_la.ibmcp1133':                      'lo_LA.IBM-CP1133',
0.30 locale.py(1263):     'lo_la.mulelao1':                       'lo_LA.MULELAO-1',
0.30 locale.py(1264):     'lt':                                   'lt_LT.ISO8859-13',
0.30 locale.py(1265):     'lt_lt':                                'lt_LT.ISO8859-13',
0.30 locale.py(1266):     'lt_lt.iso885913':                      'lt_LT.ISO8859-13',
0.30 locale.py(1267):     'lt_lt.iso88594':                       'lt_LT.ISO8859-4',
0.30 locale.py(1268):     'lv':                                   'lv_LV.ISO8859-13',
0.30 locale.py(1269):     'lv_lv':                                'lv_LV.ISO8859-13',
0.30 locale.py(1270):     'lv_lv.iso885913':                      'lv_LV.ISO8859-13',
0.30 locale.py(1271):     'lv_lv.iso88594':                       'lv_LV.ISO8859-4',
0.30 locale.py(1272):     'mai':                                  'mai_IN.UTF-8',
0.30 locale.py(1273):     'mi':                                   'mi_NZ.ISO8859-1',
0.30 locale.py(1274):     'mi_nz':                                'mi_NZ.ISO8859-1',
0.30 locale.py(1275):     'mi_nz.iso88591':                       'mi_NZ.ISO8859-1',
0.30 locale.py(1276):     'mk':                                   'mk_MK.ISO8859-5',
0.30 locale.py(1277):     'mk_mk':                                'mk_MK.ISO8859-5',
0.30 locale.py(1278):     'mk_mk.cp1251':                         'mk_MK.CP1251',
0.30 locale.py(1279):     'mk_mk.iso88595':                       'mk_MK.ISO8859-5',
0.30 locale.py(1280):     'mk_mk.microsoftcp1251':                'mk_MK.CP1251',
0.30 locale.py(1281):     'ml':                                   'ml_IN.UTF-8',
0.30 locale.py(1282):     'mr':                                   'mr_IN.UTF-8',
0.30 locale.py(1283):     'mr_in':                                'mr_IN.UTF-8',
0.30 locale.py(1284):     'ms':                                   'ms_MY.ISO8859-1',
0.30 locale.py(1285):     'ms_my':                                'ms_MY.ISO8859-1',
0.30 locale.py(1286):     'ms_my.iso88591':                       'ms_MY.ISO8859-1',
0.30 locale.py(1287):     'mt':                                   'mt_MT.ISO8859-3',
0.30 locale.py(1288):     'mt_mt':                                'mt_MT.ISO8859-3',
0.30 locale.py(1289):     'mt_mt.iso88593':                       'mt_MT.ISO8859-3',
0.30 locale.py(1290):     'nb':                                   'nb_NO.ISO8859-1',
0.30 locale.py(1291):     'nb_no':                                'nb_NO.ISO8859-1',
0.30 locale.py(1292):     'nb_no.88591':                          'nb_NO.ISO8859-1',
0.30 locale.py(1293):     'nb_no.iso88591':                       'nb_NO.ISO8859-1',
0.30 locale.py(1294):     'nb_no.iso885915':                      'nb_NO.ISO8859-15',
0.30 locale.py(1295):     'nb_no@euro':                           'nb_NO.ISO8859-15',
0.30 locale.py(1296):     'nl':                                   'nl_NL.ISO8859-1',
0.30 locale.py(1297):     'nl.iso885915':                         'nl_NL.ISO8859-15',
0.30 locale.py(1298):     'nl_be':                                'nl_BE.ISO8859-1',
0.30 locale.py(1299):     'nl_be.88591':                          'nl_BE.ISO8859-1',
0.30 locale.py(1300):     'nl_be.iso88591':                       'nl_BE.ISO8859-1',
0.30 locale.py(1301):     'nl_be.iso885915':                      'nl_BE.ISO8859-15',
0.30 locale.py(1302):     'nl_be.iso885915@euro':                 'nl_BE.ISO8859-15',
0.30 locale.py(1303):     'nl_be.utf8@euro':                      'nl_BE.UTF-8',
0.30 locale.py(1304):     'nl_be@euro':                           'nl_BE.ISO8859-15',
0.30 locale.py(1305):     'nl_nl':                                'nl_NL.ISO8859-1',
0.30 locale.py(1306):     'nl_nl.88591':                          'nl_NL.ISO8859-1',
0.30 locale.py(1307):     'nl_nl.iso88591':                       'nl_NL.ISO8859-1',
0.30 locale.py(1308):     'nl_nl.iso885915':                      'nl_NL.ISO8859-15',
0.30 locale.py(1309):     'nl_nl.iso885915@euro':                 'nl_NL.ISO8859-15',
0.30 locale.py(1310):     'nl_nl.utf8@euro':                      'nl_NL.UTF-8',
0.30 locale.py(1311):     'nl_nl@euro':                           'nl_NL.ISO8859-15',
0.30 locale.py(1312):     'nn':                                   'nn_NO.ISO8859-1',
0.30 locale.py(1313):     'nn_no':                                'nn_NO.ISO8859-1',
0.30 locale.py(1314):     'nn_no.88591':                          'nn_NO.ISO8859-1',
0.30 locale.py(1315):     'nn_no.iso88591':                       'nn_NO.ISO8859-1',
0.30 locale.py(1316):     'nn_no.iso885915':                      'nn_NO.ISO8859-15',
0.30 locale.py(1317):     'nn_no@euro':                           'nn_NO.ISO8859-15',
0.30 locale.py(1318):     'no':                                   'no_NO.ISO8859-1',
0.30 locale.py(1319):     'no@nynorsk':                           'ny_NO.ISO8859-1',
0.30 locale.py(1320):     'no_no':                                'no_NO.ISO8859-1',
0.30 locale.py(1321):     'no_no.88591':                          'no_NO.ISO8859-1',
0.30 locale.py(1322):     'no_no.iso88591':                       'no_NO.ISO8859-1',
0.30 locale.py(1323):     'no_no.iso885915':                      'no_NO.ISO8859-15',
0.30 locale.py(1324):     'no_no.iso88591@bokmal':                'no_NO.ISO8859-1',
0.30 locale.py(1325):     'no_no.iso88591@nynorsk':               'no_NO.ISO8859-1',
0.30 locale.py(1326):     'no_no@euro':                           'no_NO.ISO8859-15',
0.30 locale.py(1327):     'norwegian':                            'no_NO.ISO8859-1',
0.30 locale.py(1328):     'norwegian.iso88591':                   'no_NO.ISO8859-1',
0.30 locale.py(1329):     'nr':                                   'nr_ZA.ISO8859-1',
0.30 locale.py(1330):     'nr_za':                                'nr_ZA.ISO8859-1',
0.30 locale.py(1331):     'nr_za.iso88591':                       'nr_ZA.ISO8859-1',
0.30 locale.py(1332):     'nso':                                  'nso_ZA.ISO8859-15',
0.30 locale.py(1333):     'nso_za':                               'nso_ZA.ISO8859-15',
0.30 locale.py(1334):     'nso_za.iso885915':                     'nso_ZA.ISO8859-15',
0.30 locale.py(1335):     'ny':                                   'ny_NO.ISO8859-1',
0.30 locale.py(1336):     'ny_no':                                'ny_NO.ISO8859-1',
0.30 locale.py(1337):     'ny_no.88591':                          'ny_NO.ISO8859-1',
0.30 locale.py(1338):     'ny_no.iso88591':                       'ny_NO.ISO8859-1',
0.30 locale.py(1339):     'ny_no.iso885915':                      'ny_NO.ISO8859-15',
0.30 locale.py(1340):     'ny_no@euro':                           'ny_NO.ISO8859-15',
0.30 locale.py(1341):     'nynorsk':                              'nn_NO.ISO8859-1',
0.30 locale.py(1342):     'oc':                                   'oc_FR.ISO8859-1',
0.30 locale.py(1343):     'oc_fr':                                'oc_FR.ISO8859-1',
0.30 locale.py(1344):     'oc_fr.iso88591':                       'oc_FR.ISO8859-1',
0.30 locale.py(1345):     'oc_fr.iso885915':                      'oc_FR.ISO8859-15',
0.30 locale.py(1346):     'oc_fr@euro':                           'oc_FR.ISO8859-15',
0.30 locale.py(1347):     'or':                                   'or_IN.UTF-8',
0.30 locale.py(1348):     'pa':                                   'pa_IN.UTF-8',
0.30 locale.py(1349):     'pa_in':                                'pa_IN.UTF-8',
0.30 locale.py(1350):     'pd':                                   'pd_US.ISO8859-1',
0.30 locale.py(1351):     'pd_de':                                'pd_DE.ISO8859-1',
0.30 locale.py(1352):     'pd_de.iso88591':                       'pd_DE.ISO8859-1',
0.30 locale.py(1353):     'pd_de.iso885915':                      'pd_DE.ISO8859-15',
0.30 locale.py(1354):     'pd_de@euro':                           'pd_DE.ISO8859-15',
0.30 locale.py(1355):     'pd_us':                                'pd_US.ISO8859-1',
0.30 locale.py(1356):     'pd_us.iso88591':                       'pd_US.ISO8859-1',
0.30 locale.py(1357):     'pd_us.iso885915':                      'pd_US.ISO8859-15',
0.30 locale.py(1358):     'pd_us@euro':                           'pd_US.ISO8859-15',
0.30 locale.py(1359):     'ph':                                   'ph_PH.ISO8859-1',
0.30 locale.py(1360):     'ph_ph':                                'ph_PH.ISO8859-1',
0.30 locale.py(1361):     'ph_ph.iso88591':                       'ph_PH.ISO8859-1',
0.30 locale.py(1362):     'pl':                                   'pl_PL.ISO8859-2',
0.30 locale.py(1363):     'pl_pl':                                'pl_PL.ISO8859-2',
0.30 locale.py(1364):     'pl_pl.iso88592':                       'pl_PL.ISO8859-2',
0.30 locale.py(1365):     'polish':                               'pl_PL.ISO8859-2',
0.30 locale.py(1366):     'portuguese':                           'pt_PT.ISO8859-1',
0.30 locale.py(1367):     'portuguese.iso88591':                  'pt_PT.ISO8859-1',
0.30 locale.py(1368):     'portuguese_brazil':                    'pt_BR.ISO8859-1',
0.30 locale.py(1369):     'portuguese_brazil.8859':               'pt_BR.ISO8859-1',
0.30 locale.py(1370):     'posix':                                'C',
0.30 locale.py(1371):     'posix-utf2':                           'C',
0.30 locale.py(1372):     'pp':                                   'pp_AN.ISO8859-1',
0.30 locale.py(1373):     'pp_an':                                'pp_AN.ISO8859-1',
0.30 locale.py(1374):     'pp_an.iso88591':                       'pp_AN.ISO8859-1',
0.30 locale.py(1375):     'pt':                                   'pt_PT.ISO8859-1',
0.30 locale.py(1376):     'pt.iso885915':                         'pt_PT.ISO8859-15',
0.30 locale.py(1377):     'pt_br':                                'pt_BR.ISO8859-1',
0.30 locale.py(1378):     'pt_br.88591':                          'pt_BR.ISO8859-1',
0.30 locale.py(1379):     'pt_br.iso88591':                       'pt_BR.ISO8859-1',
0.30 locale.py(1380):     'pt_br.iso885915':                      'pt_BR.ISO8859-15',
0.30 locale.py(1381):     'pt_br@euro':                           'pt_BR.ISO8859-15',
0.30 locale.py(1382):     'pt_pt':                                'pt_PT.ISO8859-1',
0.30 locale.py(1383):     'pt_pt.88591':                          'pt_PT.ISO8859-1',
0.30 locale.py(1384):     'pt_pt.iso88591':                       'pt_PT.ISO8859-1',
0.30 locale.py(1385):     'pt_pt.iso885915':                      'pt_PT.ISO8859-15',
0.30 locale.py(1386):     'pt_pt.iso885915@euro':                 'pt_PT.ISO8859-15',
0.30 locale.py(1387):     'pt_pt.utf8@euro':                      'pt_PT.UTF-8',
0.30 locale.py(1388):     'pt_pt@euro':                           'pt_PT.ISO8859-15',
0.30 locale.py(1389):     'ro':                                   'ro_RO.ISO8859-2',
0.30 locale.py(1390):     'ro_ro':                                'ro_RO.ISO8859-2',
0.30 locale.py(1391):     'ro_ro.iso88592':                       'ro_RO.ISO8859-2',
0.30 locale.py(1392):     'romanian':                             'ro_RO.ISO8859-2',
0.30 locale.py(1393):     'ru':                                   'ru_RU.UTF-8',
0.30 locale.py(1394):     'ru.koi8r':                             'ru_RU.KOI8-R',
0.30 locale.py(1395):     'ru_ru':                                'ru_RU.UTF-8',
0.30 locale.py(1396):     'ru_ru.cp1251':                         'ru_RU.CP1251',
0.30 locale.py(1397):     'ru_ru.iso88595':                       'ru_RU.ISO8859-5',
0.30 locale.py(1398):     'ru_ru.koi8r':                          'ru_RU.KOI8-R',
0.30 locale.py(1399):     'ru_ru.microsoftcp1251':                'ru_RU.CP1251',
0.30 locale.py(1400):     'ru_ua':                                'ru_UA.KOI8-U',
0.30 locale.py(1401):     'ru_ua.cp1251':                         'ru_UA.CP1251',
0.30 locale.py(1402):     'ru_ua.koi8u':                          'ru_UA.KOI8-U',
0.30 locale.py(1403):     'ru_ua.microsoftcp1251':                'ru_UA.CP1251',
0.30 locale.py(1404):     'rumanian':                             'ro_RO.ISO8859-2',
0.30 locale.py(1405):     'russian':                              'ru_RU.ISO8859-5',
0.30 locale.py(1406):     'rw':                                   'rw_RW.ISO8859-1',
0.30 locale.py(1407):     'rw_rw':                                'rw_RW.ISO8859-1',
0.30 locale.py(1408):     'rw_rw.iso88591':                       'rw_RW.ISO8859-1',
0.30 locale.py(1409):     'sd':                                   'sd_IN@devanagari.UTF-8',
0.30 locale.py(1410):     'se_no':                                'se_NO.UTF-8',
0.30 locale.py(1411):     'serbocroatian':                        'sr_RS.UTF-8@latin',
0.30 locale.py(1412):     'sh':                                   'sr_RS.UTF-8@latin',
0.30 locale.py(1413):     'sh_ba.iso88592@bosnia':                'sr_CS.ISO8859-2',
0.30 locale.py(1414):     'sh_hr':                                'sh_HR.ISO8859-2',
0.30 locale.py(1415):     'sh_hr.iso88592':                       'hr_HR.ISO8859-2',
0.30 locale.py(1416):     'sh_sp':                                'sr_CS.ISO8859-2',
0.30 locale.py(1417):     'sh_yu':                                'sr_RS.UTF-8@latin',
0.30 locale.py(1418):     'si':                                   'si_LK.UTF-8',
0.30 locale.py(1419):     'si_lk':                                'si_LK.UTF-8',
0.30 locale.py(1420):     'sinhala':                              'si_LK.UTF-8',
0.30 locale.py(1421):     'sk':                                   'sk_SK.ISO8859-2',
0.30 locale.py(1422):     'sk_sk':                                'sk_SK.ISO8859-2',
0.30 locale.py(1423):     'sk_sk.iso88592':                       'sk_SK.ISO8859-2',
0.30 locale.py(1424):     'sl':                                   'sl_SI.ISO8859-2',
0.30 locale.py(1425):     'sl_cs':                                'sl_CS.ISO8859-2',
0.30 locale.py(1426):     'sl_si':                                'sl_SI.ISO8859-2',
0.30 locale.py(1427):     'sl_si.iso88592':                       'sl_SI.ISO8859-2',
0.30 locale.py(1428):     'slovak':                               'sk_SK.ISO8859-2',
0.30 locale.py(1429):     'slovene':                              'sl_SI.ISO8859-2',
0.30 locale.py(1430):     'slovenian':                            'sl_SI.ISO8859-2',
0.30 locale.py(1431):     'sp':                                   'sr_CS.ISO8859-5',
0.30 locale.py(1432):     'sp_yu':                                'sr_CS.ISO8859-5',
0.30 locale.py(1433):     'spanish':                              'es_ES.ISO8859-1',
0.30 locale.py(1434):     'spanish.iso88591':                     'es_ES.ISO8859-1',
0.30 locale.py(1435):     'spanish_spain':                        'es_ES.ISO8859-1',
0.30 locale.py(1436):     'spanish_spain.8859':                   'es_ES.ISO8859-1',
0.30 locale.py(1437):     'sq':                                   'sq_AL.ISO8859-2',
0.30 locale.py(1438):     'sq_al':                                'sq_AL.ISO8859-2',
0.30 locale.py(1439):     'sq_al.iso88592':                       'sq_AL.ISO8859-2',
0.30 locale.py(1440):     'sr':                                   'sr_RS.UTF-8',
0.30 locale.py(1441):     'sr@cyrillic':                          'sr_RS.UTF-8',
0.30 locale.py(1442):     'sr@latin':                             'sr_RS.UTF-8@latin',
0.30 locale.py(1443):     'sr@latn':                              'sr_RS.UTF-8@latin',
0.30 locale.py(1444):     'sr_cs':                                'sr_RS.UTF-8',
0.30 locale.py(1445):     'sr_cs.iso88592':                       'sr_CS.ISO8859-2',
0.30 locale.py(1446):     'sr_cs.iso88592@latn':                  'sr_CS.ISO8859-2',
0.30 locale.py(1447):     'sr_cs.iso88595':                       'sr_CS.ISO8859-5',
0.30 locale.py(1448):     'sr_cs.utf8@latn':                      'sr_RS.UTF-8@latin',
0.30 locale.py(1449):     'sr_cs@latn':                           'sr_RS.UTF-8@latin',
0.30 locale.py(1450):     'sr_me':                                'sr_ME.UTF-8',
0.30 locale.py(1451):     'sr_rs':                                'sr_RS.UTF-8',
0.30 locale.py(1452):     'sr_rs.utf8@latn':                      'sr_RS.UTF-8@latin',
0.30 locale.py(1453):     'sr_rs@latin':                          'sr_RS.UTF-8@latin',
0.30 locale.py(1454):     'sr_rs@latn':                           'sr_RS.UTF-8@latin',
0.30 locale.py(1455):     'sr_sp':                                'sr_CS.ISO8859-2',
0.30 locale.py(1456):     'sr_yu':                                'sr_RS.UTF-8@latin',
0.30 locale.py(1457):     'sr_yu.cp1251@cyrillic':                'sr_CS.CP1251',
0.30 locale.py(1458):     'sr_yu.iso88592':                       'sr_CS.ISO8859-2',
0.30 locale.py(1459):     'sr_yu.iso88595':                       'sr_CS.ISO8859-5',
0.30 locale.py(1460):     'sr_yu.iso88595@cyrillic':              'sr_CS.ISO8859-5',
0.30 locale.py(1461):     'sr_yu.microsoftcp1251@cyrillic':       'sr_CS.CP1251',
0.30 locale.py(1462):     'sr_yu.utf8@cyrillic':                  'sr_RS.UTF-8',
0.30 locale.py(1463):     'sr_yu@cyrillic':                       'sr_RS.UTF-8',
0.30 locale.py(1464):     'ss':                                   'ss_ZA.ISO8859-1',
0.30 locale.py(1465):     'ss_za':                                'ss_ZA.ISO8859-1',
0.30 locale.py(1466):     'ss_za.iso88591':                       'ss_ZA.ISO8859-1',
0.30 locale.py(1467):     'st':                                   'st_ZA.ISO8859-1',
0.30 locale.py(1468):     'st_za':                                'st_ZA.ISO8859-1',
0.30 locale.py(1469):     'st_za.iso88591':                       'st_ZA.ISO8859-1',
0.30 locale.py(1470):     'sv':                                   'sv_SE.ISO8859-1',
0.30 locale.py(1471):     'sv.iso885915':                         'sv_SE.ISO8859-15',
0.30 locale.py(1472):     'sv_fi':                                'sv_FI.ISO8859-1',
0.30 locale.py(1473):     'sv_fi.iso88591':                       'sv_FI.ISO8859-1',
0.30 locale.py(1474):     'sv_fi.iso885915':                      'sv_FI.ISO8859-15',
0.30 locale.py(1475):     'sv_fi.iso885915@euro':                 'sv_FI.ISO8859-15',
0.30 locale.py(1476):     'sv_fi.utf8@euro':                      'sv_FI.UTF-8',
0.30 locale.py(1477):     'sv_fi@euro':                           'sv_FI.ISO8859-15',
0.30 locale.py(1478):     'sv_se':                                'sv_SE.ISO8859-1',
0.30 locale.py(1479):     'sv_se.88591':                          'sv_SE.ISO8859-1',
0.30 locale.py(1480):     'sv_se.iso88591':                       'sv_SE.ISO8859-1',
0.30 locale.py(1481):     'sv_se.iso885915':                      'sv_SE.ISO8859-15',
0.30 locale.py(1482):     'sv_se@euro':                           'sv_SE.ISO8859-15',
0.30 locale.py(1483):     'swedish':                              'sv_SE.ISO8859-1',
0.30 locale.py(1484):     'swedish.iso88591':                     'sv_SE.ISO8859-1',
0.30 locale.py(1485):     'ta':                                   'ta_IN.TSCII-0',
0.30 locale.py(1486):     'ta_in':                                'ta_IN.TSCII-0',
0.30 locale.py(1487):     'ta_in.tscii':                          'ta_IN.TSCII-0',
0.30 locale.py(1488):     'ta_in.tscii0':                         'ta_IN.TSCII-0',
0.30 locale.py(1489):     'te':                                   'te_IN.UTF-8',
0.30 locale.py(1490):     'tg':                                   'tg_TJ.KOI8-C',
0.30 locale.py(1491):     'tg_tj':                                'tg_TJ.KOI8-C',
0.30 locale.py(1492):     'tg_tj.koi8c':                          'tg_TJ.KOI8-C',
0.30 locale.py(1493):     'th':                                   'th_TH.ISO8859-11',
0.30 locale.py(1494):     'th_th':                                'th_TH.ISO8859-11',
0.30 locale.py(1495):     'th_th.iso885911':                      'th_TH.ISO8859-11',
0.30 locale.py(1496):     'th_th.tactis':                         'th_TH.TIS620',
0.30 locale.py(1497):     'th_th.tis620':                         'th_TH.TIS620',
0.30 locale.py(1498):     'thai':                                 'th_TH.ISO8859-11',
0.30 locale.py(1499):     'tl':                                   'tl_PH.ISO8859-1',
0.30 locale.py(1500):     'tl_ph':                                'tl_PH.ISO8859-1',
0.30 locale.py(1501):     'tl_ph.iso88591':                       'tl_PH.ISO8859-1',
0.30 locale.py(1502):     'tn':                                   'tn_ZA.ISO8859-15',
0.30 locale.py(1503):     'tn_za':                                'tn_ZA.ISO8859-15',
0.30 locale.py(1504):     'tn_za.iso885915':                      'tn_ZA.ISO8859-15',
0.30 locale.py(1505):     'tr':                                   'tr_TR.ISO8859-9',
0.30 locale.py(1506):     'tr_tr':                                'tr_TR.ISO8859-9',
0.30 locale.py(1507):     'tr_tr.iso88599':                       'tr_TR.ISO8859-9',
0.30 locale.py(1508):     'ts':                                   'ts_ZA.ISO8859-1',
0.30 locale.py(1509):     'ts_za':                                'ts_ZA.ISO8859-1',
0.30 locale.py(1510):     'ts_za.iso88591':                       'ts_ZA.ISO8859-1',
0.30 locale.py(1511):     'tt':                                   'tt_RU.TATAR-CYR',
0.30 locale.py(1512):     'tt_ru':                                'tt_RU.TATAR-CYR',
0.30 locale.py(1513):     'tt_ru.koi8c':                          'tt_RU.KOI8-C',
0.30 locale.py(1514):     'tt_ru.tatarcyr':                       'tt_RU.TATAR-CYR',
0.30 locale.py(1515):     'turkish':                              'tr_TR.ISO8859-9',
0.30 locale.py(1516):     'turkish.iso88599':                     'tr_TR.ISO8859-9',
0.30 locale.py(1517):     'uk':                                   'uk_UA.KOI8-U',
0.30 locale.py(1518):     'uk_ua':                                'uk_UA.KOI8-U',
0.30 locale.py(1519):     'uk_ua.cp1251':                         'uk_UA.CP1251',
0.30 locale.py(1520):     'uk_ua.iso88595':                       'uk_UA.ISO8859-5',
0.30 locale.py(1521):     'uk_ua.koi8u':                          'uk_UA.KOI8-U',
0.30 locale.py(1522):     'uk_ua.microsoftcp1251':                'uk_UA.CP1251',
0.30 locale.py(1523):     'univ':                                 'en_US.UTF-8',
0.30 locale.py(1524):     'universal':                            'en_US.UTF-8',
0.30 locale.py(1525):     'universal.utf8@ucs4':                  'en_US.UTF-8',
0.30 locale.py(1526):     'ur':                                   'ur_PK.CP1256',
0.30 locale.py(1527):     'ur_pk':                                'ur_PK.CP1256',
0.30 locale.py(1528):     'ur_pk.cp1256':                         'ur_PK.CP1256',
0.30 locale.py(1529):     'ur_pk.microsoftcp1256':                'ur_PK.CP1256',
0.30 locale.py(1530):     'uz':                                   'uz_UZ.UTF-8',
0.30 locale.py(1531):     'uz_uz':                                'uz_UZ.UTF-8',
0.30 locale.py(1532):     'uz_uz.iso88591':                       'uz_UZ.ISO8859-1',
0.30 locale.py(1533):     'uz_uz.utf8@cyrillic':                  'uz_UZ.UTF-8',
0.30 locale.py(1534):     'uz_uz@cyrillic':                       'uz_UZ.UTF-8',
0.30 locale.py(1535):     've':                                   've_ZA.UTF-8',
0.30 locale.py(1536):     've_za':                                've_ZA.UTF-8',
0.30 locale.py(1537):     'vi':                                   'vi_VN.TCVN',
0.30 locale.py(1538):     'vi_vn':                                'vi_VN.TCVN',
0.30 locale.py(1539):     'vi_vn.tcvn':                           'vi_VN.TCVN',
0.30 locale.py(1540):     'vi_vn.tcvn5712':                       'vi_VN.TCVN',
0.30 locale.py(1541):     'vi_vn.viscii':                         'vi_VN.VISCII',
0.30 locale.py(1542):     'vi_vn.viscii111':                      'vi_VN.VISCII',
0.30 locale.py(1543):     'wa':                                   'wa_BE.ISO8859-1',
0.30 locale.py(1544):     'wa_be':                                'wa_BE.ISO8859-1',
0.30 locale.py(1545):     'wa_be.iso88591':                       'wa_BE.ISO8859-1',
0.30 locale.py(1546):     'wa_be.iso885915':                      'wa_BE.ISO8859-15',
0.30 locale.py(1547):     'wa_be.iso885915@euro':                 'wa_BE.ISO8859-15',
0.30 locale.py(1548):     'wa_be@euro':                           'wa_BE.ISO8859-15',
0.30 locale.py(1549):     'xh':                                   'xh_ZA.ISO8859-1',
0.30 locale.py(1550):     'xh_za':                                'xh_ZA.ISO8859-1',
0.30 locale.py(1551):     'xh_za.iso88591':                       'xh_ZA.ISO8859-1',
0.30 locale.py(1552):     'yi':                                   'yi_US.CP1255',
0.30 locale.py(1553):     'yi_us':                                'yi_US.CP1255',
0.30 locale.py(1554):     'yi_us.cp1255':                         'yi_US.CP1255',
0.30 locale.py(1555):     'yi_us.microsoftcp1255':                'yi_US.CP1255',
0.30 locale.py(1556):     'zh':                                   'zh_CN.eucCN',
0.30 locale.py(1557):     'zh_cn':                                'zh_CN.gb2312',
0.30 locale.py(1558):     'zh_cn.big5':                           'zh_TW.big5',
0.30 locale.py(1559):     'zh_cn.euc':                            'zh_CN.eucCN',
0.30 locale.py(1560):     'zh_cn.gb18030':                        'zh_CN.gb18030',
0.30 locale.py(1561):     'zh_cn.gb2312':                         'zh_CN.gb2312',
0.30 locale.py(1562):     'zh_cn.gbk':                            'zh_CN.gbk',
0.30 locale.py(1563):     'zh_hk':                                'zh_HK.big5hkscs',
0.30 locale.py(1564):     'zh_hk.big5':                           'zh_HK.big5',
0.30 locale.py(1565):     'zh_hk.big5hk':                         'zh_HK.big5hkscs',
0.30 locale.py(1566):     'zh_hk.big5hkscs':                      'zh_HK.big5hkscs',
0.30 locale.py(1567):     'zh_tw':                                'zh_TW.big5',
0.30 locale.py(1568):     'zh_tw.big5':                           'zh_TW.big5',
0.30 locale.py(1569):     'zh_tw.euc':                            'zh_TW.eucTW',
0.30 locale.py(1570):     'zh_tw.euctw':                          'zh_TW.eucTW',
0.30 locale.py(1571):     'zu':                                   'zu_ZA.ISO8859-1',
0.30 locale.py(1572):     'zu_za':                                'zu_ZA.ISO8859-1',
0.30 locale.py(1573):     'zu_za.iso88591':                       'zu_ZA.ISO8859-1',
0.30 locale.py(1590): windows_locale = {
0.30 locale.py(1591):     0x0436: "af_ZA", # Afrikaans
0.30 locale.py(1592):     0x041c: "sq_AL", # Albanian
0.30 locale.py(1593):     0x0484: "gsw_FR",# Alsatian - France
0.30 locale.py(1594):     0x045e: "am_ET", # Amharic - Ethiopia
0.30 locale.py(1595):     0x0401: "ar_SA", # Arabic - Saudi Arabia
0.30 locale.py(1596):     0x0801: "ar_IQ", # Arabic - Iraq
0.30 locale.py(1597):     0x0c01: "ar_EG", # Arabic - Egypt
0.30 locale.py(1598):     0x1001: "ar_LY", # Arabic - Libya
0.30 locale.py(1599):     0x1401: "ar_DZ", # Arabic - Algeria
0.30 locale.py(1600):     0x1801: "ar_MA", # Arabic - Morocco
0.30 locale.py(1601):     0x1c01: "ar_TN", # Arabic - Tunisia
0.30 locale.py(1602):     0x2001: "ar_OM", # Arabic - Oman
0.30 locale.py(1603):     0x2401: "ar_YE", # Arabic - Yemen
0.30 locale.py(1604):     0x2801: "ar_SY", # Arabic - Syria
0.30 locale.py(1605):     0x2c01: "ar_JO", # Arabic - Jordan
0.30 locale.py(1606):     0x3001: "ar_LB", # Arabic - Lebanon
0.30 locale.py(1607):     0x3401: "ar_KW", # Arabic - Kuwait
0.30 locale.py(1608):     0x3801: "ar_AE", # Arabic - United Arab Emirates
0.30 locale.py(1609):     0x3c01: "ar_BH", # Arabic - Bahrain
0.30 locale.py(1610):     0x4001: "ar_QA", # Arabic - Qatar
0.30 locale.py(1611):     0x042b: "hy_AM", # Armenian
0.30 locale.py(1612):     0x044d: "as_IN", # Assamese - India
0.30 locale.py(1613):     0x042c: "az_AZ", # Azeri - Latin
0.30 locale.py(1614):     0x082c: "az_AZ", # Azeri - Cyrillic
0.30 locale.py(1615):     0x046d: "ba_RU", # Bashkir
0.30 locale.py(1616):     0x042d: "eu_ES", # Basque - Russia
0.30 locale.py(1617):     0x0423: "be_BY", # Belarusian
0.30 locale.py(1618):     0x0445: "bn_IN", # Begali
0.30 locale.py(1619):     0x201a: "bs_BA", # Bosnian - Cyrillic
0.30 locale.py(1620):     0x141a: "bs_BA", # Bosnian - Latin
0.30 locale.py(1621):     0x047e: "br_FR", # Breton - France
0.30 locale.py(1622):     0x0402: "bg_BG", # Bulgarian
0.30 locale.py(1624):     0x0403: "ca_ES", # Catalan
0.30 locale.py(1625):     0x0004: "zh_CHS",# Chinese - Simplified
0.30 locale.py(1626):     0x0404: "zh_TW", # Chinese - Taiwan
0.30 locale.py(1627):     0x0804: "zh_CN", # Chinese - PRC
0.30 locale.py(1628):     0x0c04: "zh_HK", # Chinese - Hong Kong S.A.R.
0.30 locale.py(1629):     0x1004: "zh_SG", # Chinese - Singapore
0.30 locale.py(1630):     0x1404: "zh_MO", # Chinese - Macao S.A.R.
0.30 locale.py(1631):     0x7c04: "zh_CHT",# Chinese - Traditional
0.30 locale.py(1632):     0x0483: "co_FR", # Corsican - France
0.30 locale.py(1633):     0x041a: "hr_HR", # Croatian
0.30 locale.py(1634):     0x101a: "hr_BA", # Croatian - Bosnia
0.30 locale.py(1635):     0x0405: "cs_CZ", # Czech
0.30 locale.py(1636):     0x0406: "da_DK", # Danish
0.30 locale.py(1637):     0x048c: "gbz_AF",# Dari - Afghanistan
0.30 locale.py(1638):     0x0465: "div_MV",# Divehi - Maldives
0.30 locale.py(1639):     0x0413: "nl_NL", # Dutch - The Netherlands
0.30 locale.py(1640):     0x0813: "nl_BE", # Dutch - Belgium
0.30 locale.py(1641):     0x0409: "en_US", # English - United States
0.30 locale.py(1642):     0x0809: "en_GB", # English - United Kingdom
0.30 locale.py(1643):     0x0c09: "en_AU", # English - Australia
0.30 locale.py(1644):     0x1009: "en_CA", # English - Canada
0.30 locale.py(1645):     0x1409: "en_NZ", # English - New Zealand
0.30 locale.py(1646):     0x1809: "en_IE", # English - Ireland
0.30 locale.py(1647):     0x1c09: "en_ZA", # English - South Africa
0.30 locale.py(1648):     0x2009: "en_JA", # English - Jamaica
0.30 locale.py(1649):     0x2409: "en_CB", # English - Carribbean
0.30 locale.py(1650):     0x2809: "en_BZ", # English - Belize
0.30 locale.py(1651):     0x2c09: "en_TT", # English - Trinidad
0.30 locale.py(1652):     0x3009: "en_ZW", # English - Zimbabwe
0.30 locale.py(1653):     0x3409: "en_PH", # English - Philippines
0.30 locale.py(1654):     0x4009: "en_IN", # English - India
0.30 locale.py(1655):     0x4409: "en_MY", # English - Malaysia
0.30 locale.py(1656):     0x4809: "en_IN", # English - Singapore
0.30 locale.py(1657):     0x0425: "et_EE", # Estonian
0.30 locale.py(1658):     0x0438: "fo_FO", # Faroese
0.30 locale.py(1659):     0x0464: "fil_PH",# Filipino
0.30 locale.py(1660):     0x040b: "fi_FI", # Finnish
0.30 locale.py(1661):     0x040c: "fr_FR", # French - France
0.30 locale.py(1662):     0x080c: "fr_BE", # French - Belgium
0.30 locale.py(1663):     0x0c0c: "fr_CA", # French - Canada
0.30 locale.py(1664):     0x100c: "fr_CH", # French - Switzerland
0.30 locale.py(1665):     0x140c: "fr_LU", # French - Luxembourg
0.30 locale.py(1666):     0x180c: "fr_MC", # French - Monaco
0.30 locale.py(1667):     0x0462: "fy_NL", # Frisian - Netherlands
0.30 locale.py(1668):     0x0456: "gl_ES", # Galician
0.30 locale.py(1669):     0x0437: "ka_GE", # Georgian
0.30 locale.py(1670):     0x0407: "de_DE", # German - Germany
0.30 locale.py(1671):     0x0807: "de_CH", # German - Switzerland
0.30 locale.py(1672):     0x0c07: "de_AT", # German - Austria
0.30 locale.py(1673):     0x1007: "de_LU", # German - Luxembourg
0.30 locale.py(1674):     0x1407: "de_LI", # German - Liechtenstein
0.30 locale.py(1675):     0x0408: "el_GR", # Greek
0.30 locale.py(1676):     0x046f: "kl_GL", # Greenlandic - Greenland
0.30 locale.py(1677):     0x0447: "gu_IN", # Gujarati
0.30 locale.py(1678):     0x0468: "ha_NG", # Hausa - Latin
0.30 locale.py(1679):     0x040d: "he_IL", # Hebrew
0.30 locale.py(1680):     0x0439: "hi_IN", # Hindi
0.30 locale.py(1681):     0x040e: "hu_HU", # Hungarian
0.30 locale.py(1682):     0x040f: "is_IS", # Icelandic
0.30 locale.py(1683):     0x0421: "id_ID", # Indonesian
0.30 locale.py(1684):     0x045d: "iu_CA", # Inuktitut - Syllabics
0.30 locale.py(1685):     0x085d: "iu_CA", # Inuktitut - Latin
0.30 locale.py(1686):     0x083c: "ga_IE", # Irish - Ireland
0.30 locale.py(1687):     0x0410: "it_IT", # Italian - Italy
0.30 locale.py(1688):     0x0810: "it_CH", # Italian - Switzerland
0.30 locale.py(1689):     0x0411: "ja_JP", # Japanese
0.30 locale.py(1690):     0x044b: "kn_IN", # Kannada - India
0.30 locale.py(1691):     0x043f: "kk_KZ", # Kazakh
0.30 locale.py(1692):     0x0453: "kh_KH", # Khmer - Cambodia
0.30 locale.py(1693):     0x0486: "qut_GT",# K'iche - Guatemala
0.30 locale.py(1694):     0x0487: "rw_RW", # Kinyarwanda - Rwanda
0.30 locale.py(1695):     0x0457: "kok_IN",# Konkani
0.30 locale.py(1696):     0x0412: "ko_KR", # Korean
0.30 locale.py(1697):     0x0440: "ky_KG", # Kyrgyz
0.30 locale.py(1698):     0x0454: "lo_LA", # Lao - Lao PDR
0.30 locale.py(1699):     0x0426: "lv_LV", # Latvian
0.30 locale.py(1700):     0x0427: "lt_LT", # Lithuanian
0.30 locale.py(1701):     0x082e: "dsb_DE",# Lower Sorbian - Germany
0.30 locale.py(1702):     0x046e: "lb_LU", # Luxembourgish
0.30 locale.py(1703):     0x042f: "mk_MK", # FYROM Macedonian
0.30 locale.py(1704):     0x043e: "ms_MY", # Malay - Malaysia
0.30 locale.py(1705):     0x083e: "ms_BN", # Malay - Brunei Darussalam
0.30 locale.py(1706):     0x044c: "ml_IN", # Malayalam - India
0.30 locale.py(1707):     0x043a: "mt_MT", # Maltese
0.30 locale.py(1708):     0x0481: "mi_NZ", # Maori
0.30 locale.py(1709):     0x047a: "arn_CL",# Mapudungun
0.30 locale.py(1710):     0x044e: "mr_IN", # Marathi
0.30 locale.py(1711):     0x047c: "moh_CA",# Mohawk - Canada
0.30 locale.py(1712):     0x0450: "mn_MN", # Mongolian - Cyrillic
0.30 locale.py(1713):     0x0850: "mn_CN", # Mongolian - PRC
0.30 locale.py(1714):     0x0461: "ne_NP", # Nepali
0.30 locale.py(1715):     0x0414: "nb_NO", # Norwegian - Bokmal
0.30 locale.py(1716):     0x0814: "nn_NO", # Norwegian - Nynorsk
0.30 locale.py(1717):     0x0482: "oc_FR", # Occitan - France
0.30 locale.py(1718):     0x0448: "or_IN", # Oriya - India
0.30 locale.py(1719):     0x0463: "ps_AF", # Pashto - Afghanistan
0.30 locale.py(1720):     0x0429: "fa_IR", # Persian
0.30 locale.py(1721):     0x0415: "pl_PL", # Polish
0.30 locale.py(1722):     0x0416: "pt_BR", # Portuguese - Brazil
0.30 locale.py(1723):     0x0816: "pt_PT", # Portuguese - Portugal
0.30 locale.py(1724):     0x0446: "pa_IN", # Punjabi
0.30 locale.py(1725):     0x046b: "quz_BO",# Quechua (Bolivia)
0.30 locale.py(1726):     0x086b: "quz_EC",# Quechua (Ecuador)
0.30 locale.py(1727):     0x0c6b: "quz_PE",# Quechua (Peru)
0.30 locale.py(1728):     0x0418: "ro_RO", # Romanian - Romania
0.30 locale.py(1729):     0x0417: "rm_CH", # Romansh
0.30 locale.py(1730):     0x0419: "ru_RU", # Russian
0.30 locale.py(1731):     0x243b: "smn_FI",# Sami Finland
0.30 locale.py(1732):     0x103b: "smj_NO",# Sami Norway
0.30 locale.py(1733):     0x143b: "smj_SE",# Sami Sweden
0.30 locale.py(1734):     0x043b: "se_NO", # Sami Northern Norway
0.30 locale.py(1735):     0x083b: "se_SE", # Sami Northern Sweden
0.30 locale.py(1736):     0x0c3b: "se_FI", # Sami Northern Finland
0.30 locale.py(1737):     0x203b: "sms_FI",# Sami Skolt
0.30 locale.py(1738):     0x183b: "sma_NO",# Sami Southern Norway
0.30 locale.py(1739):     0x1c3b: "sma_SE",# Sami Southern Sweden
0.30 locale.py(1740):     0x044f: "sa_IN", # Sanskrit
0.30 locale.py(1741):     0x0c1a: "sr_SP", # Serbian - Cyrillic
0.30 locale.py(1742):     0x1c1a: "sr_BA", # Serbian - Bosnia Cyrillic
0.30 locale.py(1743):     0x081a: "sr_SP", # Serbian - Latin
0.30 locale.py(1744):     0x181a: "sr_BA", # Serbian - Bosnia Latin
0.30 locale.py(1745):     0x045b: "si_LK", # Sinhala - Sri Lanka
0.30 locale.py(1746):     0x046c: "ns_ZA", # Northern Sotho
0.30 locale.py(1747):     0x0432: "tn_ZA", # Setswana - Southern Africa
0.30 locale.py(1748):     0x041b: "sk_SK", # Slovak
0.30 locale.py(1749):     0x0424: "sl_SI", # Slovenian
0.30 locale.py(1750):     0x040a: "es_ES", # Spanish - Spain
0.30 locale.py(1751):     0x080a: "es_MX", # Spanish - Mexico
0.30 locale.py(1752):     0x0c0a: "es_ES", # Spanish - Spain (Modern)
0.30 locale.py(1753):     0x100a: "es_GT", # Spanish - Guatemala
0.30 locale.py(1754):     0x140a: "es_CR", # Spanish - Costa Rica
0.30 locale.py(1755):     0x180a: "es_PA", # Spanish - Panama
0.30 locale.py(1756):     0x1c0a: "es_DO", # Spanish - Dominican Republic
0.30 locale.py(1757):     0x200a: "es_VE", # Spanish - Venezuela
0.30 locale.py(1758):     0x240a: "es_CO", # Spanish - Colombia
0.30 locale.py(1759):     0x280a: "es_PE", # Spanish - Peru
0.30 locale.py(1760):     0x2c0a: "es_AR", # Spanish - Argentina
0.30 locale.py(1761):     0x300a: "es_EC", # Spanish - Ecuador
0.30 locale.py(1762):     0x340a: "es_CL", # Spanish - Chile
0.30 locale.py(1763):     0x380a: "es_UR", # Spanish - Uruguay
0.30 locale.py(1764):     0x3c0a: "es_PY", # Spanish - Paraguay
0.30 locale.py(1765):     0x400a: "es_BO", # Spanish - Bolivia
0.30 locale.py(1766):     0x440a: "es_SV", # Spanish - El Salvador
0.30 locale.py(1767):     0x480a: "es_HN", # Spanish - Honduras
0.30 locale.py(1768):     0x4c0a: "es_NI", # Spanish - Nicaragua
0.30 locale.py(1769):     0x500a: "es_PR", # Spanish - Puerto Rico
0.30 locale.py(1770):     0x540a: "es_US", # Spanish - United States
0.30 locale.py(1772):     0x0441: "sw_KE", # Swahili
0.30 locale.py(1773):     0x041d: "sv_SE", # Swedish - Sweden
0.30 locale.py(1774):     0x081d: "sv_FI", # Swedish - Finland
0.30 locale.py(1775):     0x045a: "syr_SY",# Syriac
0.30 locale.py(1776):     0x0428: "tg_TJ", # Tajik - Cyrillic
0.30 locale.py(1777):     0x085f: "tmz_DZ",# Tamazight - Latin
0.30 locale.py(1778):     0x0449: "ta_IN", # Tamil
0.30 locale.py(1779):     0x0444: "tt_RU", # Tatar
0.30 locale.py(1780):     0x044a: "te_IN", # Telugu
0.30 locale.py(1781):     0x041e: "th_TH", # Thai
0.30 locale.py(1782):     0x0851: "bo_BT", # Tibetan - Bhutan
0.30 locale.py(1783):     0x0451: "bo_CN", # Tibetan - PRC
0.30 locale.py(1784):     0x041f: "tr_TR", # Turkish
0.30 locale.py(1785):     0x0442: "tk_TM", # Turkmen - Cyrillic
0.30 locale.py(1786):     0x0480: "ug_CN", # Uighur - Arabic
0.30 locale.py(1787):     0x0422: "uk_UA", # Ukrainian
0.30 locale.py(1788):     0x042e: "wen_DE",# Upper Sorbian - Germany
0.30 locale.py(1789):     0x0420: "ur_PK", # Urdu
0.30 locale.py(1790):     0x0820: "ur_IN", # Urdu - India
0.30 locale.py(1791):     0x0443: "uz_UZ", # Uzbek - Latin
0.30 locale.py(1792):     0x0843: "uz_UZ", # Uzbek - Cyrillic
0.30 locale.py(1793):     0x042a: "vi_VN", # Vietnamese
0.30 locale.py(1794):     0x0452: "cy_GB", # Welsh
0.30 locale.py(1795):     0x0488: "wo_SN", # Wolof - Senegal
0.30 locale.py(1796):     0x0434: "xh_ZA", # Xhosa - South Africa
0.30 locale.py(1797):     0x0485: "sah_RU",# Yakut - Cyrillic
0.30 locale.py(1798):     0x0478: "ii_CN", # Yi - PRC
0.30 locale.py(1799):     0x046a: "yo_NG", # Yoruba - Nigeria
0.30 locale.py(1800):     0x0435: "zu_ZA", # Zulu
0.30 locale.py(1803): def _print_locale():
0.30 locale.py(1861): try:
0.30 locale.py(1862):     LC_MESSAGES
0.30 locale.py(1866):     __all__.append("LC_MESSAGES")
0.30 locale.py(1868): if __name__=='__main__':
 --- modulename: copy, funcname: <module>
0.30 copy.py(49): """
0.30 copy.py(51): import types
0.30 copy.py(52): import weakref
 --- modulename: weakref, funcname: <module>
0.30 weakref.py(6): """
0.30 weakref.py(12): import UserDict
0.30 weakref.py(14): from _weakref import (
0.30 weakref.py(23): from _weakrefset import WeakSet
0.30 weakref.py(25): from exceptions import ReferenceError
0.30 weakref.py(28): ProxyTypes = (ProxyType, CallableProxyType)
0.30 weakref.py(30): __all__ = ["ref", "proxy", "getweakrefcount", "getweakrefs",
0.30 weakref.py(31):            "WeakKeyDictionary", "ReferenceError", "ReferenceType", "ProxyType",
0.30 weakref.py(32):            "CallableProxyType", "ProxyTypes", "WeakValueDictionary", 'WeakSet']
0.30 weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakValueDictionary
0.30 weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
0.30 weakref.py(40):     """
0.30 weakref.py(47):     def __init__(self, *args, **kw):
0.30 weakref.py(55):     def __getitem__(self, key):
0.30 weakref.py(62):     def __contains__(self, key):
0.30 weakref.py(69):     def has_key(self, key):
0.30 weakref.py(76):     def __repr__(self):
0.30 weakref.py(79):     def __setitem__(self, key, value):
0.30 weakref.py(82):     def copy(self):
0.30 weakref.py(90):     __copy__ = copy
0.30 weakref.py(92):     def __deepcopy__(self, memo):
0.30 weakref.py(101):     def get(self, key, default=None):
0.30 weakref.py(114):     def items(self):
0.30 weakref.py(122):     def iteritems(self):
0.30 weakref.py(128):     def iterkeys(self):
0.30 weakref.py(131):     def __iter__(self):
0.30 weakref.py(134):     def itervaluerefs(self):
0.30 weakref.py(146):     def itervalues(self):
0.30 weakref.py(152):     def popitem(self):
0.30 weakref.py(159):     def pop(self, key, *args):
0.30 weakref.py(171):     def setdefault(self, key, default=None):
0.30 weakref.py(180):     def update(self, dict=None, **kwargs):
0.30 weakref.py(190):     def valuerefs(self):
0.30 weakref.py(202):     def values(self):
0.30 weakref.py(211): class KeyedRef(ref):
 --- modulename: weakref, funcname: KeyedRef
0.30 weakref.py(211): class KeyedRef(ref):
0.30 weakref.py(219):     """
0.30 weakref.py(221):     __slots__ = "key",
0.30 weakref.py(223):     def __new__(type, ob, callback, key):
0.30 weakref.py(228):     def __init__(self, ob, callback, key):
0.30 weakref.py(232): class WeakKeyDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakKeyDictionary
0.30 weakref.py(232): class WeakKeyDictionary(UserDict.UserDict):
0.30 weakref.py(241):     """
0.30 weakref.py(243):     def __init__(self, dict=None):
0.30 weakref.py(252):     def __delitem__(self, key):
0.30 weakref.py(255):     def __getitem__(self, key):
0.30 weakref.py(258):     def __repr__(self):
0.30 weakref.py(261):     def __setitem__(self, key, value):
0.30 weakref.py(264):     def copy(self):
0.30 weakref.py(272):     __copy__ = copy
0.30 weakref.py(274):     def __deepcopy__(self, memo):
0.30 weakref.py(283):     def get(self, key, default=None):
0.30 weakref.py(286):     def has_key(self, key):
0.30 weakref.py(293):     def __contains__(self, key):
0.30 weakref.py(300):     def items(self):
0.30 weakref.py(308):     def iteritems(self):
0.30 weakref.py(314):     def iterkeyrefs(self):
0.30 weakref.py(326):     def iterkeys(self):
0.30 weakref.py(332):     def __iter__(self):
0.30 weakref.py(335):     def itervalues(self):
0.30 weakref.py(338):     def keyrefs(self):
0.30 weakref.py(350):     def keys(self):
0.30 weakref.py(358):     def popitem(self):
0.30 weakref.py(365):     def pop(self, key, *args):
0.30 weakref.py(368):     def setdefault(self, key, default=None):
0.30 weakref.py(371):     def update(self, dict=None, **kwargs):
0.30 copy.py(53): from copy_reg import dispatch_table
0.30 copy.py(55): class Error(Exception):
 --- modulename: copy, funcname: Error
0.30 copy.py(55): class Error(Exception):
0.30 copy.py(56):     pass
0.30 copy.py(57): error = Error   # backward compatibility
0.30 copy.py(59): try:
0.30 copy.py(60):     from org.python.core import PyStringMap
0.31 copy.py(61): except ImportError:
0.31 copy.py(62):     PyStringMap = None
0.31 copy.py(64): __all__ = ["Error", "copy", "deepcopy"]
0.31 copy.py(66): def copy(x):
0.31 copy.py(99): _copy_dispatch = d = {}
0.31 copy.py(101): def _copy_immutable(x):
0.31 copy.py(103): for t in (type(None), int, long, float, bool, str, tuple,
0.31 copy.py(104):           frozenset, type, xrange, types.ClassType,
0.31 copy.py(105):           types.BuiltinFunctionType, type(Ellipsis),
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(107):     d[t] = _copy_immutable
0.31 copy.py(106):           types.FunctionType, weakref.ref):
0.31 copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
0.31 copy.py(109):     t = getattr(types, name, None)
0.31 copy.py(110):     if t is not None:
0.31 copy.py(111):         d[t] = _copy_immutable
0.31 copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
0.31 copy.py(109):     t = getattr(types, name, None)
0.31 copy.py(110):     if t is not None:
0.31 copy.py(111):         d[t] = _copy_immutable
0.31 copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
0.31 copy.py(109):     t = getattr(types, name, None)
0.31 copy.py(110):     if t is not None:
0.31 copy.py(111):         d[t] = _copy_immutable
0.31 copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
0.31 copy.py(113): def _copy_with_constructor(x):
0.31 copy.py(115): for t in (list, dict, set):
0.31 copy.py(116):     d[t] = _copy_with_constructor
0.31 copy.py(115): for t in (list, dict, set):
0.31 copy.py(116):     d[t] = _copy_with_constructor
0.31 copy.py(115): for t in (list, dict, set):
0.31 copy.py(116):     d[t] = _copy_with_constructor
0.31 copy.py(115): for t in (list, dict, set):
0.31 copy.py(118): def _copy_with_copy_method(x):
0.31 copy.py(120): if PyStringMap is not None:
0.31 copy.py(123): def _copy_inst(x):
0.31 copy.py(141): d[types.InstanceType] = _copy_inst
0.31 copy.py(143): del d
0.31 copy.py(145): def deepcopy(x, memo=None, _nil=[]):
0.31 copy.py(196): _deepcopy_dispatch = d = {}
0.31 copy.py(198): def _deepcopy_atomic(x, memo):
0.31 copy.py(200): d[type(None)] = _deepcopy_atomic
0.31 copy.py(201): d[type(Ellipsis)] = _deepcopy_atomic
0.31 copy.py(202): d[int] = _deepcopy_atomic
0.31 copy.py(203): d[long] = _deepcopy_atomic
0.31 copy.py(204): d[float] = _deepcopy_atomic
0.31 copy.py(205): d[bool] = _deepcopy_atomic
0.31 copy.py(206): try:
0.31 copy.py(207):     d[complex] = _deepcopy_atomic
0.31 copy.py(210): d[str] = _deepcopy_atomic
0.31 copy.py(211): try:
0.31 copy.py(212):     d[unicode] = _deepcopy_atomic
0.31 copy.py(215): try:
0.31 copy.py(216):     d[types.CodeType] = _deepcopy_atomic
0.31 copy.py(219): d[type] = _deepcopy_atomic
0.31 copy.py(220): d[xrange] = _deepcopy_atomic
0.31 copy.py(221): d[types.ClassType] = _deepcopy_atomic
0.31 copy.py(222): d[types.BuiltinFunctionType] = _deepcopy_atomic
0.31 copy.py(223): d[types.FunctionType] = _deepcopy_atomic
0.31 copy.py(224): d[weakref.ref] = _deepcopy_atomic
0.31 copy.py(226): def _deepcopy_list(x, memo):
0.31 copy.py(232): d[list] = _deepcopy_list
0.31 copy.py(234): def _deepcopy_tuple(x, memo):
0.31 copy.py(251): d[tuple] = _deepcopy_tuple
0.31 copy.py(253): def _deepcopy_dict(x, memo):
0.31 copy.py(259): d[dict] = _deepcopy_dict
0.31 copy.py(260): if PyStringMap is not None:
0.31 copy.py(263): def _deepcopy_method(x, memo): # Copy instance methods
0.31 copy.py(265): _deepcopy_dispatch[types.MethodType] = _deepcopy_method
0.31 copy.py(267): def _keep_alive(x, memo):
0.31 copy.py(283): def _deepcopy_inst(x, memo):
0.31 copy.py(304): d[types.InstanceType] = _deepcopy_inst
0.31 copy.py(306): def _reconstruct(x, info, deep, memo=None):
0.31 copy.py(361): del d
0.31 copy.py(363): del types
0.31 copy.py(366): class _EmptyClass:
 --- modulename: copy, funcname: _EmptyClass
0.31 copy.py(366): class _EmptyClass:
0.31 copy.py(367):     pass
0.31 copy.py(369): def _test():
0.31 copy.py(432): if __name__ == '__main__':
 --- modulename: struct, funcname: <module>
0.31 struct.py(1): from _struct import *
0.31 struct.py(2): from _struct import _clearcache
0.31 struct.py(3): from _struct import __doc__
0.31 gettext.py(50): from errno import ENOENT
0.31 gettext.py(53): __all__ = ['NullTranslations', 'GNUTranslations', 'Catalog',
0.31 gettext.py(54):            'find', 'translation', 'install', 'textdomain', 'bindtextdomain',
0.31 gettext.py(55):            'dgettext', 'dngettext', 'gettext', 'ngettext',
0.31 gettext.py(58): _default_localedir = os.path.join(sys.prefix, 'share', 'locale')
 --- modulename: posixpath, funcname: join
0.31 posixpath.py(64):     path = a
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(72):     return path
0.32 gettext.py(61): def test(condition, true, false):
0.32 gettext.py(75): def c2py(plural):
0.32 gettext.py(130): def _expand_lang(locale):
0.32 gettext.py(173): class NullTranslations:
 --- modulename: gettext, funcname: NullTranslations
0.32 gettext.py(173): class NullTranslations:
0.32 gettext.py(174):     def __init__(self, fp=None):
0.32 gettext.py(182):     def _parse(self, fp):
0.32 gettext.py(185):     def add_fallback(self, fallback):
0.32 gettext.py(191):     def gettext(self, message):
0.32 gettext.py(196):     def lgettext(self, message):
0.32 gettext.py(201):     def ngettext(self, msgid1, msgid2, n):
0.32 gettext.py(209):     def lngettext(self, msgid1, msgid2, n):
0.32 gettext.py(217):     def ugettext(self, message):
0.32 gettext.py(222):     def ungettext(self, msgid1, msgid2, n):
0.32 gettext.py(230):     def info(self):
0.32 gettext.py(233):     def charset(self):
0.32 gettext.py(236):     def output_charset(self):
0.32 gettext.py(239):     def set_output_charset(self, charset):
0.32 gettext.py(242):     def install(self, unicode=False, names=None):
0.32 gettext.py(257): class GNUTranslations(NullTranslations):
 --- modulename: gettext, funcname: GNUTranslations
0.32 gettext.py(257): class GNUTranslations(NullTranslations):
0.32 gettext.py(259):     LE_MAGIC = 0x950412deL
0.32 gettext.py(260):     BE_MAGIC = 0xde120495L
0.32 gettext.py(262):     def _parse(self, fp):
0.32 gettext.py(343):     def gettext(self, message):
0.32 gettext.py(357):     def lgettext(self, message):
0.32 gettext.py(368):     def ngettext(self, msgid1, msgid2, n):
0.32 gettext.py(384):     def lngettext(self, msgid1, msgid2, n):
0.32 gettext.py(398):     def ugettext(self, message):
0.32 gettext.py(407):     def ungettext(self, msgid1, msgid2, n):
0.32 gettext.py(421): def find(domain, localedir=None, languages=None, all=0):
0.32 gettext.py(474): _translations = {}
0.32 gettext.py(476): def translation(domain, localedir=None, languages=None,
0.32 gettext.py(477):                 class_=None, fallback=False, codeset=None):
0.32 gettext.py(507): def install(domain, localedir=None, unicode=False, codeset=None, names=None):
0.32 gettext.py(514): _localedirs = {}
0.32 gettext.py(516): _localecodesets = {}
0.32 gettext.py(518): _current_domain = 'messages'
0.32 gettext.py(521): def textdomain(domain=None):
0.32 gettext.py(528): def bindtextdomain(domain, localedir=None):
0.32 gettext.py(535): def bind_textdomain_codeset(domain, codeset=None):
0.32 gettext.py(542): def dgettext(domain, message):
0.32 gettext.py(550): def ldgettext(domain, message):
0.32 gettext.py(558): def dngettext(domain, msgid1, msgid2, n):
0.32 gettext.py(569): def ldngettext(domain, msgid1, msgid2, n):
0.32 gettext.py(580): def gettext(message):
0.32 gettext.py(583): def lgettext(message):
0.32 gettext.py(586): def ngettext(msgid1, msgid2, n):
0.32 gettext.py(589): def lngettext(msgid1, msgid2, n):
0.32 gettext.py(606): Catalog = translation
0.32 optparse.py(94): _ = gettext
0.32 optparse.py(97): class OptParseError (Exception):
 --- modulename: optparse, funcname: OptParseError
0.32 optparse.py(97): class OptParseError (Exception):
0.32 optparse.py(98):     def __init__(self, msg):
0.32 optparse.py(101):     def __str__(self):
0.32 optparse.py(105): class OptionError (OptParseError):
 --- modulename: optparse, funcname: OptionError
0.32 optparse.py(105): class OptionError (OptParseError):
0.32 optparse.py(109):     """
0.32 optparse.py(111):     def __init__(self, msg, option):
0.32 optparse.py(115):     def __str__(self):
0.32 optparse.py(121): class OptionConflictError (OptionError):
 --- modulename: optparse, funcname: OptionConflictError
0.32 optparse.py(121): class OptionConflictError (OptionError):
0.32 optparse.py(124):     """
0.32 optparse.py(126): class OptionValueError (OptParseError):
 --- modulename: optparse, funcname: OptionValueError
0.32 optparse.py(126): class OptionValueError (OptParseError):
0.32 optparse.py(130):     """
0.32 optparse.py(132): class BadOptionError (OptParseError):
 --- modulename: optparse, funcname: BadOptionError
0.32 optparse.py(132): class BadOptionError (OptParseError):
0.32 optparse.py(135):     """
0.32 optparse.py(136):     def __init__(self, opt_str):
0.32 optparse.py(139):     def __str__(self):
0.32 optparse.py(142): class AmbiguousOptionError (BadOptionError):
 --- modulename: optparse, funcname: AmbiguousOptionError
0.32 optparse.py(142): class AmbiguousOptionError (BadOptionError):
0.32 optparse.py(145):     """
0.32 optparse.py(146):     def __init__(self, opt_str, possibilities):
0.32 optparse.py(150):     def __str__(self):
0.32 optparse.py(155): class HelpFormatter:
 --- modulename: optparse, funcname: HelpFormatter
0.32 optparse.py(155): class HelpFormatter:
0.32 optparse.py(196):     """
0.32 optparse.py(198):     NO_DEFAULT_VALUE = "none"
0.32 optparse.py(200):     def __init__(self,
0.32 optparse.py(224):     def set_parser(self, parser):
0.32 optparse.py(227):     def set_short_opt_delimiter(self, delim):
0.32 optparse.py(233):     def set_long_opt_delimiter(self, delim):
0.32 optparse.py(239):     def indent(self):
0.32 optparse.py(243):     def dedent(self):
0.32 optparse.py(248):     def format_usage(self, usage):
0.32 optparse.py(251):     def format_heading(self, heading):
0.32 optparse.py(254):     def _format_text(self, text):
0.32 optparse.py(266):     def format_description(self, description):
0.32 optparse.py(272):     def format_epilog(self, epilog):
0.32 optparse.py(279):     def expand_default(self, option):
0.32 optparse.py(289):     def format_option(self, option):
0.32 optparse.py(324):     def store_option_strings(self, parser):
0.32 optparse.py(342):     def format_option_strings(self, option):
0.32 optparse.py(361): class IndentedHelpFormatter (HelpFormatter):
 --- modulename: optparse, funcname: IndentedHelpFormatter
0.32 optparse.py(361): class IndentedHelpFormatter (HelpFormatter):
0.32 optparse.py(363):     """
0.32 optparse.py(366):                  indent_increment=2,
0.32 optparse.py(367):                  max_help_position=24,
0.32 optparse.py(368):                  width=None,
0.32 optparse.py(369):                  short_first=1):
0.32 optparse.py(373):     def format_usage(self, usage):
0.32 optparse.py(376):     def format_heading(self, heading):
0.32 optparse.py(380): class TitledHelpFormatter (HelpFormatter):
 --- modulename: optparse, funcname: TitledHelpFormatter
0.32 optparse.py(380): class TitledHelpFormatter (HelpFormatter):
0.32 optparse.py(382):     """
0.32 optparse.py(385):                  indent_increment=0,
0.32 optparse.py(386):                  max_help_position=24,
0.32 optparse.py(387):                  width=None,
0.32 optparse.py(388):                  short_first=0):
0.32 optparse.py(392):     def format_usage(self, usage):
0.32 optparse.py(395):     def format_heading(self, heading):
0.32 optparse.py(399): def _parse_num(val, type):
0.32 optparse.py(412): def _parse_int(val):
0.32 optparse.py(415): def _parse_long(val):
0.32 optparse.py(418): _builtin_cvt = { "int" : (_parse_int, _("integer")),
 --- modulename: gettext, funcname: gettext
0.32 gettext.py(581):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
0.32 gettext.py(543):     try:
0.32 gettext.py(544):         t = translation(domain, _localedirs.get(domain, None),
0.32 gettext.py(545):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
0.32 gettext.py(478):     if class_ is None:
0.32 gettext.py(479):         class_ = GNUTranslations
0.32 gettext.py(480):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
0.32 gettext.py(423):     if localedir is None:
0.32 gettext.py(424):         localedir = _default_localedir
0.32 gettext.py(425):     if languages is None:
0.32 gettext.py(426):         languages = []
0.32 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.32 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.32 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.32 UserDict.py(71):         return key in self.data
0.32 UserDict.py(60):             return failobj
0.32 gettext.py(429):             if val:
0.32 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.32 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.32 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.32 UserDict.py(71):         return key in self.data
0.32 UserDict.py(60):             return failobj
0.32 gettext.py(429):             if val:
0.32 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.32 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.32 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.32 UserDict.py(71):         return key in self.data
0.32 UserDict.py(60):             return failobj
0.32 gettext.py(429):             if val:
0.32 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.32 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.32 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.32 UserDict.py(71):         return key in self.data
0.32 UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
0.32 UserDict.py(19):         if key in self.data:
0.32 UserDict.py(20):             return self.data[key]
0.32 gettext.py(429):             if val:
0.32 gettext.py(430):                 languages = val.split(':')
0.32 gettext.py(431):                 break
0.32 gettext.py(432):         if 'C' not in languages:
0.32 gettext.py(433):             languages.append('C')
0.32 gettext.py(435):     nelangs = []
0.32 gettext.py(436):     for lang in languages:
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.32 gettext.py(131):     from locale import normalize
0.32 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.32 locale.py(356):     if isinstance(localename, unicode):
0.32 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.32 locale.py(359):     if ':' in fullname:
0.32 locale.py(362):     if '.' in fullname:
0.32 locale.py(363):         langname, encoding = fullname.split('.')[:2]
0.32 locale.py(364):         fullname = langname + '.' + encoding
0.32 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.32 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.32 locale.py(372):     lookup_name = langname + '.' + encoding
0.32 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.32 locale.py(374):     if code is not None:
0.32 locale.py(379):     code = locale_alias.get(langname, None)
0.32 locale.py(380):     if code is not None:
0.32 locale.py(382):         if '.' in code:
0.32 locale.py(383):             langname, defenc = code.split('.')
0.32 locale.py(387):         if encoding:
0.32 locale.py(389):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
0.32 __init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
0.32 __init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
0.32 locale.py(391):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
0.32 locale.py(392):                                                           norm_encoding)
0.32 locale.py(394):             encoding = locale_encoding_alias.get(norm_encoding,
0.32 locale.py(395):                                                  norm_encoding)
0.32 locale.py(399):         if encoding:
0.32 locale.py(400):             return langname + '.' + encoding
0.32 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.32 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.32 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.32 gettext.py(137):     mask = 0
0.32 gettext.py(138):     pos = locale.find('@')
0.32 gettext.py(139):     if pos >= 0:
0.32 gettext.py(144):         modifier = ''
0.32 gettext.py(145):     pos = locale.find('.')
0.32 gettext.py(146):     if pos >= 0:
0.32 gettext.py(147):         codeset = locale[pos:]
0.32 gettext.py(148):         locale = locale[:pos]
0.32 gettext.py(149):         mask |= COMPONENT_CODESET
0.32 gettext.py(152):     pos = locale.find('_')
0.32 gettext.py(153):     if pos >= 0:
0.32 gettext.py(154):         territory = locale[pos:]
0.32 gettext.py(155):         locale = locale[:pos]
0.32 gettext.py(156):         mask |= COMPONENT_TERRITORY
0.32 gettext.py(159):     language = locale
0.32 gettext.py(160):     ret = []
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.32 gettext.py(163):             val = language
0.32 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.32 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.32 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.32 gettext.py(167):             ret.append(val)
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.32 gettext.py(163):             val = language
0.32 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.32 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.32 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.32 gettext.py(167):             ret.append(val)
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.32 gettext.py(163):             val = language
0.32 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.32 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.32 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.32 gettext.py(167):             ret.append(val)
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.32 gettext.py(163):             val = language
0.32 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.32 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.32 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.32 gettext.py(167):             ret.append(val)
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(168):     ret.reverse()
0.32 gettext.py(169):     return ret
0.32 gettext.py(438):             if nelang not in nelangs:
0.32 gettext.py(439):                 nelangs.append(nelang)
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
0.32 gettext.py(438):             if nelang not in nelangs:
0.32 gettext.py(439):                 nelangs.append(nelang)
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
0.32 gettext.py(438):             if nelang not in nelangs:
0.32 gettext.py(439):                 nelangs.append(nelang)
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
0.32 gettext.py(438):             if nelang not in nelangs:
0.32 gettext.py(439):                 nelangs.append(nelang)
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
0.32 gettext.py(436):     for lang in languages:
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.32 gettext.py(131):     from locale import normalize
0.32 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.32 locale.py(356):     if isinstance(localename, unicode):
0.32 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.32 locale.py(359):     if ':' in fullname:
0.32 locale.py(362):     if '.' in fullname:
0.32 locale.py(366):         langname = fullname
0.32 locale.py(367):         encoding = ''
0.32 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.32 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.32 locale.py(372):     lookup_name = langname + '.' + encoding
0.32 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.32 locale.py(374):     if code is not None:
0.32 locale.py(379):     code = locale_alias.get(langname, None)
0.32 locale.py(380):     if code is not None:
0.32 locale.py(382):         if '.' in code:
0.32 locale.py(385):             langname = code
0.32 locale.py(386):             defenc = ''
0.32 locale.py(387):         if encoding:
0.32 locale.py(397):             encoding = defenc
0.32 locale.py(399):         if encoding:
0.32 locale.py(402):             return langname
0.32 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.32 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.32 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.32 gettext.py(137):     mask = 0
0.32 gettext.py(138):     pos = locale.find('@')
0.32 gettext.py(139):     if pos >= 0:
0.32 gettext.py(144):         modifier = ''
0.32 gettext.py(145):     pos = locale.find('.')
0.32 gettext.py(146):     if pos >= 0:
0.32 gettext.py(151):         codeset = ''
0.32 gettext.py(152):     pos = locale.find('_')
0.32 gettext.py(153):     if pos >= 0:
0.32 gettext.py(158):         territory = ''
0.32 gettext.py(159):     language = locale
0.32 gettext.py(160):     ret = []
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.32 gettext.py(163):             val = language
0.32 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.32 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.32 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.32 gettext.py(167):             ret.append(val)
0.32 gettext.py(161):     for i in range(mask+1):
0.32 gettext.py(168):     ret.reverse()
0.32 gettext.py(169):     return ret
0.32 gettext.py(438):             if nelang not in nelangs:
0.32 gettext.py(439):                 nelangs.append(nelang)
0.32 gettext.py(437):         for nelang in _expand_lang(lang):
0.32 gettext.py(436):     for lang in languages:
0.32 gettext.py(441):     if all:
0.32 gettext.py(442):         result = []
0.32 gettext.py(445):     for lang in nelangs:
0.32 gettext.py(446):         if lang == 'C':
0.32 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.32 posixpath.py(64):     path = a
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(72):     return path
0.32 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.32 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.32 posixpath.py(64):     path = a
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(66):         if b.startswith('/'):
0.32 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.32 posixpath.py(71):             path += '/' + b
0.32 posixpath.py(65):     for b in p:
0.32 posixpath.py(72):     return path
0.32 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.32 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(447):             break
0.33 gettext.py(469):     return result
0.33 gettext.py(481):     if not mofiles:
0.33 gettext.py(482):         if fallback:
0.33 gettext.py(484):         raise IOError(ENOENT, 'No translation file found for domain', domain)
0.33 gettext.py(546):     except IOError:
0.33 gettext.py(547):         return message
0.33 optparse.py(419):                  "long" : (_parse_long, _("long integer")),
 --- modulename: gettext, funcname: gettext
0.33 gettext.py(581):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
0.33 gettext.py(543):     try:
0.33 gettext.py(544):         t = translation(domain, _localedirs.get(domain, None),
0.33 gettext.py(545):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
0.33 gettext.py(478):     if class_ is None:
0.33 gettext.py(479):         class_ = GNUTranslations
0.33 gettext.py(480):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
0.33 gettext.py(423):     if localedir is None:
0.33 gettext.py(424):         localedir = _default_localedir
0.33 gettext.py(425):     if languages is None:
0.33 gettext.py(426):         languages = []
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
0.33 UserDict.py(19):         if key in self.data:
0.33 UserDict.py(20):             return self.data[key]
0.33 gettext.py(429):             if val:
0.33 gettext.py(430):                 languages = val.split(':')
0.33 gettext.py(431):                 break
0.33 gettext.py(432):         if 'C' not in languages:
0.33 gettext.py(433):             languages.append('C')
0.33 gettext.py(435):     nelangs = []
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.33 gettext.py(131):     from locale import normalize
0.33 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.33 locale.py(356):     if isinstance(localename, unicode):
0.33 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.33 locale.py(359):     if ':' in fullname:
0.33 locale.py(362):     if '.' in fullname:
0.33 locale.py(363):         langname, encoding = fullname.split('.')[:2]
0.33 locale.py(364):         fullname = langname + '.' + encoding
0.33 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.33 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.33 locale.py(372):     lookup_name = langname + '.' + encoding
0.33 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.33 locale.py(374):     if code is not None:
0.33 locale.py(379):     code = locale_alias.get(langname, None)
0.33 locale.py(380):     if code is not None:
0.33 locale.py(382):         if '.' in code:
0.33 locale.py(383):             langname, defenc = code.split('.')
0.33 locale.py(387):         if encoding:
0.33 locale.py(389):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
0.33 __init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
0.33 __init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
0.33 locale.py(391):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
0.33 locale.py(392):                                                           norm_encoding)
0.33 locale.py(394):             encoding = locale_encoding_alias.get(norm_encoding,
0.33 locale.py(395):                                                  norm_encoding)
0.33 locale.py(399):         if encoding:
0.33 locale.py(400):             return langname + '.' + encoding
0.33 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.33 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.33 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.33 gettext.py(137):     mask = 0
0.33 gettext.py(138):     pos = locale.find('@')
0.33 gettext.py(139):     if pos >= 0:
0.33 gettext.py(144):         modifier = ''
0.33 gettext.py(145):     pos = locale.find('.')
0.33 gettext.py(146):     if pos >= 0:
0.33 gettext.py(147):         codeset = locale[pos:]
0.33 gettext.py(148):         locale = locale[:pos]
0.33 gettext.py(149):         mask |= COMPONENT_CODESET
0.33 gettext.py(152):     pos = locale.find('_')
0.33 gettext.py(153):     if pos >= 0:
0.33 gettext.py(154):         territory = locale[pos:]
0.33 gettext.py(155):         locale = locale[:pos]
0.33 gettext.py(156):         mask |= COMPONENT_TERRITORY
0.33 gettext.py(159):     language = locale
0.33 gettext.py(160):     ret = []
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(168):     ret.reverse()
0.33 gettext.py(169):     return ret
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.33 gettext.py(131):     from locale import normalize
0.33 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.33 locale.py(356):     if isinstance(localename, unicode):
0.33 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.33 locale.py(359):     if ':' in fullname:
0.33 locale.py(362):     if '.' in fullname:
0.33 locale.py(366):         langname = fullname
0.33 locale.py(367):         encoding = ''
0.33 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.33 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.33 locale.py(372):     lookup_name = langname + '.' + encoding
0.33 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.33 locale.py(374):     if code is not None:
0.33 locale.py(379):     code = locale_alias.get(langname, None)
0.33 locale.py(380):     if code is not None:
0.33 locale.py(382):         if '.' in code:
0.33 locale.py(385):             langname = code
0.33 locale.py(386):             defenc = ''
0.33 locale.py(387):         if encoding:
0.33 locale.py(397):             encoding = defenc
0.33 locale.py(399):         if encoding:
0.33 locale.py(402):             return langname
0.33 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.33 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.33 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.33 gettext.py(137):     mask = 0
0.33 gettext.py(138):     pos = locale.find('@')
0.33 gettext.py(139):     if pos >= 0:
0.33 gettext.py(144):         modifier = ''
0.33 gettext.py(145):     pos = locale.find('.')
0.33 gettext.py(146):     if pos >= 0:
0.33 gettext.py(151):         codeset = ''
0.33 gettext.py(152):     pos = locale.find('_')
0.33 gettext.py(153):     if pos >= 0:
0.33 gettext.py(158):         territory = ''
0.33 gettext.py(159):     language = locale
0.33 gettext.py(160):     ret = []
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(168):     ret.reverse()
0.33 gettext.py(169):     return ret
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(441):     if all:
0.33 gettext.py(442):         result = []
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(447):             break
0.33 gettext.py(469):     return result
0.33 gettext.py(481):     if not mofiles:
0.33 gettext.py(482):         if fallback:
0.33 gettext.py(484):         raise IOError(ENOENT, 'No translation file found for domain', domain)
0.33 gettext.py(546):     except IOError:
0.33 gettext.py(547):         return message
0.33 optparse.py(420):                  "float" : (float, _("floating-point")),
 --- modulename: gettext, funcname: gettext
0.33 gettext.py(581):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
0.33 gettext.py(543):     try:
0.33 gettext.py(544):         t = translation(domain, _localedirs.get(domain, None),
0.33 gettext.py(545):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
0.33 gettext.py(478):     if class_ is None:
0.33 gettext.py(479):         class_ = GNUTranslations
0.33 gettext.py(480):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
0.33 gettext.py(423):     if localedir is None:
0.33 gettext.py(424):         localedir = _default_localedir
0.33 gettext.py(425):     if languages is None:
0.33 gettext.py(426):         languages = []
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(60):             return failobj
0.33 gettext.py(429):             if val:
0.33 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.33 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.33 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.33 UserDict.py(71):         return key in self.data
0.33 UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
0.33 UserDict.py(19):         if key in self.data:
0.33 UserDict.py(20):             return self.data[key]
0.33 gettext.py(429):             if val:
0.33 gettext.py(430):                 languages = val.split(':')
0.33 gettext.py(431):                 break
0.33 gettext.py(432):         if 'C' not in languages:
0.33 gettext.py(433):             languages.append('C')
0.33 gettext.py(435):     nelangs = []
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.33 gettext.py(131):     from locale import normalize
0.33 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.33 locale.py(356):     if isinstance(localename, unicode):
0.33 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.33 locale.py(359):     if ':' in fullname:
0.33 locale.py(362):     if '.' in fullname:
0.33 locale.py(363):         langname, encoding = fullname.split('.')[:2]
0.33 locale.py(364):         fullname = langname + '.' + encoding
0.33 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.33 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.33 locale.py(372):     lookup_name = langname + '.' + encoding
0.33 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.33 locale.py(374):     if code is not None:
0.33 locale.py(379):     code = locale_alias.get(langname, None)
0.33 locale.py(380):     if code is not None:
0.33 locale.py(382):         if '.' in code:
0.33 locale.py(383):             langname, defenc = code.split('.')
0.33 locale.py(387):         if encoding:
0.33 locale.py(389):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
0.33 __init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
0.33 __init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
0.33 locale.py(391):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
0.33 locale.py(392):                                                           norm_encoding)
0.33 locale.py(394):             encoding = locale_encoding_alias.get(norm_encoding,
0.33 locale.py(395):                                                  norm_encoding)
0.33 locale.py(399):         if encoding:
0.33 locale.py(400):             return langname + '.' + encoding
0.33 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.33 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.33 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.33 gettext.py(137):     mask = 0
0.33 gettext.py(138):     pos = locale.find('@')
0.33 gettext.py(139):     if pos >= 0:
0.33 gettext.py(144):         modifier = ''
0.33 gettext.py(145):     pos = locale.find('.')
0.33 gettext.py(146):     if pos >= 0:
0.33 gettext.py(147):         codeset = locale[pos:]
0.33 gettext.py(148):         locale = locale[:pos]
0.33 gettext.py(149):         mask |= COMPONENT_CODESET
0.33 gettext.py(152):     pos = locale.find('_')
0.33 gettext.py(153):     if pos >= 0:
0.33 gettext.py(154):         territory = locale[pos:]
0.33 gettext.py(155):         locale = locale[:pos]
0.33 gettext.py(156):         mask |= COMPONENT_TERRITORY
0.33 gettext.py(159):     language = locale
0.33 gettext.py(160):     ret = []
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(168):     ret.reverse()
0.33 gettext.py(169):     return ret
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.33 gettext.py(131):     from locale import normalize
0.33 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.33 locale.py(356):     if isinstance(localename, unicode):
0.33 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.33 locale.py(359):     if ':' in fullname:
0.33 locale.py(362):     if '.' in fullname:
0.33 locale.py(366):         langname = fullname
0.33 locale.py(367):         encoding = ''
0.33 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.33 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.33 locale.py(372):     lookup_name = langname + '.' + encoding
0.33 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.33 locale.py(374):     if code is not None:
0.33 locale.py(379):     code = locale_alias.get(langname, None)
0.33 locale.py(380):     if code is not None:
0.33 locale.py(382):         if '.' in code:
0.33 locale.py(385):             langname = code
0.33 locale.py(386):             defenc = ''
0.33 locale.py(387):         if encoding:
0.33 locale.py(397):             encoding = defenc
0.33 locale.py(399):         if encoding:
0.33 locale.py(402):             return langname
0.33 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.33 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.33 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.33 gettext.py(137):     mask = 0
0.33 gettext.py(138):     pos = locale.find('@')
0.33 gettext.py(139):     if pos >= 0:
0.33 gettext.py(144):         modifier = ''
0.33 gettext.py(145):     pos = locale.find('.')
0.33 gettext.py(146):     if pos >= 0:
0.33 gettext.py(151):         codeset = ''
0.33 gettext.py(152):     pos = locale.find('_')
0.33 gettext.py(153):     if pos >= 0:
0.33 gettext.py(158):         territory = ''
0.33 gettext.py(159):     language = locale
0.33 gettext.py(160):     ret = []
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.33 gettext.py(163):             val = language
0.33 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.33 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.33 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.33 gettext.py(167):             ret.append(val)
0.33 gettext.py(161):     for i in range(mask+1):
0.33 gettext.py(168):     ret.reverse()
0.33 gettext.py(169):     return ret
0.33 gettext.py(438):             if nelang not in nelangs:
0.33 gettext.py(439):                 nelangs.append(nelang)
0.33 gettext.py(437):         for nelang in _expand_lang(lang):
0.33 gettext.py(436):     for lang in languages:
0.33 gettext.py(441):     if all:
0.33 gettext.py(442):         result = []
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.33 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(72):     return path
0.33 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.33 genericpath.py(17):     try:
0.33 genericpath.py(18):         os.stat(path)
0.33 genericpath.py(19):     except os.error:
0.33 genericpath.py(20):         return False
0.33 gettext.py(445):     for lang in nelangs:
0.33 gettext.py(446):         if lang == 'C':
0.33 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.33 posixpath.py(64):     path = a
0.33 posixpath.py(65):     for b in p:
0.33 posixpath.py(66):         if b.startswith('/'):
0.33 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.33 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.34 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(447):             break
0.34 gettext.py(469):     return result
0.34 gettext.py(481):     if not mofiles:
0.34 gettext.py(482):         if fallback:
0.34 gettext.py(484):         raise IOError(ENOENT, 'No translation file found for domain', domain)
0.34 gettext.py(546):     except IOError:
0.34 gettext.py(547):         return message
0.34 optparse.py(421):                  "complex" : (complex, _("complex")) }
 --- modulename: gettext, funcname: gettext
0.34 gettext.py(581):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
0.34 gettext.py(543):     try:
0.34 gettext.py(544):         t = translation(domain, _localedirs.get(domain, None),
0.34 gettext.py(545):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
0.34 gettext.py(478):     if class_ is None:
0.34 gettext.py(479):         class_ = GNUTranslations
0.34 gettext.py(480):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
0.34 gettext.py(423):     if localedir is None:
0.34 gettext.py(424):         localedir = _default_localedir
0.34 gettext.py(425):     if languages is None:
0.34 gettext.py(426):         languages = []
0.34 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.34 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.34 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.34 UserDict.py(71):         return key in self.data
0.34 UserDict.py(60):             return failobj
0.34 gettext.py(429):             if val:
0.34 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.34 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.34 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.34 UserDict.py(71):         return key in self.data
0.34 UserDict.py(60):             return failobj
0.34 gettext.py(429):             if val:
0.34 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.34 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.34 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.34 UserDict.py(71):         return key in self.data
0.34 UserDict.py(60):             return failobj
0.34 gettext.py(429):             if val:
0.34 gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
0.34 gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
0.34 UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
0.34 UserDict.py(71):         return key in self.data
0.34 UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
0.34 UserDict.py(19):         if key in self.data:
0.34 UserDict.py(20):             return self.data[key]
0.34 gettext.py(429):             if val:
0.34 gettext.py(430):                 languages = val.split(':')
0.34 gettext.py(431):                 break
0.34 gettext.py(432):         if 'C' not in languages:
0.34 gettext.py(433):             languages.append('C')
0.34 gettext.py(435):     nelangs = []
0.34 gettext.py(436):     for lang in languages:
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.34 gettext.py(131):     from locale import normalize
0.34 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.34 locale.py(356):     if isinstance(localename, unicode):
0.34 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.34 locale.py(359):     if ':' in fullname:
0.34 locale.py(362):     if '.' in fullname:
0.34 locale.py(363):         langname, encoding = fullname.split('.')[:2]
0.34 locale.py(364):         fullname = langname + '.' + encoding
0.34 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.34 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.34 locale.py(372):     lookup_name = langname + '.' + encoding
0.34 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.34 locale.py(374):     if code is not None:
0.34 locale.py(379):     code = locale_alias.get(langname, None)
0.34 locale.py(380):     if code is not None:
0.34 locale.py(382):         if '.' in code:
0.34 locale.py(383):             langname, defenc = code.split('.')
0.34 locale.py(387):         if encoding:
0.34 locale.py(389):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
0.34 __init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
0.34 __init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
0.34 locale.py(391):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
0.34 locale.py(392):                                                           norm_encoding)
0.34 locale.py(394):             encoding = locale_encoding_alias.get(norm_encoding,
0.34 locale.py(395):                                                  norm_encoding)
0.34 locale.py(399):         if encoding:
0.34 locale.py(400):             return langname + '.' + encoding
0.34 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.34 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.34 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.34 gettext.py(137):     mask = 0
0.34 gettext.py(138):     pos = locale.find('@')
0.34 gettext.py(139):     if pos >= 0:
0.34 gettext.py(144):         modifier = ''
0.34 gettext.py(145):     pos = locale.find('.')
0.34 gettext.py(146):     if pos >= 0:
0.34 gettext.py(147):         codeset = locale[pos:]
0.34 gettext.py(148):         locale = locale[:pos]
0.34 gettext.py(149):         mask |= COMPONENT_CODESET
0.34 gettext.py(152):     pos = locale.find('_')
0.34 gettext.py(153):     if pos >= 0:
0.34 gettext.py(154):         territory = locale[pos:]
0.34 gettext.py(155):         locale = locale[:pos]
0.34 gettext.py(156):         mask |= COMPONENT_TERRITORY
0.34 gettext.py(159):     language = locale
0.34 gettext.py(160):     ret = []
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.34 gettext.py(163):             val = language
0.34 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.34 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.34 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.34 gettext.py(167):             ret.append(val)
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.34 gettext.py(163):             val = language
0.34 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.34 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.34 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.34 gettext.py(167):             ret.append(val)
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.34 gettext.py(163):             val = language
0.34 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.34 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.34 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.34 gettext.py(167):             ret.append(val)
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.34 gettext.py(163):             val = language
0.34 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.34 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.34 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.34 gettext.py(167):             ret.append(val)
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(168):     ret.reverse()
0.34 gettext.py(169):     return ret
0.34 gettext.py(438):             if nelang not in nelangs:
0.34 gettext.py(439):                 nelangs.append(nelang)
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
0.34 gettext.py(438):             if nelang not in nelangs:
0.34 gettext.py(439):                 nelangs.append(nelang)
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
0.34 gettext.py(438):             if nelang not in nelangs:
0.34 gettext.py(439):                 nelangs.append(nelang)
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
0.34 gettext.py(438):             if nelang not in nelangs:
0.34 gettext.py(439):                 nelangs.append(nelang)
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
0.34 gettext.py(436):     for lang in languages:
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
0.34 gettext.py(131):     from locale import normalize
0.34 gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
0.34 locale.py(356):     if isinstance(localename, unicode):
0.34 locale.py(358):     fullname = localename.translate(_ascii_lower_map)
0.34 locale.py(359):     if ':' in fullname:
0.34 locale.py(362):     if '.' in fullname:
0.34 locale.py(366):         langname = fullname
0.34 locale.py(367):         encoding = ''
0.34 locale.py(370):     norm_encoding = encoding.replace('-', '')
0.34 locale.py(371):     norm_encoding = norm_encoding.replace('_', '')
0.34 locale.py(372):     lookup_name = langname + '.' + encoding
0.34 locale.py(373):     code = locale_alias.get(lookup_name, None)
0.34 locale.py(374):     if code is not None:
0.34 locale.py(379):     code = locale_alias.get(langname, None)
0.34 locale.py(380):     if code is not None:
0.34 locale.py(382):         if '.' in code:
0.34 locale.py(385):             langname = code
0.34 locale.py(386):             defenc = ''
0.34 locale.py(387):         if encoding:
0.34 locale.py(397):             encoding = defenc
0.34 locale.py(399):         if encoding:
0.34 locale.py(402):             return langname
0.34 gettext.py(133):     COMPONENT_CODESET   = 1 << 0
0.34 gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
0.34 gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
0.34 gettext.py(137):     mask = 0
0.34 gettext.py(138):     pos = locale.find('@')
0.34 gettext.py(139):     if pos >= 0:
0.34 gettext.py(144):         modifier = ''
0.34 gettext.py(145):     pos = locale.find('.')
0.34 gettext.py(146):     if pos >= 0:
0.34 gettext.py(151):         codeset = ''
0.34 gettext.py(152):     pos = locale.find('_')
0.34 gettext.py(153):     if pos >= 0:
0.34 gettext.py(158):         territory = ''
0.34 gettext.py(159):     language = locale
0.34 gettext.py(160):     ret = []
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
0.34 gettext.py(163):             val = language
0.34 gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
0.34 gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
0.34 gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
0.34 gettext.py(167):             ret.append(val)
0.34 gettext.py(161):     for i in range(mask+1):
0.34 gettext.py(168):     ret.reverse()
0.34 gettext.py(169):     return ret
0.34 gettext.py(438):             if nelang not in nelangs:
0.34 gettext.py(439):                 nelangs.append(nelang)
0.34 gettext.py(437):         for nelang in _expand_lang(lang):
0.34 gettext.py(436):     for lang in languages:
0.34 gettext.py(441):     if all:
0.34 gettext.py(442):         result = []
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.34 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.34 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.34 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(449):         mofile_lp = os.path.join("/usr/share/locale-langpack", lang,
0.34 gettext.py(450):                                'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
0.34 posixpath.py(64):     path = a
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(66):         if b.startswith('/'):
0.34 posixpath.py(68):         elif path == '' or path.endswith('/'):
0.34 posixpath.py(71):             path += '/' + b
0.34 posixpath.py(65):     for b in p:
0.34 posixpath.py(72):     return path
0.34 gettext.py(456):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(463):         if os.path.exists(mofile_lp): 
 --- modulename: genericpath, funcname: exists
0.34 genericpath.py(17):     try:
0.34 genericpath.py(18):         os.stat(path)
0.34 genericpath.py(19):     except os.error:
0.34 genericpath.py(20):         return False
0.34 gettext.py(445):     for lang in nelangs:
0.34 gettext.py(446):         if lang == 'C':
0.34 gettext.py(447):             break
0.34 gettext.py(469):     return result
0.34 gettext.py(481):     if not mofiles:
0.34 gettext.py(482):         if fallback:
0.34 gettext.py(484):         raise IOError(ENOENT, 'No translation file found for domain', domain)
0.34 gettext.py(546):     except IOError:
0.34 gettext.py(547):         return message
0.34 optparse.py(423): def check_builtin(option, opt, value):
0.34 optparse.py(431): def check_choice(option, opt, value):
0.34 optparse.py(442): NO_DEFAULT = ("NO", "DEFAULT")
0.34 optparse.py(445): class Option:
 --- modulename: optparse, funcname: Option
0.34 optparse.py(445): class Option:
0.34 optparse.py(463):     """
0.34 optparse.py(467):     ATTRS = ['action',
0.34 optparse.py(468):              'type',
0.34 optparse.py(469):              'dest',
0.34 optparse.py(470):              'default',
0.34 optparse.py(471):              'nargs',
0.34 optparse.py(472):              'const',
0.34 optparse.py(473):              'choices',
0.34 optparse.py(474):              'callback',
0.34 optparse.py(475):              'callback_args',
0.34 optparse.py(476):              'callback_kwargs',
0.34 optparse.py(477):              'help',
0.34 optparse.py(478):              'metavar']
0.34 optparse.py(491):                "version")
0.34 optparse.py(502):                      "count")
0.34 optparse.py(508):                      "callback")
0.34 optparse.py(513):                             "append")
0.34 optparse.py(517):                      "append_const")
0.34 optparse.py(521):     TYPES = ("string", "int", "long", "float", "complex", "choice")
0.34 optparse.py(539):     TYPE_CHECKER = { "int"    : check_builtin,
0.34 optparse.py(540):                      "long"   : check_builtin,
0.34 optparse.py(541):                      "float"  : check_builtin,
0.34 optparse.py(542):                      "complex": check_builtin,
0.34 optparse.py(543):                      "choice" : check_choice,
0.34 optparse.py(555):     CHECK_METHODS = None
0.34 optparse.py(560):     def __init__(self, *opts, **attrs):
0.34 optparse.py(579):     def _check_opt_strings(self, opts):
0.34 optparse.py(588):     def _set_opt_strings(self, opts):
0.34 optparse.py(609):     def _set_attrs(self, attrs):
0.34 optparse.py(629):     def _check_action(self):
0.34 optparse.py(635):     def _check_type(self):
0.34 optparse.py(665):     def _check_choice(self):
0.34 optparse.py(678):     def _check_dest(self):
0.34 optparse.py(693):     def _check_const(self):
0.34 optparse.py(699):     def _check_nargs(self):
0.34 optparse.py(708):     def _check_callback(self):
0.34 optparse.py(736):     CHECK_METHODS = [_check_action,
0.34 optparse.py(737):                      _check_type,
0.34 optparse.py(738):                      _check_choice,
0.34 optparse.py(739):                      _check_dest,
0.34 optparse.py(740):                      _check_const,
0.34 optparse.py(741):                      _check_nargs,
0.34 optparse.py(742):                      _check_callback]
0.34 optparse.py(747):     def __str__(self):
0.34 optparse.py(750):     __repr__ = _repr
0.34 optparse.py(752):     def takes_value(self):
0.34 optparse.py(755):     def get_opt_string(self):
0.34 optparse.py(764):     def check_value(self, opt, value):
0.34 optparse.py(771):     def convert_value(self, opt, value):
0.34 optparse.py(778):     def process(self, opt, value, values, parser):
0.34 optparse.py(790):     def take_action(self, action, dest, opt, value, values, parser):
0.34 optparse.py(823): SUPPRESS_HELP = "SUPPRESS"+"HELP"
0.34 optparse.py(824): SUPPRESS_USAGE = "SUPPRESS"+"USAGE"
0.34 optparse.py(826): try:
0.34 optparse.py(827):     basestring
0.34 optparse.py(832):     def isbasestring(x):
0.34 optparse.py(835): class Values:
 --- modulename: optparse, funcname: Values
0.34 optparse.py(835): class Values:
0.34 optparse.py(837):     def __init__(self, defaults=None):
0.34 optparse.py(842):     def __str__(self):
0.34 optparse.py(845):     __repr__ = _repr
0.34 optparse.py(847):     def __cmp__(self, other):
0.34 optparse.py(855):     def _update_careful(self, dict):
0.34 optparse.py(868):     def _update_loose(self, dict):
0.34 optparse.py(876):     def _update(self, dict, mode):
0.34 optparse.py(884):     def read_module(self, modname, mode="careful"):
0.34 optparse.py(889):     def read_file(self, filename, mode="careful"):
0.34 optparse.py(894):     def ensure_value(self, attr, value):
0.34 optparse.py(900): class OptionContainer:
 --- modulename: optparse, funcname: OptionContainer
0.34 optparse.py(900): class OptionContainer:
0.34 optparse.py(930):     """
0.34 optparse.py(932):     def __init__(self, option_class, conflict_handler, description):
0.34 optparse.py(943):     def _create_option_mappings(self):
0.34 optparse.py(952):     def _share_option_mappings(self, parser):
0.34 optparse.py(959):     def set_conflict_handler(self, handler):
0.34 optparse.py(964):     def set_description(self, description):
0.34 optparse.py(967):     def get_description(self):
0.34 optparse.py(971):     def destroy(self):
0.34 optparse.py(980):     def _check_conflict(self, option):
0.34 optparse.py(1007):     def add_option(self, *args, **kwargs):
0.34 optparse.py(1037):     def add_options(self, option_list):
0.34 optparse.py(1043):     def get_option(self, opt_str):
0.34 optparse.py(1047):     def has_option(self, opt_str):
0.34 optparse.py(1051):     def remove_option(self, opt_str):
0.34 optparse.py(1067):     def format_option_help(self, formatter):
0.34 optparse.py(1076):     def format_description(self, formatter):
0.34 optparse.py(1079):     def format_help(self, formatter):
0.34 optparse.py(1088): class OptionGroup (OptionContainer):
 --- modulename: optparse, funcname: OptionGroup
0.34 optparse.py(1088): class OptionGroup (OptionContainer):
0.34 optparse.py(1090):     def __init__(self, parser, title, description=None):
0.34 optparse.py(1096):     def _create_option_list(self):
0.34 optparse.py(1100):     def set_title(self, title):
0.34 optparse.py(1103):     def destroy(self):
0.34 optparse.py(1110):     def format_help(self, formatter):
0.34 optparse.py(1118): class OptionParser (OptionContainer):
 --- modulename: optparse, funcname: OptionParser
0.34 optparse.py(1118): class OptionParser (OptionContainer):
0.34 optparse.py(1186):     """
0.34 optparse.py(1188):     standard_option_list = []
0.34 optparse.py(1191):                  usage=None,
0.34 optparse.py(1192):                  option_list=None,
0.34 optparse.py(1193):                  option_class=Option,
0.34 optparse.py(1194):                  version=None,
0.34 optparse.py(1195):                  conflict_handler="error",
0.34 optparse.py(1196):                  description=None,
0.34 optparse.py(1197):                  formatter=None,
0.34 optparse.py(1198):                  add_help_option=True,
0.34 optparse.py(1199):                  prog=None,
0.34 optparse.py(1200):                  epilog=None):
0.34 optparse.py(1224):     def destroy(self):
0.34 optparse.py(1242):     def _create_option_list(self):
0.34 optparse.py(1247):     def _add_help_option(self):
0.34 optparse.py(1252):     def _add_version_option(self):
0.34 optparse.py(1257):     def _populate_option_list(self, option_list, add_help=True):
0.34 optparse.py(1267):     def _init_parsing_state(self):
0.34 optparse.py(1276):     def set_usage(self, usage):
0.34 optparse.py(1287):     def enable_interspersed_args(self):
0.34 optparse.py(1295):     def disable_interspersed_args(self):
0.34 optparse.py(1303):     def set_process_default_values(self, process):
0.34 optparse.py(1306):     def set_default(self, dest, value):
0.34 optparse.py(1309):     def set_defaults(self, **kwargs):
0.34 optparse.py(1312):     def _get_all_options(self):
0.34 optparse.py(1318):     def get_default_values(self):
0.34 optparse.py(1335):     def add_option_group(self, *args, **kwargs):
0.34 optparse.py(1351):     def get_option_group(self, opt_str):
0.34 optparse.py(1361):     def _get_args(self, args):
0.34 optparse.py(1367):     def parse_args(self, args=None, values=None):
0.34 optparse.py(1406):     def check_values(self, values, args):
0.34 optparse.py(1419):     def _process_args(self, largs, rargs, values):
0.34 optparse.py(1470):     def _match_long_opt(self, opt):
0.34 optparse.py(1479):     def _process_long_opt(self, rargs, values):
0.34 optparse.py(1516):     def _process_short_opts(self, rargs, values):
0.34 optparse.py(1558):     def get_prog_name(self):
0.34 optparse.py(1564):     def expand_prog_name(self, s):
0.34 optparse.py(1567):     def get_description(self):
0.34 optparse.py(1570):     def exit(self, status=0, msg=None):
0.34 optparse.py(1575):     def error(self, msg):
0.34 optparse.py(1585):     def get_usage(self):
0.34 optparse.py(1592):     def print_usage(self, file=None):
0.34 optparse.py(1604):     def get_version(self):
0.34 optparse.py(1610):     def print_version(self, file=None):
0.34 optparse.py(1621):     def format_option_help(self, formatter=None):
0.34 optparse.py(1638):     def format_epilog(self, formatter):
0.34 optparse.py(1641):     def format_help(self, formatter=None):
0.34 optparse.py(1654):     def _get_encoding(self, file):
0.34 optparse.py(1660):     def print_help(self, file=None):
0.34 optparse.py(1674): def _match_abbrev(s, wordmap):
0.34 optparse.py(1703): make_option = Option
0.34 state.py(9): from fabric.network import HostConnectionCache
 --- modulename: network, funcname: <module>
0.34 network.py(3): """
0.34 network.py(5): from __future__ import with_statement
 --- modulename: __future__, funcname: <module>
0.34 __future__.py(48): """
0.34 __future__.py(51):     "nested_scopes",
0.34 __future__.py(52):     "generators",
0.34 __future__.py(53):     "division",
0.34 __future__.py(54):     "absolute_import",
0.34 __future__.py(55):     "with_statement",
0.34 __future__.py(56):     "print_function",
0.34 __future__.py(57):     "unicode_literals",
0.34 __future__.py(60): __all__ = ["all_feature_names"] + all_feature_names
0.34 __future__.py(66): CO_NESTED            = 0x0010   # nested_scopes
0.34 __future__.py(67): CO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)
0.34 __future__.py(68): CO_FUTURE_DIVISION   = 0x2000   # division
0.34 __future__.py(69): CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
0.34 __future__.py(70): CO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement
0.34 __future__.py(71): CO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function
0.34 __future__.py(72): CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals
0.34 __future__.py(74): class _Feature:
 --- modulename: __future__, funcname: _Feature
0.34 __future__.py(74): class _Feature:
0.34 __future__.py(75):     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
0.34 __future__.py(80):     def getOptionalRelease(self):
0.34 __future__.py(88):     def getMandatoryRelease(self):
0.34 __future__.py(97):     def __repr__(self):
0.34 __future__.py(102): nested_scopes = _Feature((2, 1, 0, "beta",  1),
0.34 __future__.py(103):                          (2, 2, 0, "alpha", 0),
0.34 __future__.py(104):                          CO_NESTED)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(106): generators = _Feature((2, 2, 0, "alpha", 1),
0.34 __future__.py(107):                       (2, 3, 0, "final", 0),
0.34 __future__.py(108):                       CO_GENERATOR_ALLOWED)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(110): division = _Feature((2, 2, 0, "alpha", 2),
0.34 __future__.py(111):                     (3, 0, 0, "alpha", 0),
0.34 __future__.py(112):                     CO_FUTURE_DIVISION)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(114): absolute_import = _Feature((2, 5, 0, "alpha", 1),
0.34 __future__.py(115):                            (2, 7, 0, "alpha", 0),
0.34 __future__.py(116):                            CO_FUTURE_ABSOLUTE_IMPORT)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(118): with_statement = _Feature((2, 5, 0, "alpha", 1),
0.34 __future__.py(119):                           (2, 6, 0, "alpha", 0),
0.34 __future__.py(120):                           CO_FUTURE_WITH_STATEMENT)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(122): print_function = _Feature((2, 6, 0, "alpha", 2),
0.34 __future__.py(123):                           (3, 0, 0, "alpha", 0),
0.34 __future__.py(124):                           CO_FUTURE_PRINT_FUNCTION)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 __future__.py(126): unicode_literals = _Feature((2, 6, 0, "alpha", 2),
0.34 __future__.py(127):                             (3, 0, 0, "alpha", 0),
0.34 __future__.py(128):                             CO_FUTURE_UNICODE_LITERALS)
 --- modulename: __future__, funcname: __init__
0.34 __future__.py(76):         self.optional = optionalRelease
0.34 __future__.py(77):         self.mandatory = mandatoryRelease
0.34 __future__.py(78):         self.compiler_flag = compiler_flag
0.34 network.py(7): from functools import wraps
0.34 network.py(8): import getpass
 --- modulename: getpass, funcname: <module>
0.34 getpass.py(12): """
0.35 getpass.py(18): import os, sys, warnings
0.35 getpass.py(20): __all__ = ["getpass","getuser","GetPassWarning"]
0.35 getpass.py(23): class GetPassWarning(UserWarning): pass
 --- modulename: getpass, funcname: GetPassWarning
0.35 getpass.py(23): class GetPassWarning(UserWarning): pass
0.35 getpass.py(26): def unix_getpass(prompt='Password: ', stream=None):
0.35 getpass.py(89): def win_getpass(prompt='Password: ', stream=None):
0.35 getpass.py(112): def fallback_getpass(prompt='Password: ', stream=None):
0.35 getpass.py(121): def _raw_input(prompt="", stream=None, input=None):
0.35 getpass.py(141): def getuser():
0.35 getpass.py(161): try:
0.35 getpass.py(162):     import termios
0.35 getpass.py(165):     termios.tcgetattr, termios.tcsetattr
0.35 getpass.py(179):     getpass = unix_getpass
0.35 network.py(9): import re
0.35 network.py(10): import threading
0.35 network.py(11): import select
0.35 network.py(12): import socket
 --- modulename: socket, funcname: <module>
0.35 socket.py(45): """
0.35 socket.py(47): import _socket
0.35 socket.py(48): from _socket import *
0.35 socket.py(49): from functools import partial
0.35 socket.py(50): from types import MethodType
0.35 socket.py(52): try:
0.35 socket.py(53):     import _ssl
0.35 socket.py(58):     def ssl(sock, keyfile=None, certfile=None):
0.35 socket.py(67):     from _ssl import SSLError as sslerror
0.35 socket.py(68):     from _ssl import \
0.35 socket.py(82): import os, sys, warnings
0.35 socket.py(84): try:
0.35 socket.py(85):     from cStringIO import StringIO
0.35 socket.py(89): try:
0.35 socket.py(90):     import errno
0.35 socket.py(93): EBADF = getattr(errno, 'EBADF', 9)
0.35 socket.py(94): EINTR = getattr(errno, 'EINTR', 4)
0.35 socket.py(96): __all__ = ["getfqdn", "create_connection"]
0.35 socket.py(97): __all__.extend(os._get_exports_list(_socket))
 --- modulename: os, funcname: _get_exports_list
0.35 os.py(36):     try:
0.35 os.py(37):         return list(module.__all__)
0.35 os.py(38):     except AttributeError:
0.35 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.35 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.35 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.35 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.35 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 os.py(39):         return [n for n in dir(module) if n[0] != '_']
0.36 socket.py(100): _realsocket = socket
0.36 socket.py(103): if sys.platform.lower().startswith("win"):
0.36 socket.py(124): def getfqdn(name=''):
0.36 socket.py(151):     'bind', 'connect', 'connect_ex', 'fileno', 'listen',
0.36 socket.py(152):     'getpeername', 'getsockname', 'getsockopt', 'setsockopt',
0.36 socket.py(153):     'sendall', 'setblocking',
0.36 socket.py(154):     'settimeout', 'gettimeout', 'shutdown')
0.36 socket.py(156): if os.name == "nt":
0.36 socket.py(159): if sys.platform == "riscos":
0.36 socket.py(164): _delegate_methods = ("recv", "recvfrom", "recv_into", "recvfrom_into",
0.36 socket.py(165):                      "send", "sendto")
0.36 socket.py(167): class _closedsocket(object):
 --- modulename: socket, funcname: _closedsocket
0.36 socket.py(167): class _closedsocket(object):
0.36 socket.py(168):     __slots__ = []
0.36 socket.py(169):     def _dummy(*args):
0.36 socket.py(172):     send = recv = recv_into = sendto = recvfrom = recvfrom_into = _dummy
0.36 socket.py(173):     __getattr__ = _dummy
0.36 socket.py(179): class _socketobject(object):
 --- modulename: socket, funcname: _socketobject
0.36 socket.py(179): class _socketobject(object):
0.36 socket.py(181):     __doc__ = _realsocket.__doc__
0.36 socket.py(183):     __slots__ = ["_sock", "__weakref__"] + list(_delegate_methods)
0.36 socket.py(185):     def __init__(self, family=AF_INET, type=SOCK_STREAM, proto=0, _sock=None):
0.36 socket.py(192):     def close(self, _closedsocket=_closedsocket,
0.36 socket.py(193):               _delegate_methods=_delegate_methods, setattr=setattr):
0.36 socket.py(199):     close.__doc__ = _realsocket.close.__doc__
0.36 socket.py(201):     def accept(self):
0.36 socket.py(204):     accept.__doc__ = _realsocket.accept.__doc__
0.36 socket.py(206):     def dup(self):
0.36 socket.py(212):     def makefile(self, mode='r', bufsize=-1):
0.36 socket.py(219):     family = property(lambda self: self._sock.family, doc="the socket family")
0.36 socket.py(220):     type = property(lambda self: self._sock.type, doc="the socket type")
0.36 socket.py(221):     proto = property(lambda self: self._sock.proto, doc="the socket protocol")
0.36 socket.py(223): def meth(name,self,*args):
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(227):     p = partial(meth,_m)
0.36 socket.py(228):     p.__name__ = _m
0.36 socket.py(229):     p.__doc__ = getattr(_realsocket,_m).__doc__
0.36 socket.py(230):     m = MethodType(p,None,_socketobject)
0.36 socket.py(231):     setattr(_socketobject,_m,m)
0.36 socket.py(226): for _m in _socketmethods:
0.36 socket.py(233): socket = SocketType = _socketobject
0.36 socket.py(235): class _fileobject(object):
 --- modulename: socket, funcname: _fileobject
0.36 socket.py(235): class _fileobject(object):
0.36 socket.py(236):     """Faux file object attached to a socket object."""
0.36 socket.py(238):     default_bufsize = 8192
0.36 socket.py(239):     name = "<socket>"
0.36 socket.py(241):     __slots__ = ["mode", "bufsize", "softspace",
0.36 socket.py(243):                  "_sock", "_rbufsize", "_wbufsize", "_rbuf", "_wbuf", "_wbuf_len",
0.36 socket.py(244):                  "_close"]
0.36 socket.py(246):     def __init__(self, sock, mode='rb', bufsize=-1, close=False):
0.36 socket.py(272):     def _getclosed(self):
0.36 socket.py(274):     closed = property(_getclosed, doc="True if the file is closed")
0.36 socket.py(276):     def close(self):
0.36 socket.py(285):     def __del__(self):
0.36 socket.py(292):     def flush(self):
0.36 socket.py(312):     def fileno(self):
0.36 socket.py(315):     def write(self, data):
0.36 socket.py(326):     def writelines(self, list):
0.36 socket.py(336):     def read(self, size=-1):
0.36 socket.py(406):     def readline(self, size=-1):
0.36 socket.py(511):     def readlines(self, sizehint=0):
0.36 socket.py(526):     def __iter__(self):
0.36 socket.py(529):     def next(self):
0.36 socket.py(535): _GLOBAL_DEFAULT_TIMEOUT = object()
0.36 socket.py(537): def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
0.36 socket.py(538):                       source_address=None):
0.36 network.py(13): import sys
0.36 network.py(15): from fabric.auth import get_password, set_password
 --- modulename: auth, funcname: <module>
0.36 auth.py(3): """
0.36 auth.py(6): def get_password():
0.36 auth.py(11): def set_password(password):
0.36 network.py(16): from fabric.utils import abort, handle_prompt_abort
 --- modulename: utils, funcname: <module>
0.36 utils.py(4): """
0.37 utils.py(6): import sys
0.37 utils.py(7): import textwrap
0.37 utils.py(9): def abort(msg):
0.37 utils.py(27): def warn(msg):
0.37 utils.py(41): def indent(text, spaces=4, strip=False):
0.37 utils.py(69): def puts(text, show_prefix=True, end="\n", flush=False):
0.37 utils.py(100): def fastprint(text, show_prefix=False, end="", flush=True):
0.37 utils.py(126): def handle_prompt_abort():
0.37 network.py(18): try:
0.37 network.py(19):     import warnings
0.37 network.py(20):     warnings.simplefilter('ignore', DeprecationWarning)
 --- modulename: warnings, funcname: simplefilter
0.37 warnings.py(84):     assert action in ("error", "ignore", "always", "default", "module",
0.37 warnings.py(85):                       "once"), "invalid action: %r" % (action,)
0.37 warnings.py(86):     assert isinstance(lineno, int) and lineno >= 0, \
0.37 warnings.py(88):     item = (action, None, category, None, lineno)
0.37 warnings.py(89):     if append:
0.37 warnings.py(92):         filters.insert(0, item)
0.37 network.py(21):     import paramiko as ssh
 --- modulename: __init__, funcname: <module>
0.37 __init__.py(54): """
0.38 __init__.py(56): import sys
0.38 __init__.py(58): if sys.version_info < (2, 2):
0.38 __init__.py(62): __author__ = "Robey Pointer <robeypointer@gmail.com>"
0.38 __init__.py(63): __date__ = "21 May 2011"
0.38 __init__.py(64): __version__ = "1.7.7.1 (George)"
0.38 __init__.py(65): __version_info__ = (1, 7, 7, 1)
0.38 __init__.py(66): __license__ = "GNU Lesser General Public License (LGPL)"
0.38 __init__.py(69): from transport import SecurityOptions, Transport
 --- modulename: transport, funcname: <module>
0.38 transport.py(21): """
0.39 transport.py(23): import os
0.39 transport.py(24): import socket
0.39 transport.py(25): import string
0.39 transport.py(26): import struct
0.39 transport.py(27): import sys
0.39 transport.py(28): import threading
0.39 transport.py(29): import time
0.39 transport.py(30): import weakref
0.39 transport.py(32): from paramiko import util
 --- modulename: util, funcname: <module>
0.39 util.py(21): """
0.39 util.py(23): from __future__ import generators
0.39 util.py(25): import array
0.39 util.py(26): from binascii import hexlify, unhexlify
0.39 util.py(27): import sys
0.39 util.py(28): import struct
0.39 util.py(29): import traceback
0.39 util.py(30): import threading
0.39 util.py(32): from paramiko.common import *
 --- modulename: common, funcname: <module>
0.40 common.py(21): """
0.40 common.py(24):     MSG_SERVICE_ACCEPT = range(1, 7)
0.40 common.py(25): MSG_KEXINIT, MSG_NEWKEYS = range(20, 22)
0.40 common.py(27):         MSG_USERAUTH_BANNER = range(50, 54)
0.40 common.py(28): MSG_USERAUTH_PK_OK = 60
0.40 common.py(29): MSG_USERAUTH_INFO_REQUEST, MSG_USERAUTH_INFO_RESPONSE = range(60, 62)
0.40 common.py(30): MSG_GLOBAL_REQUEST, MSG_REQUEST_SUCCESS, MSG_REQUEST_FAILURE = range(80, 83)
0.40 common.py(34):     MSG_CHANNEL_SUCCESS, MSG_CHANNEL_FAILURE = range(90, 101)
0.40 common.py(38): MSG_NAMES = {
0.40 common.py(39):     MSG_DISCONNECT: 'disconnect',
0.40 common.py(40):     MSG_IGNORE: 'ignore',
0.40 common.py(41):     MSG_UNIMPLEMENTED: 'unimplemented',
0.40 common.py(42):     MSG_DEBUG: 'debug',
0.40 common.py(43):     MSG_SERVICE_REQUEST: 'service-request',
0.40 common.py(44):     MSG_SERVICE_ACCEPT: 'service-accept',
0.40 common.py(45):     MSG_KEXINIT: 'kexinit',
0.40 common.py(46):     MSG_NEWKEYS: 'newkeys',
0.40 common.py(47):     30: 'kex30',
0.40 common.py(48):     31: 'kex31',
0.40 common.py(49):     32: 'kex32',
0.40 common.py(50):     33: 'kex33',
0.40 common.py(51):     34: 'kex34',
0.40 common.py(52):     MSG_USERAUTH_REQUEST: 'userauth-request',
0.40 common.py(53):     MSG_USERAUTH_FAILURE: 'userauth-failure',
0.40 common.py(54):     MSG_USERAUTH_SUCCESS: 'userauth-success',
0.40 common.py(55):     MSG_USERAUTH_BANNER: 'userauth--banner',
0.40 common.py(56):     MSG_USERAUTH_PK_OK: 'userauth-60(pk-ok/info-request)',
0.40 common.py(57):     MSG_USERAUTH_INFO_RESPONSE: 'userauth-info-response',
0.40 common.py(58):     MSG_GLOBAL_REQUEST: 'global-request',
0.40 common.py(59):     MSG_REQUEST_SUCCESS: 'request-success',
0.40 common.py(60):     MSG_REQUEST_FAILURE: 'request-failure',
0.40 common.py(61):     MSG_CHANNEL_OPEN: 'channel-open',
0.40 common.py(62):     MSG_CHANNEL_OPEN_SUCCESS: 'channel-open-success',
0.40 common.py(63):     MSG_CHANNEL_OPEN_FAILURE: 'channel-open-failure',
0.40 common.py(64):     MSG_CHANNEL_WINDOW_ADJUST: 'channel-window-adjust',
0.40 common.py(65):     MSG_CHANNEL_DATA: 'channel-data',
0.40 common.py(66):     MSG_CHANNEL_EXTENDED_DATA: 'channel-extended-data',
0.40 common.py(67):     MSG_CHANNEL_EOF: 'channel-eof',
0.40 common.py(68):     MSG_CHANNEL_CLOSE: 'channel-close',
0.40 common.py(69):     MSG_CHANNEL_REQUEST: 'channel-request',
0.40 common.py(70):     MSG_CHANNEL_SUCCESS: 'channel-success',
0.40 common.py(71):     MSG_CHANNEL_FAILURE: 'channel-failure'
0.40 common.py(76): AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED = range(3)
0.40 common.py(84):  OPEN_FAILED_RESOURCE_SHORTAGE) = range(0, 5)
0.40 common.py(87): CONNECTION_FAILED_CODE = {
0.40 common.py(88):     1: 'Administratively prohibited',
0.40 common.py(89):     2: 'Connect failed',
0.40 common.py(90):     3: 'Unknown channel type',
0.40 common.py(91):     4: 'Resource shortage'
0.40 common.py(96):     DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE = 7, 13, 14
0.40 common.py(98): from Crypto import Random
 --- modulename: __init__, funcname: <module>
0.40 __init__.py(37): """
0.40 __init__.py(39): __all__ = ['Cipher', 'Hash', 'Protocol', 'PublicKey', 'Util']
0.40 __init__.py(41): __version__ = '2.4.1'     # See also below and setup.py
0.40 __init__.py(42): __revision__ = "$Id$"
0.40 __init__.py(45): version_info = (2, 1, 0, 'final', 0)    # See also above and setup.py
 --- modulename: __init__, funcname: <module>
0.40 __init__.py(25): __revision__ = "$Id$"
0.41 __init__.py(26): __all__ = ['new']
0.41 __init__.py(28): from Crypto.Random import OSRNG
 --- modulename: __init__, funcname: <module>
0.41 __init__.py(25): supplied by various operating systems."""
0.41 __init__.py(27): __revision__ = "$Id$"
0.41 __init__.py(29): import os
0.41 __init__.py(31): if os.name == 'posix':
0.41 __init__.py(32):     from Crypto.Random.OSRNG.posix import new
 --- modulename: posix, funcname: <module>
0.41 posix.py(25): __revision__ = "$Id$"
0.41 posix.py(26): __all__ = ['DevURandomRNG']
0.41 posix.py(28): import os
0.41 posix.py(29): import stat
0.41 posix.py(31): from rng_base import BaseRNG
 --- modulename: rng_base, funcname: <module>
0.41 rng_base.py(24): __revision__ = "$Id$"
0.41 rng_base.py(26): import sys
0.41 rng_base.py(27): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.41 rng_base.py(30): class BaseRNG(object):
 --- modulename: rng_base, funcname: BaseRNG
0.41 rng_base.py(30): class BaseRNG(object):
0.41 rng_base.py(32):     def __init__(self):
0.41 rng_base.py(36):     def __del__(self):
0.41 rng_base.py(39):     def _selftest(self):
0.41 rng_base.py(52):     def __enter__(self):
0.41 rng_base.py(54):     def __exit__(self):
0.41 rng_base.py(58):     def close(self):
0.41 rng_base.py(63):     def flush(self):
0.41 rng_base.py(66):     def read(self, N=-1):
0.41 rng_base.py(81):     def _close(self):
0.41 rng_base.py(84):     def _read(self, N):
0.41 posix.py(33): class DevURandomRNG(BaseRNG):
 --- modulename: posix, funcname: DevURandomRNG
0.41 posix.py(33): class DevURandomRNG(BaseRNG):
0.41 posix.py(35):     def __init__(self, devname=None):
0.41 posix.py(53):     def _close(self):
0.41 posix.py(56):     def _read(self, N):
0.41 posix.py(59): def new(*args, **kwargs):
0.41 __init__.py(29): from Crypto.Random import _UserFriendlyRNG
 --- modulename: _UserFriendlyRNG, funcname: <module>
0.41 _UserFriendlyRNG.py(25): __revision__ = "$Id$"
0.41 _UserFriendlyRNG.py(27): import sys
0.41 _UserFriendlyRNG.py(28): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.41 _UserFriendlyRNG.py(31): import os
0.41 _UserFriendlyRNG.py(32): import threading
0.41 _UserFriendlyRNG.py(33): import struct
0.41 _UserFriendlyRNG.py(34): import time
0.41 _UserFriendlyRNG.py(35): from math import floor
0.41 _UserFriendlyRNG.py(37): from Crypto.Random import OSRNG
0.41 _UserFriendlyRNG.py(38): from Crypto.Random.Fortuna import FortunaAccumulator
 --- modulename: __init__, funcname: <module>
0.41 __init__.py(1):   --- modulename: FortunaAccumulator, funcname: <module>
0.41 FortunaAccumulator.py(25): __revision__ = "$Id$"
0.41 FortunaAccumulator.py(27): import sys
0.41 FortunaAccumulator.py(28): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.41 FortunaAccumulator.py(30): from Crypto.Util.py3compat import *
 --- modulename: __init__, funcname: <module>
0.41 __init__.py(32): """
0.41 __init__.py(34): __all__ = ['randpool', 'RFC1751', 'number', 'strxor', 'asn1' ]
0.41 __init__.py(36): __revision__ = "$Id$"
 --- modulename: py3compat, funcname: <module>
0.41 py3compat.py(26): """
0.41 py3compat.py(28): __revision__ = "$Id$"
0.41 py3compat.py(30): import sys
0.41 py3compat.py(32): if sys.version_info[0] == 2:
0.41 py3compat.py(33):     def b(s):
0.41 py3compat.py(35):     def bchr(s):
0.41 py3compat.py(37):     def bstr(s):
0.41 py3compat.py(39):     def bord(s):
0.41 FortunaAccumulator.py(32): from binascii import b2a_hex
0.41 FortunaAccumulator.py(33): import time
0.41 FortunaAccumulator.py(34): import warnings
0.41 FortunaAccumulator.py(36): from Crypto.pct_warnings import ClockRewindWarning
 --- modulename: pct_warnings, funcname: <module>
0.41 pct_warnings.py(30): class CryptoWarning(Warning):
 --- modulename: pct_warnings, funcname: CryptoWarning
0.41 pct_warnings.py(30): class CryptoWarning(Warning):
0.41 pct_warnings.py(31):     """Base class for PyCrypto warnings"""
0.41 pct_warnings.py(33): class CryptoDeprecationWarning(DeprecationWarning, CryptoWarning):
 --- modulename: pct_warnings, funcname: CryptoDeprecationWarning
0.41 pct_warnings.py(33): class CryptoDeprecationWarning(DeprecationWarning, CryptoWarning):
0.41 pct_warnings.py(34):     """Base PyCrypto DeprecationWarning class"""
0.41 pct_warnings.py(36): class CryptoRuntimeWarning(RuntimeWarning, CryptoWarning):
 --- modulename: pct_warnings, funcname: CryptoRuntimeWarning
0.41 pct_warnings.py(36): class CryptoRuntimeWarning(RuntimeWarning, CryptoWarning):
0.41 pct_warnings.py(37):     """Base PyCrypto RuntimeWarning class"""
0.41 pct_warnings.py(43): class RandomPool_DeprecationWarning(CryptoDeprecationWarning):
 --- modulename: pct_warnings, funcname: RandomPool_DeprecationWarning
0.41 pct_warnings.py(43): class RandomPool_DeprecationWarning(CryptoDeprecationWarning):
0.41 pct_warnings.py(44):     """Issued when Crypto.Util.randpool.RandomPool is instantiated."""
0.41 pct_warnings.py(46): class ClockRewindWarning(CryptoRuntimeWarning):
 --- modulename: pct_warnings, funcname: ClockRewindWarning
0.41 pct_warnings.py(46): class ClockRewindWarning(CryptoRuntimeWarning):
0.41 pct_warnings.py(47):     """Warning for when the system clock moves backwards."""
0.41 pct_warnings.py(49): class GetRandomNumber_DeprecationWarning(CryptoDeprecationWarning):
 --- modulename: pct_warnings, funcname: GetRandomNumber_DeprecationWarning
0.41 pct_warnings.py(49): class GetRandomNumber_DeprecationWarning(CryptoDeprecationWarning):
0.41 pct_warnings.py(50):     """Issued when Crypto.Util.number.getRandomNumber is invoked."""
0.41 pct_warnings.py(52): class PowmInsecureWarning(CryptoRuntimeWarning):
 --- modulename: pct_warnings, funcname: PowmInsecureWarning
0.41 pct_warnings.py(52): class PowmInsecureWarning(CryptoRuntimeWarning):
0.41 pct_warnings.py(53):     """Warning for when _fastmath is built without mpz_powm_sec"""
0.41 pct_warnings.py(57): import warnings as _warnings
0.41 pct_warnings.py(58): _warnings.filterwarnings('always', category=ClockRewindWarning, append=1)
 --- modulename: warnings, funcname: filterwarnings
0.41 warnings.py(57):     import re
0.41 warnings.py(58):     assert action in ("error", "ignore", "always", "default", "module",
0.41 warnings.py(59):                       "once"), "invalid action: %r" % (action,)
0.41 warnings.py(60):     assert isinstance(message, basestring), "message must be a string"
0.41 warnings.py(61):     assert isinstance(category, (type, types.ClassType)), \
0.41 warnings.py(63):     assert issubclass(category, Warning), "category must be a Warning subclass"
0.41 warnings.py(64):     assert isinstance(module, basestring), "module must be a string"
0.41 warnings.py(65):     assert isinstance(lineno, int) and lineno >= 0, \
0.41 warnings.py(67):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
0.41 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.41 re.py(228):     cachekey = (type(key[0]),) + key
0.41 re.py(229):     p = _cache.get(cachekey)
0.41 re.py(230):     if p is not None:
0.41 re.py(232):     pattern, flags = key
0.41 re.py(233):     if isinstance(pattern, _pattern_type):
0.41 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.42 sre_compile.py(475):     for tp in STRING_TYPES:
0.42 sre_compile.py(476):         if isinstance(obj, tp):
0.42 sre_compile.py(477):             return 1
0.42 re.py(239):     try:
0.42 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.42 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.42 sre_compile.py(475):     for tp in STRING_TYPES:
0.42 sre_compile.py(476):         if isinstance(obj, tp):
0.42 sre_compile.py(477):             return 1
0.42 sre_compile.py(499):         pattern = p
0.42 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.42 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(179):         self.string = string
0.42 sre_parse.py(180):         self.index = 0
0.42 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(668):     if pattern is None:
0.42 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(68):         self.flags = 0
0.42 sre_parse.py(69):         self.open = []
0.42 sre_parse.py(70):         self.groups = 1
0.42 sre_parse.py(71):         self.groupdict = {}
0.42 sre_parse.py(670):     pattern.flags = flags
0.42 sre_parse.py(671):     pattern.str = str
0.42 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.42 sre_parse.py(304):     items = []
0.42 sre_parse.py(305):     itemsappend = items.append
0.42 sre_parse.py(306):     sourcematch = source.match
0.42 sre_parse.py(307):     while 1:
0.42 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.42 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(91):         self.pattern = pattern
0.42 sre_parse.py(92):         if data is None:
0.42 sre_parse.py(93):             data = []
0.42 sre_parse.py(94):         self.data = data
0.42 sre_parse.py(95):         self.width = None
0.42 sre_parse.py(384):     subpatternappend = subpattern.append
0.42 sre_parse.py(385):     sourceget = source.get
0.42 sre_parse.py(386):     sourcematch = source.match
0.42 sre_parse.py(387):     _len = len
0.42 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.42 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.42 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.42 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.42 sre_parse.py(393):     while 1:
0.42 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.42 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.42 sre_parse.py(202):         this = self.next
0.42 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(204):         return this
0.42 sre_parse.py(398):         if this is None:
0.42 sre_parse.py(399):             break # end of pattern
0.42 sre_parse.py(661):     return subpattern
0.42 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.42 sre_parse.py(196):         if char == self.next:
0.42 sre_parse.py(200):         return 0
0.42 sre_parse.py(311):         if not nested:
0.42 sre_parse.py(312):             break
0.42 sre_parse.py(318):     if len(items) == 1:
0.42 sre_parse.py(319):         return items[0]
0.42 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.42 sre_parse.py(202):         this = self.next
0.42 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(204):         return this
0.42 sre_parse.py(676):     if tail == ")":
0.42 sre_parse.py(678):     elif tail:
0.42 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.42 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.42 sre_parse.py(689):     return p
0.42 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.42 sre_compile.py(482):     flags = p.pattern.flags | flags
0.42 sre_compile.py(483):     code = []
0.42 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.42 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.42 sre_parse.py(142):         if self.width:
0.42 sre_parse.py(144):         lo = hi = 0L
0.42 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.42 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.42 sre_parse.py(147):         for op, av in self.data:
0.42 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.42 sre_parse.py(175):         return self.width
0.42 sre_compile.py(366):     if lo == 0:
0.42 sre_compile.py(367):         return # not worth it
0.42 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.42 sre_compile.py(34):     emit = code.append
0.42 sre_compile.py(35):     _len = len
0.42 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.42 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.42 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.42 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.42 sre_compile.py(40):     for op, av in pattern:
0.42 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.42 sre_compile.py(493):     return code
0.42 sre_compile.py(509):     if p.pattern.groups > 100:
0.42 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.42 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.42 sre_compile.py(517):     for k, i in groupindex.items():
0.42 sre_compile.py(520):     return _sre.compile(
0.42 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.42 sre_compile.py(522):         p.pattern.groups-1,
0.42 sre_compile.py(523):         groupindex, indexgroup
0.42 re.py(243):     if len(_cache) >= _MAXCACHE:
0.42 re.py(245):     _cache[cachekey] = p
0.42 re.py(246):     return p
0.42 warnings.py(68):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
0.42 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.42 re.py(228):     cachekey = (type(key[0]),) + key
0.42 re.py(229):     p = _cache.get(cachekey)
0.42 re.py(230):     if p is not None:
0.42 re.py(232):     pattern, flags = key
0.42 re.py(233):     if isinstance(pattern, _pattern_type):
0.42 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.42 sre_compile.py(475):     for tp in STRING_TYPES:
0.42 sre_compile.py(476):         if isinstance(obj, tp):
0.42 sre_compile.py(477):             return 1
0.42 re.py(239):     try:
0.42 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.42 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.42 sre_compile.py(475):     for tp in STRING_TYPES:
0.42 sre_compile.py(476):         if isinstance(obj, tp):
0.42 sre_compile.py(477):             return 1
0.42 sre_compile.py(499):         pattern = p
0.42 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.42 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(179):         self.string = string
0.42 sre_parse.py(180):         self.index = 0
0.42 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(668):     if pattern is None:
0.42 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(68):         self.flags = 0
0.42 sre_parse.py(69):         self.open = []
0.42 sre_parse.py(70):         self.groups = 1
0.42 sre_parse.py(71):         self.groupdict = {}
0.42 sre_parse.py(670):     pattern.flags = flags
0.42 sre_parse.py(671):     pattern.str = str
0.42 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.42 sre_parse.py(304):     items = []
0.42 sre_parse.py(305):     itemsappend = items.append
0.42 sre_parse.py(306):     sourcematch = source.match
0.42 sre_parse.py(307):     while 1:
0.42 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.42 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.42 sre_parse.py(91):         self.pattern = pattern
0.42 sre_parse.py(92):         if data is None:
0.42 sre_parse.py(93):             data = []
0.42 sre_parse.py(94):         self.data = data
0.42 sre_parse.py(95):         self.width = None
0.42 sre_parse.py(384):     subpatternappend = subpattern.append
0.42 sre_parse.py(385):     sourceget = source.get
0.42 sre_parse.py(386):     sourcematch = source.match
0.42 sre_parse.py(387):     _len = len
0.42 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.42 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.42 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.42 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.42 sre_parse.py(393):     while 1:
0.42 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.42 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.42 sre_parse.py(202):         this = self.next
0.42 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(204):         return this
0.42 sre_parse.py(398):         if this is None:
0.42 sre_parse.py(399):             break # end of pattern
0.42 sre_parse.py(661):     return subpattern
0.42 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.42 sre_parse.py(196):         if char == self.next:
0.42 sre_parse.py(200):         return 0
0.42 sre_parse.py(311):         if not nested:
0.42 sre_parse.py(312):             break
0.42 sre_parse.py(318):     if len(items) == 1:
0.42 sre_parse.py(319):         return items[0]
0.42 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.42 sre_parse.py(202):         this = self.next
0.42 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.42 sre_parse.py(183):         if self.index >= len(self.string):
0.42 sre_parse.py(184):             self.next = None
0.42 sre_parse.py(185):             return
0.42 sre_parse.py(204):         return this
0.42 sre_parse.py(676):     if tail == ")":
0.42 sre_parse.py(678):     elif tail:
0.42 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.42 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.42 sre_parse.py(689):     return p
0.42 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.42 sre_compile.py(482):     flags = p.pattern.flags | flags
0.42 sre_compile.py(483):     code = []
0.42 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.42 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.42 sre_parse.py(142):         if self.width:
0.42 sre_parse.py(144):         lo = hi = 0L
0.42 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.42 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.42 sre_parse.py(147):         for op, av in self.data:
0.42 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.42 sre_parse.py(175):         return self.width
0.42 sre_compile.py(366):     if lo == 0:
0.42 sre_compile.py(367):         return # not worth it
0.42 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.42 sre_compile.py(34):     emit = code.append
0.42 sre_compile.py(35):     _len = len
0.42 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.42 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.42 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.42 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.42 sre_compile.py(40):     for op, av in pattern:
0.42 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.42 sre_compile.py(493):     return code
0.42 sre_compile.py(509):     if p.pattern.groups > 100:
0.42 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.42 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.42 sre_compile.py(517):     for k, i in groupindex.items():
0.42 sre_compile.py(520):     return _sre.compile(
0.42 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.42 sre_compile.py(522):         p.pattern.groups-1,
0.42 sre_compile.py(523):         groupindex, indexgroup
0.42 re.py(243):     if len(_cache) >= _MAXCACHE:
0.42 re.py(245):     _cache[cachekey] = p
0.42 re.py(246):     return p
0.42 warnings.py(69):     if append:
0.42 warnings.py(70):         filters.append(item)
0.42 FortunaAccumulator.py(37): import SHAd256
 --- modulename: SHAd256, funcname: <module>
0.42 SHAd256.py(29): """
0.42 SHAd256.py(31): __revision__ = "$Id$"
0.42 SHAd256.py(32): __all__ = ['new', 'digest_size']
0.42 SHAd256.py(34): import sys
0.42 SHAd256.py(35): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.42 SHAd256.py(37): from Crypto.Util.py3compat import *
0.42 SHAd256.py(39): from binascii import b2a_hex
0.42 SHAd256.py(41): from Crypto.Hash import SHA256
 --- modulename: __init__, funcname: <module>
0.42 __init__.py(40): """
0.42 __init__.py(42): __all__ = ['HMAC', 'MD2', 'MD4', 'MD5', 'RIPEMD', 'RIPEMD160', 'SHA', 'SHA256']
0.42 __init__.py(43): __revision__ = "$Id$"
0.42 SHAd256.py(43): assert SHA256.digest_size == 32
0.42 SHAd256.py(45): class _SHAd256(object):
 --- modulename: SHAd256, funcname: _SHAd256
0.42 SHAd256.py(45): class _SHAd256(object):
0.42 SHAd256.py(49):     """
0.42 SHAd256.py(51):     digest_size = SHA256.digest_size
0.42 SHAd256.py(53):     _internal = object()
0.42 SHAd256.py(55):     def __init__(self, internal_api_check, sha256_hash_obj):
0.42 SHAd256.py(61):     def copy(self):
0.42 SHAd256.py(66):     def digest(self):
0.42 SHAd256.py(73):     def hexdigest(self):
0.42 SHAd256.py(83):     def update(self, data):
0.42 SHAd256.py(87): digest_size = _SHAd256.digest_size
0.42 SHAd256.py(90): def new(data=None):
0.42 FortunaAccumulator.py(39): import FortunaGenerator
 --- modulename: FortunaGenerator, funcname: <module>
0.42 FortunaGenerator.py(25): __revision__ = "$Id$"
0.42 FortunaGenerator.py(27): import sys
0.42 FortunaGenerator.py(28): if sys.version_info[0] is 2 and  sys.version_info[1] is 1:
0.42 FortunaGenerator.py(30): from Crypto.Util.py3compat import *
0.42 FortunaGenerator.py(32): import struct
0.42 FortunaGenerator.py(34): from Crypto.Util.number import ceil_shift, exact_log2, exact_div
 --- modulename: number, funcname: <module>
0.42 number.py(27): __revision__ = "$Id$"
0.43 number.py(29): from Crypto.pct_warnings import GetRandomNumber_DeprecationWarning, PowmInsecureWarning
0.43 number.py(30): from warnings import warn as _warn
0.43 number.py(31): import math
0.44 number.py(32): import sys
0.44 number.py(33): from Crypto.Util.py3compat import *
0.44 number.py(35): bignum = long
0.44 number.py(36): try:
0.44 number.py(37):     from Crypto.PublicKey import _fastmath
 --- modulename: __init__, funcname: <module>
0.44 __init__.py(33): """
0.44 __init__.py(35): __all__ = ['RSA', 'DSA', 'ElGamal', 'qNEW']
0.44 __init__.py(36): __revision__ = "$Id$"
0.44 number.py(56): if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:
0.44 number.py(60): from _number_new import *
 --- modulename: _number_new, funcname: <module>
0.44 _number_new.py(27): __revision__ = "$Id$"
0.44 _number_new.py(28): __all__ = ['ceil_shift', 'ceil_div', 'floor_div', 'exact_log2', 'exact_div']
0.44 _number_new.py(30): import sys
0.44 _number_new.py(31): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.44 _number_new.py(34): def ceil_shift(n, b):
0.44 _number_new.py(50): def ceil_div(a, b):
0.44 _number_new.py(62): def floor_div(a, b):
0.44 _number_new.py(69): def exact_log2(num):
0.44 _number_new.py(93): def exact_div(p, d, allow_divzero=False):
0.44 number.py(75): def size (N):
0.44 number.py(84): def getRandomNumber(N, randfunc=None):
0.44 number.py(91): def getRandomInteger(N, randfunc=None):
0.44 number.py(112): def getRandomRange(a, b, randfunc=None):
0.44 number.py(128): def getRandomNBitInteger(N, randfunc=None):
0.44 number.py(143): def GCD(x,y):
0.44 number.py(152): def inverse(u, v):
0.44 number.py(169): def getPrime(N, randfunc=None):
0.44 number.py(185): def _rabinMillerTest(n, rounds, randfunc=None):
0.44 number.py(233): def getStrongPrime(N, e=0, false_positive_prob=1e-6, randfunc=None):
0.44 number.py(355): def isPrime(N, false_positive_prob=1e-6, randfunc=None):
0.44 number.py(385): import struct
0.44 number.py(387): def long_to_bytes(n, blocksize=0):
0.44 number.py(417): def bytes_to_long(s):
0.44 number.py(435): import warnings
0.44 number.py(436): def long2str(n, blocksize=0):
0.44 number.py(439): def str2long(s):
0.44 number.py(443): def _import_Random():
0.44 number.py(1455): 104677, 104681, 104683, 104693, 104701, 104707, 104711, 104717, 104723, 104729,
0.44 FortunaGenerator.py(35): from Crypto.Util import Counter
 --- modulename: Counter, funcname: <module>
0.44 Counter.py(25): import sys
0.44 Counter.py(26): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.44 Counter.py(28): from Crypto.Util.py3compat import *
0.44 Counter.py(30): from Crypto.Util import _counter
0.44 Counter.py(31): import struct
0.44 Counter.py(34): def new(nbits, prefix=b(""), suffix=b(""), initial_value=1, overflow=0, little_endian=False, allow_wraparound=False, disable_shortcut=False):
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 Counter.py(54): def _encode(n, nbytes, little_endian=False):
0.44 FortunaGenerator.py(36): from Crypto.Cipher import AES
 --- modulename: __init__, funcname: <module>
0.44 __init__.py(42): """
0.44 __init__.py(44): __all__ = ['AES', 'ARC2', 'ARC4',
0.44 __init__.py(45):            'Blowfish', 'CAST', 'DES', 'DES3',
0.44 __init__.py(46):            'XOR'
0.44 __init__.py(49): __revision__ = "$Id$"
0.44 FortunaGenerator.py(38): import SHAd256
0.44 FortunaGenerator.py(40): class AESGenerator(object):
 --- modulename: FortunaGenerator, funcname: AESGenerator
0.44 FortunaGenerator.py(40): class AESGenerator(object):
0.44 FortunaGenerator.py(48):     """
0.44 FortunaGenerator.py(50):     block_size = AES.block_size     # output block size in octets (128 bits)
0.44 FortunaGenerator.py(51):     key_size = 32                   # key size in octets (256 bits)
0.44 FortunaGenerator.py(61):     max_blocks_per_request = 2**16  # Allow no more than this number of blocks per _pseudo_random_data request
0.44 FortunaGenerator.py(63):     _four_kiblocks_of_zeros = b("\0") * block_size * 4096
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 FortunaGenerator.py(65):     def __init__(self):
0.44 FortunaGenerator.py(78):     def reseed(self, seed):
0.44 FortunaGenerator.py(86):     def pseudo_random_data(self, bytes):
0.44 FortunaGenerator.py(99):     def _set_key(self, key):
0.44 FortunaGenerator.py(103):     def _pseudo_random_data(self, bytes):
0.44 FortunaGenerator.py(121):     def _generate_blocks(self, num_blocks):
0.44 FortunaAccumulator.py(41): class FortunaPool(object):
 --- modulename: FortunaAccumulator, funcname: FortunaPool
0.44 FortunaAccumulator.py(41): class FortunaPool(object):
0.44 FortunaAccumulator.py(50):     """
0.44 FortunaAccumulator.py(52):     digest_size = SHAd256.digest_size
0.44 FortunaAccumulator.py(54):     def __init__(self):
0.44 FortunaAccumulator.py(57):     def append(self, data):
0.44 FortunaAccumulator.py(61):     def digest(self):
0.44 FortunaAccumulator.py(64):     def hexdigest(self):
0.44 FortunaAccumulator.py(70):     def reset(self):
0.44 FortunaAccumulator.py(74): def which_pools(r):
0.44 FortunaAccumulator.py(95): class FortunaAccumulator(object):
 --- modulename: FortunaAccumulator, funcname: FortunaAccumulator
0.44 FortunaAccumulator.py(95): class FortunaAccumulator(object):
0.44 FortunaAccumulator.py(97):     min_pool_size = 64      # TODO: explain why
0.44 FortunaAccumulator.py(98):     reseed_interval = 0.100   # 100 ms    TODO: explain why
0.44 FortunaAccumulator.py(100):     def __init__(self):
0.44 FortunaAccumulator.py(112):     def random_data(self, bytes):
0.44 FortunaAccumulator.py(124):     def _reseed(self, current_time=None):
0.44 FortunaAccumulator.py(137):     def add_random_event(self, source_number, pool_number, data):
0.44 _UserFriendlyRNG.py(40): class _EntropySource(object):
 --- modulename: _UserFriendlyRNG, funcname: _EntropySource
0.44 _UserFriendlyRNG.py(40): class _EntropySource(object):
0.44 _UserFriendlyRNG.py(41):     def __init__(self, accumulator, src_num):
0.44 _UserFriendlyRNG.py(46):     def feed(self, data):
0.44 _UserFriendlyRNG.py(50): class _EntropyCollector(object):
 --- modulename: _UserFriendlyRNG, funcname: _EntropyCollector
0.44 _UserFriendlyRNG.py(50): class _EntropyCollector(object):
0.44 _UserFriendlyRNG.py(52):     def __init__(self, accumulator):
0.44 _UserFriendlyRNG.py(58):     def reinit(self):
0.44 _UserFriendlyRNG.py(68):     def collect(self):
0.44 _UserFriendlyRNG.py(81): class _UserFriendlyRNG(object):
 --- modulename: _UserFriendlyRNG, funcname: _UserFriendlyRNG
0.44 _UserFriendlyRNG.py(81): class _UserFriendlyRNG(object):
0.44 _UserFriendlyRNG.py(83):     def __init__(self):
0.44 _UserFriendlyRNG.py(89):     def reinit(self):
0.44 _UserFriendlyRNG.py(96):     def close(self):
0.44 _UserFriendlyRNG.py(101):     def flush(self):
0.44 _UserFriendlyRNG.py(104):     def read(self, N):
0.44 _UserFriendlyRNG.py(127):     def _check_pid(self):
0.44 _UserFriendlyRNG.py(141): class _LockingUserFriendlyRNG(_UserFriendlyRNG):
 --- modulename: _UserFriendlyRNG, funcname: _LockingUserFriendlyRNG
0.44 _UserFriendlyRNG.py(141): class _LockingUserFriendlyRNG(_UserFriendlyRNG):
0.44 _UserFriendlyRNG.py(142):     def __init__(self):
0.44 _UserFriendlyRNG.py(146):     def close(self):
0.44 _UserFriendlyRNG.py(153):     def reinit(self):
0.44 _UserFriendlyRNG.py(160):     def read(self, bytes):
0.44 _UserFriendlyRNG.py(167): class RNGFile(object):
 --- modulename: _UserFriendlyRNG, funcname: RNGFile
0.44 _UserFriendlyRNG.py(167): class RNGFile(object):
0.44 _UserFriendlyRNG.py(168):     def __init__(self, singleton):
0.44 _UserFriendlyRNG.py(173):     def __enter__(self):
0.44 _UserFriendlyRNG.py(175):     def __exit__(self):
0.44 _UserFriendlyRNG.py(179):     def close(self):
0.44 _UserFriendlyRNG.py(184):     def read(self, bytes):
0.44 _UserFriendlyRNG.py(189):     def flush(self):
0.44 _UserFriendlyRNG.py(193): _singleton_lock = threading.Lock()
0.44 _UserFriendlyRNG.py(194): _singleton = None
0.44 _UserFriendlyRNG.py(195): def _get_singleton():
0.44 _UserFriendlyRNG.py(205): def new():
0.44 _UserFriendlyRNG.py(208): def reinit():
0.44 _UserFriendlyRNG.py(211): def get_random_bytes(n):
0.44 __init__.py(31): def new(*args, **kwargs):
0.44 __init__.py(35): def atfork():
0.44 __init__.py(39): def get_random_bytes(n):
0.44 common.py(101): rng = Random.new()
 --- modulename: __init__, funcname: new
0.44 __init__.py(33):     return _UserFriendlyRNG.new(*args, **kwargs)
 --- modulename: _UserFriendlyRNG, funcname: new
0.44 _UserFriendlyRNG.py(206):     return RNGFile(_get_singleton())
 --- modulename: _UserFriendlyRNG, funcname: _get_singleton
0.44 _UserFriendlyRNG.py(197):     _singleton_lock.acquire()
0.44 _UserFriendlyRNG.py(198):     try:
0.44 _UserFriendlyRNG.py(199):         if _singleton is None:
0.44 _UserFriendlyRNG.py(200):             _singleton = _LockingUserFriendlyRNG()
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.44 _UserFriendlyRNG.py(143):         self._lock = threading.Lock()
0.44 _UserFriendlyRNG.py(144):         _UserFriendlyRNG.__init__(self)
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.44 _UserFriendlyRNG.py(84):         self.closed = False
0.44 _UserFriendlyRNG.py(85):         self._fa = FortunaAccumulator.FortunaAccumulator()
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(101):         self.reseed_count = 0
0.44 FortunaAccumulator.py(102):         self.generator = FortunaGenerator.AESGenerator()
 --- modulename: FortunaGenerator, funcname: __init__
0.44 FortunaGenerator.py(66):         self.counter = Counter.new(nbits=self.block_size*8, initial_value=0, little_endian=True)
 --- modulename: Counter, funcname: new
0.44 Counter.py(38):     (nbytes, remainder) = divmod(nbits, 8)
0.44 Counter.py(39):     if remainder != 0:
0.44 Counter.py(42):     if nbytes < 1:
0.44 Counter.py(44):     elif nbytes > 0xffff:
0.44 Counter.py(47):     initval = _encode(initial_value, nbytes, little_endian)
 --- modulename: Counter, funcname: _encode
0.44 Counter.py(55):     retval = []
0.44 Counter.py(56):     n = long(n)
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(58):         if little_endian:
0.44 Counter.py(59):             retval.append(bchr(n & 0xff))
 --- modulename: py3compat, funcname: bchr
0.44 py3compat.py(36):         return chr(s)
0.44 Counter.py(62):         n >>= 8
0.44 Counter.py(57):     for i in range(nbytes):
0.44 Counter.py(63):     return b("").join(retval)
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 Counter.py(49):     if little_endian:
0.44 Counter.py(50):         return _counter._newLE(bstr(prefix), bstr(suffix), initval, allow_wraparound=allow_wraparound, disable_shortcut=disable_shortcut)
 --- modulename: py3compat, funcname: bstr
0.44 py3compat.py(38):         return str(s)
 --- modulename: py3compat, funcname: bstr
0.44 py3compat.py(38):         return str(s)
0.44 FortunaGenerator.py(67):         self.key = None
0.44 FortunaGenerator.py(70):         self.block_size_shift = exact_log2(self.block_size)
 --- modulename: _number_new, funcname: exact_log2
0.44 _number_new.py(75):     if not isinstance(num, (int, long)):
0.44 _number_new.py(78):     n = long(num)
0.44 _number_new.py(79):     if n <= 0:
0.44 _number_new.py(82):     i = 0
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(84):         if (n & 1) and n != 1:
0.44 _number_new.py(86):         i += 1
0.44 _number_new.py(87):         n >>= 1
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(84):         if (n & 1) and n != 1:
0.44 _number_new.py(86):         i += 1
0.44 _number_new.py(87):         n >>= 1
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(84):         if (n & 1) and n != 1:
0.44 _number_new.py(86):         i += 1
0.44 _number_new.py(87):         n >>= 1
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(84):         if (n & 1) and n != 1:
0.44 _number_new.py(86):         i += 1
0.44 _number_new.py(87):         n >>= 1
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(84):         if (n & 1) and n != 1:
0.44 _number_new.py(86):         i += 1
0.44 _number_new.py(87):         n >>= 1
0.44 _number_new.py(83):     while n != 0:
0.44 _number_new.py(88):     i -= 1
0.44 _number_new.py(90):     assert num == (1L << i)
0.44 _number_new.py(91):     return i
0.44 FortunaGenerator.py(71):         assert (1 << self.block_size_shift) == self.block_size
0.44 FortunaGenerator.py(73):         self.blocks_per_key = exact_div(self.key_size, self.block_size)
 --- modulename: _number_new, funcname: exact_div
0.44 _number_new.py(104):     if not isinstance(p, (int, long)) or not isinstance(d, (int, long)):
0.44 _number_new.py(107):     if d == 0 and allow_divzero:
0.44 _number_new.py(112):         (n, r) = divmod(p, d)
0.44 _number_new.py(113):         if r != 0:
0.44 _number_new.py(116):     assert p == n * d
0.44 _number_new.py(117):     return n
0.44 FortunaGenerator.py(74):         assert self.key_size == self.blocks_per_key * self.block_size
0.44 FortunaGenerator.py(76):         self.max_bytes_per_request = self.max_blocks_per_request * self.block_size
0.44 FortunaAccumulator.py(103):         self.last_reseed = None
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.44 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.44 SHAd256.py(92):     if data is None:
0.44 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.44 py3compat.py(34):         return s
0.44 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.44 SHAd256.py(56):         if internal_api_check is not self._internal:
0.44 SHAd256.py(58):         self._h = sha256_hash_obj
0.44 FortunaAccumulator.py(72):         self.length = 0
0.44 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.44 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.45 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.45 SHAd256.py(92):     if data is None:
0.45 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.45 py3compat.py(34):         return s
0.45 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.45 SHAd256.py(56):         if internal_api_check is not self._internal:
0.45 SHAd256.py(58):         self._h = sha256_hash_obj
0.45 FortunaAccumulator.py(72):         self.length = 0
0.45 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.45 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.45 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.45 SHAd256.py(92):     if data is None:
0.45 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.45 py3compat.py(34):         return s
0.45 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.45 SHAd256.py(56):         if internal_api_check is not self._internal:
0.45 SHAd256.py(58):         self._h = sha256_hash_obj
0.45 FortunaAccumulator.py(72):         self.length = 0
0.45 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.45 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.45 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.45 SHAd256.py(92):     if data is None:
0.45 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.45 py3compat.py(34):         return s
0.45 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.45 SHAd256.py(56):         if internal_api_check is not self._internal:
0.45 SHAd256.py(58):         self._h = sha256_hash_obj
0.45 FortunaAccumulator.py(72):         self.length = 0
0.45 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
 --- modulename: FortunaAccumulator, funcname: __init__
0.45 FortunaAccumulator.py(55):         self.reset()
 --- modulename: FortunaAccumulator, funcname: reset
0.45 FortunaAccumulator.py(71):         self._h = SHAd256.new()
 --- modulename: SHAd256, funcname: new
0.45 SHAd256.py(92):     if data is None:
0.45 SHAd256.py(93):         data=b("")
 --- modulename: py3compat, funcname: b
0.45 py3compat.py(34):         return s
0.45 SHAd256.py(95):     return _SHAd256(_SHAd256._internal, SHA256.new(data))
 --- modulename: SHAd256, funcname: __init__
0.45 SHAd256.py(56):         if internal_api_check is not self._internal:
0.45 SHAd256.py(58):         self._h = sha256_hash_obj
0.45 FortunaAccumulator.py(72):         self.length = 0
0.45 FortunaAccumulator.py(109):         self.pools = [FortunaPool() for i in range(32)]     # 32 pools
0.45 FortunaAccumulator.py(110):         assert(self.pools[0] is not self.pools[1])
0.45 _UserFriendlyRNG.py(86):         self._ec = _EntropyCollector(self._fa)
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.45 _UserFriendlyRNG.py(53):         self._osrng = OSRNG.new()
 --- modulename: posix, funcname: new
0.45 posix.py(60):     return DevURandomRNG(*args, **kwargs)
 --- modulename: posix, funcname: __init__
0.45 posix.py(36):         if devname is None:
0.45 posix.py(37):             self.name = "/dev/urandom"
0.45 posix.py(42):         f = open(self.name, "rb", 0)
0.45 posix.py(43):         fmode = os.fstat(f.fileno())[stat.ST_MODE]
0.45 posix.py(44):         if not stat.S_ISCHR(fmode):
 --- modulename: stat, funcname: S_ISCHR
0.45 stat.py(44):     return S_IFMT(mode) == S_IFCHR
 --- modulename: stat, funcname: S_IFMT
0.45 stat.py(25):     return mode & 0170000
0.45 posix.py(48):         self.__file = f
0.45 posix.py(49):         self._read = f.read
0.45 posix.py(51):         BaseRNG.__init__(self)
 --- modulename: rng_base, funcname: __init__
0.45 rng_base.py(33):         self.closed = False
0.45 rng_base.py(34):         self._selftest()
 --- modulename: rng_base, funcname: _selftest
0.45 rng_base.py(41):         data = self.read(16)
 --- modulename: rng_base, funcname: read
0.45 rng_base.py(68):         if self.closed:
0.45 rng_base.py(70):         if not isinstance(N, (long, int)):
0.45 rng_base.py(72):         if N < 0:
0.45 rng_base.py(74):         elif N == 0:
0.45 rng_base.py(76):         data = self._read(N)
0.45 rng_base.py(77):         if len(data) != N:
0.45 rng_base.py(79):         return data
0.45 rng_base.py(42):         if len(data) != 16:
0.45 rng_base.py(47):         data2 = self.read(16)
 --- modulename: rng_base, funcname: read
0.45 rng_base.py(68):         if self.closed:
0.45 rng_base.py(70):         if not isinstance(N, (long, int)):
0.45 rng_base.py(72):         if N < 0:
0.45 rng_base.py(74):         elif N == 0:
0.45 rng_base.py(76):         data = self._read(N)
0.45 rng_base.py(77):         if len(data) != N:
0.45 rng_base.py(79):         return data
0.45 rng_base.py(48):         if data == data2:
0.45 _UserFriendlyRNG.py(54):         self._osrng_es = _EntropySource(accumulator, 255)
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.45 _UserFriendlyRNG.py(42):         self._fortuna = accumulator
0.45 _UserFriendlyRNG.py(43):         self._src_num = src_num
0.45 _UserFriendlyRNG.py(44):         self._pool_num = 0
0.45 _UserFriendlyRNG.py(55):         self._time_es = _EntropySource(accumulator, 254)
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.45 _UserFriendlyRNG.py(42):         self._fortuna = accumulator
0.45 _UserFriendlyRNG.py(43):         self._src_num = src_num
0.45 _UserFriendlyRNG.py(44):         self._pool_num = 0
0.45 _UserFriendlyRNG.py(56):         self._clock_es = _EntropySource(accumulator, 253)
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.45 _UserFriendlyRNG.py(42):         self._fortuna = accumulator
0.45 _UserFriendlyRNG.py(43):         self._src_num = src_num
0.45 _UserFriendlyRNG.py(44):         self._pool_num = 0
0.45 _UserFriendlyRNG.py(87):         self.reinit()
 --- modulename: _UserFriendlyRNG, funcname: reinit
0.45 _UserFriendlyRNG.py(154):         self._lock.acquire()
0.45 _UserFriendlyRNG.py(155):         try:
0.45 _UserFriendlyRNG.py(156):             return _UserFriendlyRNG.reinit(self)
 --- modulename: _UserFriendlyRNG, funcname: reinit
0.45 _UserFriendlyRNG.py(93):         self._pid = os.getpid()
0.45 _UserFriendlyRNG.py(94):         self._ec.reinit()
 --- modulename: _UserFriendlyRNG, funcname: reinit
0.45 _UserFriendlyRNG.py(61):         for i in range(2):
0.45 _UserFriendlyRNG.py(62):             block = self._osrng.read(32*32)
 --- modulename: rng_base, funcname: read
0.45 rng_base.py(68):         if self.closed:
0.45 rng_base.py(70):         if not isinstance(N, (long, int)):
0.45 rng_base.py(72):         if N < 0:
0.45 rng_base.py(74):         elif N == 0:
0.45 rng_base.py(76):         data = self._read(N)
0.45 rng_base.py(77):         if len(data) != N:
0.45 rng_base.py(79):         return data
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.45 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.45 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.45 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.45 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.45 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.45 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.45 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.45 SHAd256.py(84):         self._h.update(data)
0.45 FortunaAccumulator.py(59):         self.length += len(data)
0.45 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.45 _UserFriendlyRNG.py(63):             for p in range(32):
0.45 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(65):             block = None
0.46 _UserFriendlyRNG.py(61):         for i in range(2):
0.46 _UserFriendlyRNG.py(62):             block = self._osrng.read(32*32)
 --- modulename: rng_base, funcname: read
0.46 rng_base.py(68):         if self.closed:
0.46 rng_base.py(70):         if not isinstance(N, (long, int)):
0.46 rng_base.py(72):         if N < 0:
0.46 rng_base.py(74):         elif N == 0:
0.46 rng_base.py(76):         data = self._read(N)
0.46 rng_base.py(77):         if len(data) != N:
0.46 rng_base.py(79):         return data
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.46 _UserFriendlyRNG.py(63):             for p in range(32):
0.46 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.46 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.46 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.46 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.46 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.46 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.46 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.46 SHAd256.py(84):         self._h.update(data)
0.46 FortunaAccumulator.py(59):         self.length += len(data)
0.46 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.46 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(64):                 self._osrng_es.feed(block[p*32:(p+1)*32])
 --- modulename: _UserFriendlyRNG, funcname: feed
0.47 _UserFriendlyRNG.py(47):         self._fortuna.add_random_event(self._src_num, self._pool_num, data)
 --- modulename: FortunaAccumulator, funcname: add_random_event
0.47 FortunaAccumulator.py(138):         assert 1 <= len(data) <= 32
0.47 FortunaAccumulator.py(139):         assert 0 <= source_number <= 255
0.47 FortunaAccumulator.py(140):         assert 0 <= pool_number <= 31
0.47 FortunaAccumulator.py(141):         self.pools[pool_number].append(bchr(source_number))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(142):         self.pools[pool_number].append(bchr(len(data)))
 --- modulename: py3compat, funcname: bchr
0.47 py3compat.py(36):         return chr(s)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 FortunaAccumulator.py(143):         self.pools[pool_number].append(data)
 --- modulename: FortunaAccumulator, funcname: append
0.47 FortunaAccumulator.py(58):         self._h.update(data)
 --- modulename: SHAd256, funcname: update
0.47 SHAd256.py(84):         self._h.update(data)
0.47 FortunaAccumulator.py(59):         self.length += len(data)
0.47 _UserFriendlyRNG.py(48):         self._pool_num = (self._pool_num + 1) & 31
0.47 _UserFriendlyRNG.py(63):             for p in range(32):
0.47 _UserFriendlyRNG.py(65):             block = None
0.47 _UserFriendlyRNG.py(61):         for i in range(2):
0.47 _UserFriendlyRNG.py(66):         self._osrng.flush()
 --- modulename: rng_base, funcname: flush
0.47 rng_base.py(64):         pass
0.47 _UserFriendlyRNG.py(158):             self._lock.release()
0.47 _UserFriendlyRNG.py(201):         return _singleton
0.47 _UserFriendlyRNG.py(203):         _singleton_lock.release()
 --- modulename: _UserFriendlyRNG, funcname: __init__
0.47 _UserFriendlyRNG.py(169):         self.closed = False
0.47 _UserFriendlyRNG.py(170):         self._singleton = singleton
0.47 common.py(103): import sys
0.47 common.py(104): if sys.version_info < (2, 3):
0.47 common.py(118):     import logging
 --- modulename: __init__, funcname: <module>
0.47 __init__.py(24): """
0.47 __init__.py(26): import sys, os, time, cStringIO, traceback, warnings, weakref
0.47 __init__.py(28): __all__ = ['BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR',
0.47 __init__.py(29):            'FATAL', 'FileHandler', 'Filter', 'Formatter', 'Handler', 'INFO',
0.47 __init__.py(30):            'LogRecord', 'Logger', 'LoggerAdapter', 'NOTSET', 'NullHandler',
0.47 __init__.py(31):            'StreamHandler', 'WARN', 'WARNING', 'addLevelName', 'basicConfig',
0.47 __init__.py(32):            'captureWarnings', 'critical', 'debug', 'disable', 'error',
0.47 __init__.py(33):            'exception', 'fatal', 'getLevelName', 'getLogger', 'getLoggerClass',
0.47 __init__.py(34):            'info', 'log', 'makeLogRecord', 'setLoggerClass', 'warn', 'warning']
0.47 __init__.py(36): try:
0.47 __init__.py(37):     import codecs
0.47 __init__.py(41): try:
0.47 __init__.py(42):     import thread
0.47 __init__.py(43):     import threading
0.47 __init__.py(47): __author__  = "Vinay Sajip <vinay_sajip@red-dove.com>"
0.47 __init__.py(48): __status__  = "production"
0.47 __init__.py(49): __version__ = "0.5.1.2"
0.47 __init__.py(50): __date__    = "07 February 2010"
0.47 __init__.py(55): try:
0.47 __init__.py(56):     unicode
0.47 __init__.py(57):     _unicode = True
0.47 __init__.py(65): if hasattr(sys, 'frozen'): #support for py2exe
0.47 __init__.py(67): elif __file__[-4:].lower() in ['.pyc', '.pyo']:
0.47 __init__.py(68):     _srcfile = __file__[:-4] + '.py'
0.47 __init__.py(71): _srcfile = os.path.normcase(_srcfile)
 --- modulename: posixpath, funcname: normcase
0.47 posixpath.py(45):     return s
0.47 __init__.py(74): def currentframe():
0.47 __init__.py(81): if hasattr(sys, '_getframe'): currentframe = lambda: sys._getframe(3)
0.47 __init__.py(94): _startTime = time.time()
0.47 __init__.py(100): raiseExceptions = 1
0.47 __init__.py(105): logThreads = 1
0.47 __init__.py(110): logMultiprocessing = 1
0.47 __init__.py(115): logProcesses = 1
0.47 __init__.py(128): CRITICAL = 50
0.47 __init__.py(129): FATAL = CRITICAL
0.47 __init__.py(130): ERROR = 40
0.47 __init__.py(131): WARNING = 30
0.47 __init__.py(132): WARN = WARNING
0.47 __init__.py(133): INFO = 20
0.47 __init__.py(134): DEBUG = 10
0.47 __init__.py(135): NOTSET = 0
0.47 __init__.py(137): _levelNames = {
0.47 __init__.py(138):     CRITICAL : 'CRITICAL',
0.47 __init__.py(139):     ERROR : 'ERROR',
0.47 __init__.py(140):     WARNING : 'WARNING',
0.47 __init__.py(141):     INFO : 'INFO',
0.47 __init__.py(142):     DEBUG : 'DEBUG',
0.47 __init__.py(143):     NOTSET : 'NOTSET',
0.47 __init__.py(144):     'CRITICAL' : CRITICAL,
0.47 __init__.py(145):     'ERROR' : ERROR,
0.47 __init__.py(146):     'WARN' : WARNING,
0.47 __init__.py(147):     'WARNING' : WARNING,
0.47 __init__.py(148):     'INFO' : INFO,
0.47 __init__.py(149):     'DEBUG' : DEBUG,
0.47 __init__.py(150):     'NOTSET' : NOTSET,
0.47 __init__.py(153): def getLevelName(level):
0.47 __init__.py(169): def addLevelName(level, levelName):
0.47 __init__.py(182): def _checkLevel(level):
0.47 __init__.py(205): if thread:
0.47 __init__.py(206):     _lock = threading.RLock()
 --- modulename: threading, funcname: RLock
0.47 threading.py(101):     return _RLock(*args, **kwargs)
 --- modulename: threading, funcname: __init__
0.47 threading.py(106):         _Verbose.__init__(self, verbose)
 --- modulename: threading, funcname: __init__
0.47 threading.py(58):             if verbose is None:
0.47 threading.py(59):                 verbose = _VERBOSE
0.47 threading.py(60):             self.__verbose = verbose
0.47 threading.py(107):         self.__block = _allocate_lock()
0.47 threading.py(108):         self.__owner = None
0.47 threading.py(109):         self.__count = 0
0.47 __init__.py(210): def _acquireLock():
0.47 __init__.py(219): def _releaseLock():
0.47 __init__.py(230): class LogRecord(object):
 --- modulename: __init__, funcname: LogRecord
0.47 __init__.py(230): class LogRecord(object):
0.47 __init__.py(241):     """
0.47 __init__.py(243):                  msg, args, exc_info, func=None):
0.47 __init__.py(307):     def __str__(self):
0.47 __init__.py(311):     def getMessage(self):
0.47 __init__.py(331): def makeLogRecord(dict):
0.47 __init__.py(346): class Formatter(object):
 --- modulename: __init__, funcname: Formatter
0.47 __init__.py(346): class Formatter(object):
0.47 __init__.py(386):     """
0.47 __init__.py(388):     converter = time.localtime
0.47 __init__.py(390):     def __init__(self, fmt=None, datefmt=None):
0.47 __init__.py(404):     def formatTime(self, record, datefmt=None):
0.47 __init__.py(430):     def formatException(self, ei):
0.47 __init__.py(445):     def usesTime(self):
0.47 __init__.py(451):     def format(self, record):
0.47 __init__.py(492): _defaultFormatter = Formatter()
 --- modulename: __init__, funcname: __init__
0.47 __init__.py(398):         if fmt:
0.47 __init__.py(401):             self._fmt = "%(message)s"
0.47 __init__.py(402):         self.datefmt = datefmt
0.47 __init__.py(494): class BufferingFormatter(object):
 --- modulename: __init__, funcname: BufferingFormatter
0.47 __init__.py(494): class BufferingFormatter(object):
0.47 __init__.py(497):     """
0.47 __init__.py(498):     def __init__(self, linefmt=None):
0.47 __init__.py(508):     def formatHeader(self, records):
0.47 __init__.py(514):     def formatFooter(self, records):
0.47 __init__.py(520):     def format(self, records):
0.47 __init__.py(536): class Filter(object):
 --- modulename: __init__, funcname: Filter
0.47 __init__.py(536): class Filter(object):
0.47 __init__.py(546):     """
0.47 __init__.py(547):     def __init__(self, name=''):
0.47 __init__.py(558):     def filter(self, record):
0.47 __init__.py(573): class Filterer(object):
 --- modulename: __init__, funcname: Filterer
0.47 __init__.py(573): class Filterer(object):
0.47 __init__.py(577):     """
0.47 __init__.py(578):     def __init__(self):
0.47 __init__.py(584):     def addFilter(self, filter):
0.47 __init__.py(591):     def removeFilter(self, filter):
0.47 __init__.py(598):     def filter(self, record):
0.47 __init__.py(617): _handlers = weakref.WeakValueDictionary()  #map of handler names to handlers
 --- modulename: weakref, funcname: __init__
0.47 weakref.py(48):         def remove(wr, selfref=ref(self)):
0.47 weakref.py(52):         self._remove = remove
0.47 weakref.py(53):         UserDict.UserDict.__init__(self, *args, **kw)
 --- modulename: UserDict, funcname: __init__
0.47 UserDict.py(5):         self.data = {}
0.47 UserDict.py(6):         if dict is not None:
0.47 UserDict.py(8):         if len(kwargs):
0.47 __init__.py(618): _handlerList = [] # added to allow handlers to be removed in reverse of order initialized
0.47 __init__.py(620): def _removeHandlerRef(wr):
0.47 __init__.py(635): def _addHandlerRef(handler):
0.47 __init__.py(645): class Handler(Filterer):
 --- modulename: __init__, funcname: Handler
0.47 __init__.py(645): class Handler(Filterer):
0.47 __init__.py(653):     """
0.47 __init__.py(654):     def __init__(self, level=NOTSET):
0.47 __init__.py(667):     def get_name(self):
0.47 __init__.py(670):     def set_name(self, name):
0.47 __init__.py(681):     name = property(get_name, set_name)
0.47 __init__.py(683):     def createLock(self):
0.47 __init__.py(692):     def acquire(self):
0.47 __init__.py(699):     def release(self):
0.47 __init__.py(706):     def setLevel(self, level):
0.47 __init__.py(712):     def format(self, record):
0.47 __init__.py(725):     def emit(self, record):
0.47 __init__.py(735):     def handle(self, record):
0.47 __init__.py(753):     def setFormatter(self, fmt):
0.47 __init__.py(759):     def flush(self):
0.47 __init__.py(768):     def close(self):
0.47 __init__.py(785):     def handleError(self, record):
0.47 __init__.py(809): class StreamHandler(Handler):
 --- modulename: __init__, funcname: StreamHandler
0.47 __init__.py(809): class StreamHandler(Handler):
0.47 __init__.py(814):     """
0.47 __init__.py(816):     def __init__(self, stream=None):
0.47 __init__.py(827):     def flush(self):
0.47 __init__.py(834):     def emit(self, record):
0.47 __init__.py(876): class FileHandler(StreamHandler):
 --- modulename: __init__, funcname: FileHandler
0.47 __init__.py(876): class FileHandler(StreamHandler):
0.47 __init__.py(879):     """
0.47 __init__.py(880):     def __init__(self, filename, mode='a', encoding=None, delay=0):
0.47 __init__.py(899):     def close(self):
0.47 __init__.py(910):     def _open(self):
0.47 __init__.py(921):     def emit(self, record):
0.47 __init__.py(936): class PlaceHolder(object):
 --- modulename: __init__, funcname: PlaceHolder
0.47 __init__.py(936): class PlaceHolder(object):
0.47 __init__.py(941):     """
0.47 __init__.py(942):     def __init__(self, alogger):
0.47 __init__.py(949):     def append(self, alogger):
0.47 __init__.py(961): _loggerClass = None
0.47 __init__.py(963): def setLoggerClass(klass):
0.47 __init__.py(976): def getLoggerClass():
0.47 __init__.py(983): class Manager(object):
 --- modulename: __init__, funcname: Manager
0.47 __init__.py(983): class Manager(object):
0.47 __init__.py(987):     """
0.47 __init__.py(988):     def __init__(self, rootnode):
0.47 __init__.py(998):     def getLogger(self, name):
0.47 __init__.py(1034):     def setLoggerClass(self, klass):
0.47 __init__.py(1044):     def _fixupParents(self, alogger):
0.47 __init__.py(1068):     def _fixupChildren(self, ph, alogger):
0.47 __init__.py(1085): class Logger(Filterer):
 --- modulename: __init__, funcname: Logger
0.47 __init__.py(1085): class Logger(Filterer):
0.47 __init__.py(1099):     """
0.47 __init__.py(1100):     def __init__(self, name, level=NOTSET):
0.47 __init__.py(1112):     def setLevel(self, level):
0.47 __init__.py(1118):     def debug(self, msg, *args, **kwargs):
0.47 __init__.py(1130):     def info(self, msg, *args, **kwargs):
0.47 __init__.py(1142):     def warning(self, msg, *args, **kwargs):
0.47 __init__.py(1154):     warn = warning
0.47 __init__.py(1156):     def error(self, msg, *args, **kwargs):
0.47 __init__.py(1168):     def exception(self, msg, *args):
0.47 __init__.py(1174):     def critical(self, msg, *args, **kwargs):
0.47 __init__.py(1186):     fatal = critical
0.47 __init__.py(1188):     def log(self, level, msg, *args, **kwargs):
0.47 __init__.py(1205):     def findCaller(self):
0.47 __init__.py(1226):     def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None):
0.47 __init__.py(1239):     def _log(self, level, msg, args, exc_info=None, extra=None):
0.47 __init__.py(1260):     def handle(self, record):
0.47 __init__.py(1270):     def addHandler(self, hdlr):
0.47 __init__.py(1281):     def removeHandler(self, hdlr):
0.47 __init__.py(1292):     def callHandlers(self, record):
0.47 __init__.py(1318):     def getEffectiveLevel(self):
0.47 __init__.py(1332):     def isEnabledFor(self, level):
0.47 __init__.py(1340):     def getChild(self, suffix):
0.47 __init__.py(1359): class RootLogger(Logger):
 --- modulename: __init__, funcname: RootLogger
0.47 __init__.py(1359): class RootLogger(Logger):
0.47 __init__.py(1364):     """
0.47 __init__.py(1365):     def __init__(self, level):
0.47 __init__.py(1371): _loggerClass = Logger
0.47 __init__.py(1373): class LoggerAdapter(object):
 --- modulename: __init__, funcname: LoggerAdapter
0.47 __init__.py(1373): class LoggerAdapter(object):
0.47 __init__.py(1377):     """
0.47 __init__.py(1379):     def __init__(self, logger, extra):
0.47 __init__.py(1393):     def process(self, msg, kwargs):
0.47 __init__.py(1406):     def debug(self, msg, *args, **kwargs):
0.47 __init__.py(1414):     def info(self, msg, *args, **kwargs):
0.47 __init__.py(1422):     def warning(self, msg, *args, **kwargs):
0.47 __init__.py(1430):     def error(self, msg, *args, **kwargs):
0.47 __init__.py(1438):     def exception(self, msg, *args, **kwargs):
0.47 __init__.py(1447):     def critical(self, msg, *args, **kwargs):
0.47 __init__.py(1455):     def log(self, level, msg, *args, **kwargs):
0.47 __init__.py(1463):     def isEnabledFor(self, level):
0.47 __init__.py(1469): root = RootLogger(WARNING)
 --- modulename: __init__, funcname: __init__
0.47 __init__.py(1369):         Logger.__init__(self, "root", level)
 --- modulename: __init__, funcname: __init__
0.47 __init__.py(1104):         Filterer.__init__(self)
 --- modulename: __init__, funcname: __init__
0.47 __init__.py(582):         self.filters = []
0.47 __init__.py(1105):         self.name = name
0.47 __init__.py(1106):         self.level = _checkLevel(level)
 --- modulename: __init__, funcname: _checkLevel
0.47 __init__.py(183):     if isinstance(level, int):
0.47 __init__.py(184):         rv = level
0.47 __init__.py(191):     return rv
0.47 __init__.py(1107):         self.parent = None
0.47 __init__.py(1108):         self.propagate = 1
0.47 __init__.py(1109):         self.handlers = []
0.47 __init__.py(1110):         self.disabled = 0
0.47 __init__.py(1470): Logger.root = root
0.47 __init__.py(1471): Logger.manager = Manager(Logger.root)
 --- modulename: __init__, funcname: __init__
0.47 __init__.py(992):         self.root = rootnode
0.47 __init__.py(993):         self.disable = 0
0.47 __init__.py(994):         self.emittedNoHandlerWarning = 0
0.47 __init__.py(995):         self.loggerDict = {}
0.47 __init__.py(996):         self.loggerClass = None
0.47 __init__.py(1477): BASIC_FORMAT = "%(levelname)s:%(name)s:%(message)s"
0.47 __init__.py(1479): def basicConfig(**kwargs):
0.47 __init__.py(1539): def getLogger(name=None):
0.47 __init__.py(1559): def critical(msg, *args, **kwargs):
0.47 __init__.py(1567): fatal = critical
0.47 __init__.py(1569): def error(msg, *args, **kwargs):
0.47 __init__.py(1577): def exception(msg, *args):
0.47 __init__.py(1584): def warning(msg, *args, **kwargs):
0.47 __init__.py(1592): warn = warning
0.47 __init__.py(1594): def info(msg, *args, **kwargs):
0.47 __init__.py(1602): def debug(msg, *args, **kwargs):
0.47 __init__.py(1610): def log(level, msg, *args, **kwargs):
0.47 __init__.py(1618): def disable(level):
0.47 __init__.py(1624): def shutdown(handlerList=_handlerList):
0.47 __init__.py(1655): import atexit
 --- modulename: atexit, funcname: <module>
0.47 atexit.py(6): """
0.47 atexit.py(8): __all__ = ["register"]
0.47 atexit.py(10): import sys
0.47 atexit.py(12): _exithandlers = []
0.47 atexit.py(13): def _run_exitfuncs():
0.47 atexit.py(37): def register(func, *targs, **kargs):
0.47 atexit.py(49): if hasattr(sys, "exitfunc"):
0.47 atexit.py(52): sys.exitfunc = _run_exitfuncs
0.47 atexit.py(54): if __name__ == "__main__":
0.47 __init__.py(1656): atexit.register(shutdown)
 --- modulename: atexit, funcname: register
0.47 atexit.py(46):     _exithandlers.append((func, targs, kargs))
0.47 atexit.py(47):     return func
0.47 __init__.py(1660): class NullHandler(Handler):
 --- modulename: __init__, funcname: NullHandler
0.47 __init__.py(1660): class NullHandler(Handler):
0.47 __init__.py(1669):     """
0.47 __init__.py(1670):     def handle(self, record):
0.47 __init__.py(1673):     def emit(self, record):
0.47 __init__.py(1676):     def createLock(self):
0.47 __init__.py(1681): _warnings_showwarning = None
0.47 __init__.py(1683): def _showwarning(message, category, filename, lineno, file=None, line=None):
0.47 __init__.py(1701): def captureWarnings(capture):
0.47 common.py(119):     PY22 = False
0.47 common.py(122): DEBUG = logging.DEBUG
0.47 common.py(123): INFO = logging.INFO
0.47 common.py(124): WARNING = logging.WARNING
0.47 common.py(125): ERROR = logging.ERROR
0.47 common.py(126): CRITICAL = logging.CRITICAL
0.47 util.py(33): from paramiko.config import SSHConfig
 --- modulename: config, funcname: <module>
0.47 config.py(21): """
0.47 config.py(23): import fnmatch
 --- modulename: fnmatch, funcname: <module>
0.47 fnmatch.py(11): """
0.47 fnmatch.py(13): import re
0.47 fnmatch.py(15): __all__ = ["filter", "fnmatch", "fnmatchcase", "translate"]
0.47 fnmatch.py(17): _cache = {}
0.47 fnmatch.py(18): _MAXCACHE = 100
0.47 fnmatch.py(20): def _purge():
0.47 fnmatch.py(24): def fnmatch(name, pat):
0.47 fnmatch.py(45): def filter(names, pat):
0.47 fnmatch.py(67): def fnmatchcase(name, pat):
0.47 fnmatch.py(81): def translate(pat):
0.47 config.py(26): class SSHConfig (object):
 --- modulename: config, funcname: SSHConfig
0.47 config.py(26): class SSHConfig (object):
0.47 config.py(35):     """
0.47 config.py(37):     def __init__(self):
0.47 config.py(43):     def parse(self, file_obj):
0.47 config.py(84):     def lookup(self, hostname):
0.47 util.py(37): if sys.version_info < (2,3):
0.47 util.py(48): def inflate_long(s, always_positive=False):
0.47 util.py(65): def deflate_long(n, add_sign_padding=True):
0.47 util.py(94): def format_binary_weird(data):
0.47 util.py(104): def format_binary(data, prefix=''):
0.47 util.py(114): def format_binary_line(data):
0.47 util.py(119): def hexify(s):
0.47 util.py(122): def unhexify(s):
0.47 util.py(125): def safe_string(s):
0.47 util.py(136): def bit_length(n):
0.47 util.py(147): def tb_strings():
0.47 util.py(150): def generate_key_bytes(hashclass, salt, key, nbytes):
0.47 util.py(184): def load_host_keys(filename):
0.47 util.py(204): def parse_ssh_config(file_obj):
0.47 util.py(212): def lookup_ssh_host_config(hostname, config):
0.47 util.py(218): def mod_inverse(x, m):
0.47 util.py(232): _g_thread_ids = {}
0.47 util.py(233): _g_thread_counter = 0
0.47 util.py(234): _g_thread_lock = threading.Lock()
0.47 util.py(235): def get_thread_id():
0.47 util.py(249): def log_to_file(filename, level=DEBUG):
0.47 util.py(262): class PFilter (object):
 --- modulename: util, funcname: PFilter
0.47 util.py(262): class PFilter (object):
0.47 util.py(263):     def filter(self, record):
0.47 util.py(266): _pfilter = PFilter()
0.47 util.py(268): def get_logger(name):
0.47 util.py(274): class Counter (object):
 --- modulename: util, funcname: Counter
0.47 util.py(274): class Counter (object):
0.47 util.py(275):     """Stateful counter for CTR mode crypto"""
0.47 util.py(276):     def __init__(self, nbits, initial_value=1L, overflow=0L):
0.47 util.py(287):     def __call__(self):
0.47 util.py(300):     def new(cls, nbits, initial_value=1L, overflow=0L):
0.47 util.py(302):     new = classmethod(new)
0.47 transport.py(33): from paramiko.auth_handler import AuthHandler
 --- modulename: auth_handler, funcname: <module>
0.47 auth_handler.py(21): """
0.48 auth_handler.py(23): import threading
0.48 auth_handler.py(24): import weakref
0.48 auth_handler.py(27): import encodings.utf_8
0.48 auth_handler.py(29): from paramiko.common import *
0.48 auth_handler.py(30): from paramiko import util
0.48 auth_handler.py(31): from paramiko.message import Message
 --- modulename: message, funcname: <module>
0.48 message.py(21): """
0.48 message.py(23): import struct
0.48 message.py(24): import cStringIO
0.48 message.py(26): from paramiko import util
0.48 message.py(29): class Message (object):
 --- modulename: message, funcname: Message
0.48 message.py(29): class Message (object):
0.48 message.py(38):     """
0.48 message.py(40):     def __init__(self, content=None):
0.48 message.py(53):     def __str__(self):
0.48 message.py(62):     def __repr__(self):
0.48 message.py(70):     def rewind(self):
0.48 message.py(77):     def get_remainder(self):
0.48 message.py(90):     def get_so_far(self):
0.48 message.py(103):     def get_bytes(self, n):
0.48 message.py(117):     def get_byte(self):
0.48 message.py(128):     def get_boolean(self):
0.48 message.py(138):     def get_int(self):
0.48 message.py(147):     def get_int64(self):
0.48 message.py(156):     def get_mpint(self):
0.48 message.py(165):     def get_string(self):
0.48 message.py(176):     def get_list(self):
0.48 message.py(186):     def add_bytes(self, b):
0.48 message.py(196):     def add_byte(self, b):
0.48 message.py(206):     def add_boolean(self, b):
0.48 message.py(219):     def add_int(self, n):
0.48 message.py(229):     def add_int64(self, n):
0.48 message.py(239):     def add_mpint(self, z):
0.48 message.py(250):     def add_string(self, s):
0.48 message.py(261):     def add_list(self, l):
0.48 message.py(273):     def _add(self, i):
0.48 message.py(290):     def add(self, *seq):
0.48 auth_handler.py(32): from paramiko.ssh_exception import SSHException, AuthenticationException, \
 --- modulename: ssh_exception, funcname: <module>
0.48 ssh_exception.py(21): """
0.48 ssh_exception.py(24): class SSHException (Exception):
 --- modulename: ssh_exception, funcname: SSHException
0.48 ssh_exception.py(24): class SSHException (Exception):
0.48 ssh_exception.py(27):     """
0.48 ssh_exception.py(28):     pass
0.48 ssh_exception.py(31): class AuthenticationException (SSHException):
 --- modulename: ssh_exception, funcname: AuthenticationException
0.48 ssh_exception.py(31): class AuthenticationException (SSHException):
0.48 ssh_exception.py(38):     """
0.48 ssh_exception.py(39):     pass
0.48 ssh_exception.py(42): class PasswordRequiredException (AuthenticationException):
 --- modulename: ssh_exception, funcname: PasswordRequiredException
0.48 ssh_exception.py(42): class PasswordRequiredException (AuthenticationException):
0.48 ssh_exception.py(45):     """
0.48 ssh_exception.py(46):     pass
0.48 ssh_exception.py(49): class BadAuthenticationType (AuthenticationException):
 --- modulename: ssh_exception, funcname: BadAuthenticationType
0.48 ssh_exception.py(49): class BadAuthenticationType (AuthenticationException):
0.48 ssh_exception.py(61):     """
0.48 ssh_exception.py(62):     allowed_types = []
0.48 ssh_exception.py(64):     def __init__(self, explanation, types):
0.48 ssh_exception.py(68):     def __str__(self):
0.48 ssh_exception.py(72): class PartialAuthentication (AuthenticationException):
 --- modulename: ssh_exception, funcname: PartialAuthentication
0.48 ssh_exception.py(72): class PartialAuthentication (AuthenticationException):
0.48 ssh_exception.py(75):     """
0.48 ssh_exception.py(76):     allowed_types = []
0.48 ssh_exception.py(78):     def __init__(self, types):
0.48 ssh_exception.py(83): class ChannelException (SSHException):
 --- modulename: ssh_exception, funcname: ChannelException
0.48 ssh_exception.py(83): class ChannelException (SSHException):
0.48 ssh_exception.py(91):     """
0.48 ssh_exception.py(92):     def __init__(self, code, text):
0.48 ssh_exception.py(97): class BadHostKeyException (SSHException):
 --- modulename: ssh_exception, funcname: BadHostKeyException
0.48 ssh_exception.py(97): class BadHostKeyException (SSHException):
0.48 ssh_exception.py(109):     """
0.48 ssh_exception.py(110):     def __init__(self, hostname, got_key, expected_key):
0.48 auth_handler.py(34): from paramiko.server import InteractiveQuery
 --- modulename: server, funcname: <module>
0.48 server.py(21): """
0.49 server.py(23): import threading
0.49 server.py(24): from paramiko.common import *
0.49 server.py(25): from paramiko import util
0.49 server.py(28): class InteractiveQuery (object):
 --- modulename: server, funcname: InteractiveQuery
0.49 server.py(28): class InteractiveQuery (object):
0.49 server.py(31):     """
0.49 server.py(33):     def __init__(self, name='', instructions='', *prompts):
0.49 server.py(56):     def add_prompt(self, prompt, echo=True):
0.49 server.py(70): class ServerInterface (object):
 --- modulename: server, funcname: ServerInterface
0.49 server.py(70): class ServerInterface (object):
0.49 server.py(78):     """
0.49 server.py(80):     def check_channel_request(self, kind, chanid):
0.49 server.py(124):     def get_allowed_auths(self, username):
0.49 server.py(143):     def check_auth_none(self, username):
0.49 server.py(162):     def check_auth_password(self, username, password):
0.49 server.py(189):     def check_auth_publickey(self, username, key):
0.49 server.py(222):     def check_auth_interactive(self, username, submethods):
0.49 server.py(247):     def check_auth_interactive_response(self, responses):
0.49 server.py(279):     def check_port_forward_request(self, address, port):
0.49 server.py(302):     def cancel_port_forward_request(self, address, port):
0.49 server.py(315):     def check_global_request(self, kind, msg):
0.49 server.py(351):     def check_channel_pty_request(self, channel, term, width, height, pixelwidth, pixelheight,
0.49 server.py(379):     def check_channel_shell_request(self, channel):
0.49 server.py(396):     def check_channel_exec_request(self, channel, command):
0.49 server.py(417):     def check_channel_subsystem_request(self, channel, name):
0.49 server.py(448):     def check_channel_window_change_request(self, channel, width, height, pixelwidth, pixelheight):
0.49 server.py(472):     def check_channel_x11_request(self, channel, single_connection, auth_protocol, auth_cookie, screen_number):
0.49 server.py(496):     def check_channel_direct_tcpip_request(self, chanid, origin, destination):
0.49 server.py(538): class SubsystemHandler (threading.Thread):
 --- modulename: server, funcname: SubsystemHandler
0.49 server.py(538): class SubsystemHandler (threading.Thread):
0.49 server.py(553):     """
0.49 server.py(554):     def __init__(self, channel, name, server):
0.49 server.py(576):     def get_server(self):
0.49 server.py(585):     def _run(self):
0.49 server.py(598):     def start_subsystem(self, name, transport, channel):
0.49 server.py(625):     def finish_subsystem(self):
0.49 auth_handler.py(37): class AuthHandler (object):
 --- modulename: auth_handler, funcname: AuthHandler
0.49 auth_handler.py(37): class AuthHandler (object):
0.49 auth_handler.py(40):     """
0.49 auth_handler.py(42):     def __init__(self, transport):
0.49 auth_handler.py(56):     def is_authenticated(self):
0.49 auth_handler.py(59):     def get_username(self):
0.49 auth_handler.py(65):     def auth_none(self, username, event):
0.49 auth_handler.py(75):     def auth_publickey(self, username, key, event):
0.49 auth_handler.py(86):     def auth_password(self, username, password, event):
0.49 auth_handler.py(97):     def auth_interactive(self, username, handler, event, submethods=''):
0.49 auth_handler.py(112):     def abort(self):
0.49 auth_handler.py(120):     def _request_auth(self):
0.49 auth_handler.py(126):     def _disconnect_service_not_available(self):
0.49 auth_handler.py(135):     def _disconnect_no_more_auth(self):
0.49 auth_handler.py(144):     def _get_session_blob(self, key, service, username):
0.49 auth_handler.py(156):     def wait_for_response(self, event):
0.49 auth_handler.py(177):     def _parse_service_request(self, m):
0.49 auth_handler.py(189):     def _parse_service_accept(self, m):
0.49 auth_handler.py(222):     def _send_auth_result(self, username, method, result):
0.49 auth_handler.py(244):     def _interactive_query(self, q):
0.49 auth_handler.py(257):     def _parse_userauth_request(self, m):
0.49 auth_handler.py(351):     def _parse_userauth_success(self, m):
0.49 auth_handler.py(358):     def _parse_userauth_failure(self, m):
0.49 auth_handler.py(376):     def _parse_userauth_banner(self, m):
0.49 auth_handler.py(382):     def _parse_userauth_info_request(self, m):
0.49 auth_handler.py(401):     def _parse_userauth_info_response(self, m):
0.49 auth_handler.py(416):     _handler_table = {
0.49 auth_handler.py(417):         MSG_SERVICE_REQUEST: _parse_service_request,
0.49 auth_handler.py(418):         MSG_SERVICE_ACCEPT: _parse_service_accept,
0.49 auth_handler.py(419):         MSG_USERAUTH_REQUEST: _parse_userauth_request,
0.49 auth_handler.py(420):         MSG_USERAUTH_SUCCESS: _parse_userauth_success,
0.49 auth_handler.py(421):         MSG_USERAUTH_FAILURE: _parse_userauth_failure,
0.49 auth_handler.py(422):         MSG_USERAUTH_BANNER: _parse_userauth_banner,
0.49 auth_handler.py(423):         MSG_USERAUTH_INFO_REQUEST: _parse_userauth_info_request,
0.49 auth_handler.py(424):         MSG_USERAUTH_INFO_RESPONSE: _parse_userauth_info_response,
0.49 transport.py(34): from paramiko.channel import Channel
 --- modulename: channel, funcname: <module>
0.49 channel.py(21): """
0.49 channel.py(23): import binascii
0.49 channel.py(24): import sys
0.49 channel.py(25): import time
0.49 channel.py(26): import threading
0.49 channel.py(27): import socket
0.49 channel.py(28): import os
0.49 channel.py(30): from paramiko.common import *
0.49 channel.py(31): from paramiko import util
0.49 channel.py(32): from paramiko.message import Message
0.49 channel.py(33): from paramiko.ssh_exception import SSHException
0.49 channel.py(34): from paramiko.file import BufferedFile
 --- modulename: file, funcname: <module>
0.49 file.py(21): """
0.49 file.py(23): from cStringIO import StringIO
0.49 file.py(26): class BufferedFile (object):
 --- modulename: file, funcname: BufferedFile
0.49 file.py(26): class BufferedFile (object):
0.49 file.py(30):     """
0.49 file.py(32):     _DEFAULT_BUFSIZE = 8192
0.49 file.py(34):     SEEK_SET = 0
0.49 file.py(35):     SEEK_CUR = 1
0.49 file.py(36):     SEEK_END = 2
0.49 file.py(38):     FLAG_READ = 0x1
0.49 file.py(39):     FLAG_WRITE = 0x2
0.49 file.py(40):     FLAG_APPEND = 0x4
0.49 file.py(41):     FLAG_BINARY = 0x10
0.49 file.py(42):     FLAG_BUFFERED = 0x20
0.49 file.py(43):     FLAG_LINE_BUFFERED = 0x40
0.49 file.py(44):     FLAG_UNIVERSAL_NEWLINE = 0x80
0.49 file.py(46):     def __init__(self):
0.49 file.py(61):     def __del__(self):
0.49 file.py(64):     def __iter__(self):
0.49 file.py(79):     def close(self):
0.49 file.py(86):     def flush(self):
0.49 file.py(95):     def next(self):
0.49 file.py(111):     def read(self, size=None):
0.49 file.py(165):     def readline(self, size=None):
0.49 file.py(244):     def readlines(self, sizehint=None):
0.49 file.py(268):     def seek(self, offset, whence=0):
0.49 file.py(288):     def tell(self):
0.49 file.py(299):     def write(self, data):
0.49 file.py(333):     def writelines(self, sequence):
0.49 file.py(347):     def xreadlines(self):
0.49 file.py(361):     def _read(self, size):
0.49 file.py(369):     def _write(self, data):
0.49 file.py(376):     def _get_size(self):
0.49 file.py(391):     def _set_mode(self, mode='r', bufsize=-1):
0.49 file.py(431):     def _write_all(self, data):
0.49 file.py(445):     def _record_newline(self, newline):
0.49 channel.py(35): from paramiko.buffered_pipe import BufferedPipe, PipeTimeout
 --- modulename: buffered_pipe, funcname: <module>
0.49 buffered_pipe.py(23): """
0.49 buffered_pipe.py(25): import array
0.49 buffered_pipe.py(26): import threading
0.49 buffered_pipe.py(27): import time
0.49 buffered_pipe.py(30): class PipeTimeout (IOError):
 --- modulename: buffered_pipe, funcname: PipeTimeout
0.49 buffered_pipe.py(30): class PipeTimeout (IOError):
0.49 buffered_pipe.py(33):     """
0.49 buffered_pipe.py(34):     pass
0.49 buffered_pipe.py(37): class BufferedPipe (object):
 --- modulename: buffered_pipe, funcname: BufferedPipe
0.49 buffered_pipe.py(37): class BufferedPipe (object):
0.49 buffered_pipe.py(42):     """
0.49 buffered_pipe.py(44):     def __init__(self):
0.49 buffered_pipe.py(51):     def set_event(self, event):
0.49 buffered_pipe.py(66):     def feed(self, data):
0.49 buffered_pipe.py(83):     def read_ready(self):
0.49 buffered_pipe.py(101):     def read(self, nbytes, timeout=None):
0.49 buffered_pipe.py(157):     def empty(self):
0.49 buffered_pipe.py(174):     def close(self):
0.49 buffered_pipe.py(188):     def __len__(self):
0.49 channel.py(36): from paramiko import pipe
 --- modulename: pipe, funcname: <module>
0.49 pipe.py(25): """
0.49 pipe.py(27): import sys
0.49 pipe.py(28): import os
0.49 pipe.py(29): import socket
0.49 pipe.py(32): def make_pipe ():
0.49 pipe.py(40): class PosixPipe (object):
 --- modulename: pipe, funcname: PosixPipe
0.49 pipe.py(40): class PosixPipe (object):
0.49 pipe.py(41):     def __init__ (self):
0.49 pipe.py(47):     def close (self):
0.49 pipe.py(53):     def fileno (self):
0.49 pipe.py(56):     def clear (self):
0.49 pipe.py(62):     def set (self):
0.49 pipe.py(68):     def set_forever (self):
0.49 pipe.py(73): class WindowsPipe (object):
 --- modulename: pipe, funcname: WindowsPipe
0.49 pipe.py(73): class WindowsPipe (object):
0.49 pipe.py(77):     """
0.49 pipe.py(78):     def __init__ (self):
0.49 pipe.py(93):     def close (self):
0.49 pipe.py(99):     def fileno (self):
0.49 pipe.py(102):     def clear (self):
0.49 pipe.py(108):     def set (self):
0.49 pipe.py(114):     def set_forever (self):
0.49 pipe.py(119): class OrPipe (object):
 --- modulename: pipe, funcname: OrPipe
0.49 pipe.py(119): class OrPipe (object):
0.49 pipe.py(120):     def __init__(self, pipe):
0.49 pipe.py(125):     def set(self):
0.49 pipe.py(130):     def clear(self):
0.49 pipe.py(136): def make_or_pipe(pipe):
0.49 channel.py(40): MIN_PACKET_SIZE = 1024
0.49 channel.py(43): class Channel (object):
 --- modulename: channel, funcname: Channel
0.49 channel.py(43): class Channel (object):
0.49 channel.py(56):     """
0.49 channel.py(58):     def __init__(self, chanid):
0.49 channel.py(98):     def __del__(self):
0.49 channel.py(104):     def __repr__(self):
0.49 channel.py(125):     def get_pty(self, term='vt100', width=80, height=24):
0.49 channel.py(160):     def invoke_shell(self):
0.49 channel.py(187):     def exec_command(self, command):
0.49 channel.py(215):     def invoke_subsystem(self, subsystem):
0.49 channel.py(242):     def resize_pty(self, width=80, height=24):
0.49 channel.py(269):     def exit_status_ready(self):
0.49 channel.py(282):     def recv_exit_status(self):
0.49 channel.py(299):     def send_exit_status(self, status):
0.49 channel.py(321):     def request_x11(self, screen_number=0, auth_protocol=None, auth_cookie=None,
0.49 channel.py(322):                     single_connection=False, handler=None):
0.49 channel.py(384):     def get_transport(self):
0.49 channel.py(393):     def set_name(self, name):
0.49 channel.py(404):     def get_name(self):
0.49 channel.py(413):     def get_id(self):
0.49 channel.py(425):     def set_combine_stderr(self, combine):
0.49 channel.py(465):     def settimeout(self, timeout):
0.49 channel.py(483):     def gettimeout(self):
0.49 channel.py(494):     def setblocking(self, blocking):
0.49 channel.py(518):     def getpeername(self):
0.49 channel.py(530):     def close(self):
0.49 channel.py(556):     def recv_ready(self):
0.49 channel.py(568):     def recv(self, nbytes):
0.49 channel.py(599):     def recv_stderr_ready(self):
0.49 channel.py(614):     def recv_stderr(self, nbytes):
0.49 channel.py(649):     def send_ready(self):
0.49 channel.py(670):     def send(self, s):
0.49 channel.py(704):     def send_stderr(self, s):
0.49 channel.py(742):     def sendall(self, s):
0.49 channel.py(768):     def sendall_stderr(self, s):
0.49 channel.py(792):     def makefile(self, *params):
0.49 channel.py(803):     def makefile_stderr(self, *params):
0.49 channel.py(821):     def fileno(self):
0.49 channel.py(852):     def shutdown(self, how):
0.49 channel.py(875):     def shutdown_read(self):
0.49 channel.py(887):     def shutdown_write(self):
0.49 channel.py(903):     def _set_transport(self, transport):
0.49 channel.py(907):     def _set_window(self, window_size, max_packet_size):
0.49 channel.py(915):     def _set_remote_channel(self, chanid, window_size, max_packet_size):
0.49 channel.py(922):     def _request_success(self, m):
0.49 channel.py(928):     def _request_failed(self, m):
0.49 channel.py(938):     def _feed(self, m):
0.49 channel.py(946):     def _feed_extended(self, m):
0.49 channel.py(957):     def _window_adjust(self, m):
0.49 channel.py(968):     def _handle_request(self, m):
0.49 channel.py(1041):     def _handle_eof(self, m):
0.49 channel.py(1054):     def _handle_close(self, m):
0.49 channel.py(1069):     def _log(self, level, msg, *args):
0.49 channel.py(1072):     def _event_pending(self):
0.49 channel.py(1076):     def _wait_for_event(self):
0.49 channel.py(1086):     def _set_closed(self):
0.49 channel.py(1098):     def _send_eof(self):
0.49 channel.py(1109):     def _close_internal(self):
0.49 channel.py(1122):     def _unlink(self):
0.49 channel.py(1133):     def _check_add_window(self, n):
0.49 channel.py(1151):     def _wait_for_send_window(self, size):
0.49 channel.py(1190): class ChannelFile (BufferedFile):
 --- modulename: channel, funcname: ChannelFile
0.49 channel.py(1190): class ChannelFile (BufferedFile):
0.49 channel.py(1199):     """
0.49 channel.py(1201):     def __init__(self, channel, mode = 'r', bufsize = -1):
0.49 channel.py(1206):     def __repr__(self):
0.49 channel.py(1214):     def _read(self, size):
0.49 channel.py(1217):     def _write(self, data):
0.49 channel.py(1222): class ChannelStderrFile (ChannelFile):
 --- modulename: channel, funcname: ChannelStderrFile
0.49 channel.py(1222): class ChannelStderrFile (ChannelFile):
0.49 channel.py(1223):     def __init__(self, channel, mode = 'r', bufsize = -1):
0.49 channel.py(1226):     def _read(self, size):
0.49 channel.py(1229):     def _write(self, data):
0.49 transport.py(35): from paramiko.common import *
0.49 transport.py(36): from paramiko.compress import ZlibCompressor, ZlibDecompressor
 --- modulename: compress, funcname: <module>
0.49 compress.py(21): """
0.49 compress.py(23): import zlib
0.49 compress.py(26): class ZlibCompressor (object):
 --- modulename: compress, funcname: ZlibCompressor
0.49 compress.py(26): class ZlibCompressor (object):
0.49 compress.py(27):     def __init__(self):
0.49 compress.py(30):     def __call__(self, data):
0.49 compress.py(34): class ZlibDecompressor (object):
 --- modulename: compress, funcname: ZlibDecompressor
0.49 compress.py(34): class ZlibDecompressor (object):
0.49 compress.py(35):     def __init__(self):
0.49 compress.py(38):     def __call__(self, data):
0.49 transport.py(37): from paramiko.dsskey import DSSKey
 --- modulename: dsskey, funcname: <module>
0.49 dsskey.py(21): """
0.49 dsskey.py(23): from Crypto.PublicKey import DSA
 --- modulename: DSA, funcname: <module>
0.49 DSA.py(25): """DSA public-key signature algorithm."""
0.49 DSA.py(27): __revision__ = "$Id$"
0.49 DSA.py(29): __all__ = ['generate', 'construct', 'error']
0.49 DSA.py(31): import sys
0.49 DSA.py(32): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.49 DSA.py(35): from Crypto.PublicKey import _DSA, _slowmath, pubkey
 --- modulename: _DSA, funcname: <module>
0.49 _DSA.py(28): __revision__ = "$Id$"
0.49 _DSA.py(30): from Crypto.PublicKey.pubkey import *
 --- modulename: pubkey, funcname: <module>
0.49 pubkey.py(27): __revision__ = "$Id$"
0.49 pubkey.py(29): import types, warnings
0.49 pubkey.py(30): from Crypto.Util.number import *
0.49 pubkey.py(33): class pubkey:
 --- modulename: pubkey, funcname: pubkey
0.49 pubkey.py(33): class pubkey:
0.49 pubkey.py(34):     def __init__(self):
0.49 pubkey.py(37):     def __getstate__(self):
0.49 pubkey.py(47):     def __setstate__(self, d):
0.49 pubkey.py(54):     def encrypt(self, plaintext, K):
0.49 pubkey.py(68):     def decrypt(self, ciphertext):
0.49 pubkey.py(81):     def sign(self, M, K):
0.49 pubkey.py(92):     def verify (self, M, signature):
0.49 pubkey.py(101):     def validate (self, M, signature):
0.49 pubkey.py(105):     def blind(self, M, B):
0.49 pubkey.py(117):     def unblind(self, M, B):
0.49 pubkey.py(133):     def can_sign (self):
0.49 pubkey.py(142):     def can_encrypt (self):
0.49 pubkey.py(151):     def can_blind (self):
0.49 pubkey.py(163):     def size (self):
0.49 pubkey.py(169):     def has_private (self):
0.49 pubkey.py(176):     def publickey (self):
0.49 pubkey.py(182):     def __eq__ (self, other):
0.49 pubkey.py(188):     def __ne__ (self, other):
0.49 _DSA.py(31): from Crypto.Util import number
0.49 _DSA.py(32): from Crypto.Util.number import bytes_to_long, long_to_bytes
0.49 _DSA.py(33): from Crypto.Hash import SHA
 --- modulename: SHA, funcname: <module>
0.49 SHA.py(23): __revision__ = "$Id$"
0.49 SHA.py(25): __all__ = ['new', 'digest_size']
0.49 SHA.py(27): from Crypto.Util.py3compat import *
0.49 SHA.py(29): try:
0.49 SHA.py(31):     import hashlib
 --- modulename: hashlib, funcname: <module>
0.49 hashlib.py(55): """
0.49 hashlib.py(59): __always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')
0.49 hashlib.py(61): algorithms = __always_supported
0.49 hashlib.py(63): __all__ = __always_supported + ('new', 'algorithms')
0.49 hashlib.py(66): def __get_builtin_constructor(name):
0.49 hashlib.py(94): def __get_openssl_constructor(name):
0.49 hashlib.py(106): def __py_new(name, string=''):
0.49 hashlib.py(113): def __hash_new(name, string=''):
0.49 hashlib.py(127): try:
0.49 hashlib.py(128):     import _hashlib
0.49 hashlib.py(129):     new = __hash_new
0.49 hashlib.py(130):     __get_hash = __get_openssl_constructor
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(138):     try:
0.49 hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
0.49 hashlib.py(95):     try:
0.49 hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
0.49 hashlib.py(99):         f()
0.49 hashlib.py(101):         return f
0.49 hashlib.py(135): for __func_name in __always_supported:
0.49 hashlib.py(145): del __always_supported, __func_name, __get_hash
0.49 hashlib.py(146): del __py_new, __hash_new, __get_openssl_constructor
0.49 SHA.py(32):     def new(data=b("")):
 --- modulename: py3compat, funcname: b
0.49 py3compat.py(34):         return s
0.49 SHA.py(34):     digest_size = new().digest_size
 --- modulename: SHA, funcname: new
0.49 SHA.py(33):         return hashlib.sha1(data)
0.49 SHA.py(43): block_size = 64
0.49 _DSA.py(34): from Crypto.Util.py3compat import *
0.49 _DSA.py(36): class error (Exception):
 --- modulename: _DSA, funcname: error
0.49 _DSA.py(36): class error (Exception):
0.49 _DSA.py(37):     pass
0.49 _DSA.py(39): def generateQ(randfunc):
0.49 _DSA.py(57): def generate_py(bits, randfunc, progress_func=None):
0.49 _DSA.py(113): class DSAobj:
 --- modulename: _DSA, funcname: DSAobj
0.49 _DSA.py(113): class DSAobj:
0.49 _DSA.py(114):     pass
 --- modulename: _slowmath, funcname: <module>
0.50 _slowmath.py(25): """Pure Python implementation of the RSA-related portions of Crypto.PublicKey._fastmath."""
0.50 _slowmath.py(27): __revision__ = "$Id$"
0.50 _slowmath.py(29): __all__ = ['rsa_construct']
0.50 _slowmath.py(31): import sys
0.50 _slowmath.py(33): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.50 _slowmath.py(35): from Crypto.Util.number import size, inverse
0.50 _slowmath.py(37): class error(Exception):
 --- modulename: _slowmath, funcname: error
0.50 _slowmath.py(37): class error(Exception):
0.50 _slowmath.py(38):     pass
0.50 _slowmath.py(40): class _RSAKey(object):
 --- modulename: _slowmath, funcname: _RSAKey
0.50 _slowmath.py(40): class _RSAKey(object):
0.50 _slowmath.py(41):     def _blind(self, m, r):
0.50 _slowmath.py(45):     def _unblind(self, m, r):
0.50 _slowmath.py(49):     def _decrypt(self, c):
0.50 _slowmath.py(63):     def _encrypt(self, m):
0.50 _slowmath.py(67):     def _sign(self, m):   # alias for _decrypt
0.50 _slowmath.py(72):     def _verify(self, m, sig):
0.50 _slowmath.py(75):     def has_private(self):
0.50 _slowmath.py(78):     def size(self):
0.50 _slowmath.py(82): def rsa_construct(n, e, d=None, p=None, q=None, u=None):
0.50 _slowmath.py(102): class _DSAKey(object):
 --- modulename: _slowmath, funcname: _DSAKey
0.50 _slowmath.py(102): class _DSAKey(object):
0.50 _slowmath.py(103):     def size(self):
0.50 _slowmath.py(107):     def has_private(self):
0.50 _slowmath.py(110):     def _sign(self, m, k):   # alias for _decrypt
0.50 _slowmath.py(121):     def _verify(self, m, r, s):
0.50 _slowmath.py(131): def dsa_construct(y, g, p, q, x=None):
0.50 DSA.py(36): from Crypto import Random
0.50 DSA.py(38): try:
0.50 DSA.py(39):     from Crypto.PublicKey import _fastmath
0.50 DSA.py(43): class _DSAobj(pubkey.pubkey):
 --- modulename: DSA, funcname: _DSAobj
0.50 DSA.py(43): class _DSAobj(pubkey.pubkey):
0.50 DSA.py(44):     keydata = ['y', 'g', 'p', 'q', 'x']
0.50 DSA.py(46):     def __init__(self, implementation, key):
0.50 DSA.py(50):     def __getattr__(self, attrname):
0.50 DSA.py(58):     def _encrypt(self, c, K):
0.50 DSA.py(61):     def _decrypt(self, c):
0.50 DSA.py(64):     def _blind(self, m, r):
0.50 DSA.py(67):     def _unblind(self, m, r):
0.50 DSA.py(70):     def _sign(self, m, k):
0.50 DSA.py(73):     def _verify(self, m, sig):
0.50 DSA.py(77):     def has_private(self):
0.50 DSA.py(80):     def size(self):
0.50 DSA.py(83):     def can_blind(self):
0.50 DSA.py(86):     def can_encrypt(self):
0.50 DSA.py(89):     def can_sign(self):
0.50 DSA.py(92):     def publickey(self):
0.50 DSA.py(95):     def __getstate__(self):
0.50 DSA.py(104):     def __setstate__(self, d):
0.50 DSA.py(114):     def __repr__(self):
0.50 DSA.py(126): class DSAImplementation(object):
 --- modulename: DSA, funcname: DSAImplementation
0.50 DSA.py(126): class DSAImplementation(object):
0.50 DSA.py(127):     def __init__(self, **kwargs):
0.50 DSA.py(156):     def _get_randfunc(self, randfunc):
0.50 DSA.py(163):     def generate(self, bits, randfunc=None, progress_func=None):
0.50 DSA.py(176):     def _generate(self, bits, randfunc=None, progress_func=None):
0.50 DSA.py(182):     def construct(self, tup):
0.50 DSA.py(186): _impl = DSAImplementation()
 --- modulename: DSA, funcname: __init__
0.50 DSA.py(132):         use_fast_math = kwargs.get('use_fast_math', None)
0.50 DSA.py(133):         if use_fast_math is None:   # Automatic
0.50 DSA.py(134):             if _fastmath is not None:
0.50 DSA.py(135):                 self._math = _fastmath
0.50 DSA.py(148):         self.error = self._math.error
0.50 DSA.py(153):         self._default_randfunc = kwargs.get('default_randfunc', None)
0.50 DSA.py(154):         self._current_randfunc = None
0.50 DSA.py(187): generate = _impl.generate
0.50 DSA.py(188): construct = _impl.construct
0.50 DSA.py(189): error = _impl.error
0.50 dsskey.py(24): from Crypto.Hash import SHA
0.50 dsskey.py(26): from paramiko.common import *
0.50 dsskey.py(27): from paramiko import util
0.50 dsskey.py(28): from paramiko.ssh_exception import SSHException
0.50 dsskey.py(29): from paramiko.message import Message
0.50 dsskey.py(30): from paramiko.ber import BER, BERException
 --- modulename: ber, funcname: <module>
0.50 ber.py(20): import util
0.50 ber.py(23): class BERException (Exception):
 --- modulename: ber, funcname: BERException
0.50 ber.py(23): class BERException (Exception):
0.50 ber.py(24):     pass
0.50 ber.py(27): class BER(object):
 --- modulename: ber, funcname: BER
0.50 ber.py(27): class BER(object):
0.50 ber.py(30):     """
0.50 ber.py(32):     def __init__(self, content=''):
0.50 ber.py(36):     def __str__(self):
0.50 ber.py(39):     def __repr__(self):
0.50 ber.py(42):     def decode(self):
0.50 ber.py(45):     def decode_next(self):
0.50 ber.py(88):     def decode_sequence(data):
0.50 ber.py(97):     decode_sequence = staticmethod(decode_sequence)
0.50 ber.py(99):     def encode_tlv(self, ident, val):
0.50 ber.py(109):     def encode(self, x):
0.50 ber.py(124):     def encode_sequence(data):
0.50 ber.py(129):     encode_sequence = staticmethod(encode_sequence)
0.50 dsskey.py(31): from paramiko.pkey import PKey
 --- modulename: pkey, funcname: <module>
0.50 pkey.py(21): """
0.51 pkey.py(23): import base64
 --- modulename: base64, funcname: <module>
0.51 base64.py(3): """RFC 3548: Base16, Base32, Base64 Data Encodings"""
0.51 base64.py(8): import re
0.51 base64.py(9): import struct
0.51 base64.py(10): import binascii
0.51 base64.py(15):     'encode', 'decode', 'encodestring', 'decodestring',
0.51 base64.py(17):     'b64encode', 'b64decode', 'b32encode', 'b32decode',
0.51 base64.py(18):     'b16encode', 'b16decode',
0.51 base64.py(20):     'standard_b64encode', 'standard_b64decode',
0.51 base64.py(25):     'urlsafe_b64encode', 'urlsafe_b64decode',
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(28): _translation = [chr(_x) for _x in range(256)]
0.51 base64.py(29): EMPTYSTRING = ''
0.51 base64.py(32): def _translate(s, altchars):
0.51 base64.py(42): def b64encode(s, altchars=None):
0.51 base64.py(59): def b64decode(s, altchars=None):
0.51 base64.py(79): def standard_b64encode(s):
0.51 base64.py(86): def standard_b64decode(s):
0.51 base64.py(95): def urlsafe_b64encode(s):
0.51 base64.py(103): def urlsafe_b64decode(s):
0.51 base64.py(117): _b32alphabet = {
0.51 base64.py(118):     0: 'A',  9: 'J', 18: 'S', 27: '3',
0.51 base64.py(119):     1: 'B', 10: 'K', 19: 'T', 28: '4',
0.51 base64.py(120):     2: 'C', 11: 'L', 20: 'U', 29: '5',
0.51 base64.py(121):     3: 'D', 12: 'M', 21: 'V', 30: '6',
0.51 base64.py(122):     4: 'E', 13: 'N', 22: 'W', 31: '7',
0.51 base64.py(123):     5: 'F', 14: 'O', 23: 'X',
0.51 base64.py(124):     6: 'G', 15: 'P', 24: 'Y',
0.51 base64.py(125):     7: 'H', 16: 'Q', 25: 'Z',
0.51 base64.py(126):     8: 'I', 17: 'R', 26: '2',
0.51 base64.py(129): _b32tab = _b32alphabet.items()
0.51 base64.py(130): _b32tab.sort()
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(131): _b32tab = [v for k, v in _b32tab]
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(132): _b32rev = dict([(v, long(k)) for k, v in _b32alphabet.items()])
0.51 base64.py(135): def b32encode(s):
0.51 base64.py(177): def b32decode(s, casefold=False, map01=None):
0.51 base64.py(251): def b16encode(s):
0.51 base64.py(259): def b16decode(s, casefold=False):
0.51 base64.py(282): MAXLINESIZE = 76 # Excluding the CRLF
0.51 base64.py(283): MAXBINSIZE = (MAXLINESIZE//4)*3
0.51 base64.py(285): def encode(input, output):
0.51 base64.py(300): def decode(input, output):
0.51 base64.py(310): def encodestring(s):
0.51 base64.py(319): def decodestring(s):
0.51 base64.py(326): def test():
0.51 base64.py(352): def test1():
0.51 base64.py(359): if __name__ == '__main__':
0.51 pkey.py(24): from binascii import hexlify, unhexlify
0.51 pkey.py(25): import os
0.51 pkey.py(27): from Crypto.Hash import MD5
 --- modulename: MD5, funcname: <module>
0.51 MD5.py(23): __revision__ = "$Id$"
0.51 MD5.py(25): __all__ = ['new', 'digest_size']
0.51 MD5.py(27): from Crypto.Util.py3compat import *
0.51 MD5.py(29): try:
0.51 MD5.py(31):     import hashlib
0.51 MD5.py(33):     def new(data=b("")):
 --- modulename: py3compat, funcname: b
0.51 py3compat.py(34):         return s
0.51 MD5.py(35):     digest_size = new().digest_size
 --- modulename: MD5, funcname: new
0.51 MD5.py(34):          return hashlib.md5(data)
0.51 pkey.py(28): from Crypto.Cipher import DES3, AES
0.51 pkey.py(30): from paramiko.common import *
0.51 pkey.py(31): from paramiko import util
0.51 pkey.py(32): from paramiko.message import Message
0.51 pkey.py(33): from paramiko.ssh_exception import SSHException, PasswordRequiredException
0.51 pkey.py(36): class PKey (object):
 --- modulename: pkey, funcname: PKey
0.51 pkey.py(36): class PKey (object):
0.51 pkey.py(39):     """
0.51 pkey.py(42):     _CIPHER_TABLE = {
0.51 pkey.py(43):         'AES-128-CBC': { 'cipher': AES, 'keysize': 16, 'blocksize': 16, 'mode': AES.MODE_CBC },
0.51 pkey.py(44):         'DES-EDE3-CBC': { 'cipher': DES3, 'keysize': 24, 'blocksize': 8, 'mode': DES3.MODE_CBC },
0.51 pkey.py(48):     def __init__(self, msg=None, data=None):
0.51 pkey.py(66):     def __str__(self):
0.51 pkey.py(77):     def __cmp__(self, other):
0.51 pkey.py(95):     def get_name(self):
0.51 pkey.py(105):     def get_bits(self):
0.51 pkey.py(115):     def can_sign(self):
0.51 pkey.py(125):     def get_fingerprint(self):
0.51 pkey.py(136):     def get_base64(self):
0.51 pkey.py(147):     def sign_ssh_data(self, rng, data):
0.51 pkey.py(161):     def verify_ssh_sig(self, data, msg):
0.51 pkey.py(176):     def from_private_key_file(cls, filename, password=None):
0.51 pkey.py(200):     from_private_key_file = classmethod(from_private_key_file)
0.51 pkey.py(202):     def from_private_key(cls, file_obj, password=None):
0.51 pkey.py(224):     from_private_key = classmethod(from_private_key)
0.51 pkey.py(226):     def write_private_key_file(self, filename, password=None):
0.51 pkey.py(241):     def write_private_key(self, file_obj, password=None):
0.51 pkey.py(256):     def _read_private_key_file(self, tag, filename, password=None):
0.51 pkey.py(284):     def _read_private_key(self, tag, f, password=None):
0.51 pkey.py(331):     def _write_private_key_file(self, tag, filename, data, password=None):
0.51 pkey.py(355):     def _write_private_key(self, tag, f, data, password=None):
0.51 dsskey.py(34): class DSSKey (PKey):
 --- modulename: dsskey, funcname: DSSKey
0.51 dsskey.py(34): class DSSKey (PKey):
0.51 dsskey.py(38):     """
0.51 dsskey.py(40):     def __init__(self, msg=None, data=None, filename=None, password=None, vals=None, file_obj=None):
0.51 dsskey.py(67):     def __str__(self):
0.51 dsskey.py(76):     def __hash__(self):
0.51 dsskey.py(85):     def get_name(self):
0.51 dsskey.py(88):     def get_bits(self):
0.51 dsskey.py(91):     def can_sign(self):
0.51 dsskey.py(94):     def sign_ssh_data(self, rng, data):
0.51 dsskey.py(116):     def verify_ssh_sig(self, data, msg):
0.51 dsskey.py(134):     def _encode_key(self):
0.51 dsskey.py(145):     def write_private_key_file(self, filename, password=None):
0.51 dsskey.py(148):     def write_private_key(self, file_obj, password=None):
0.51 dsskey.py(151):     def generate(bits=1024, progress_func=None):
0.51 dsskey.py(168):     generate = staticmethod(generate)
0.51 dsskey.py(174):     def _from_private_key_file(self, filename, password):
0.51 dsskey.py(178):     def _from_private_key(self, file_obj, password):
0.51 dsskey.py(182):     def _decode_key(self, data):
0.51 transport.py(38): from paramiko.kex_gex import KexGex
 --- modulename: kex_gex, funcname: <module>
0.51 kex_gex.py(23): """
0.51 kex_gex.py(25): from Crypto.Hash import SHA
0.51 kex_gex.py(26): from Crypto.Util import number
0.51 kex_gex.py(28): from paramiko.common import *
0.51 kex_gex.py(29): from paramiko import util
0.51 kex_gex.py(30): from paramiko.message import Message
0.51 kex_gex.py(31): from paramiko.ssh_exception import SSHException
0.51 kex_gex.py(35):     _MSG_KEXDH_GEX_REPLY, _MSG_KEXDH_GEX_REQUEST = range(30, 35)
0.51 kex_gex.py(38): class KexGex (object):
 --- modulename: kex_gex, funcname: KexGex
0.51 kex_gex.py(38): class KexGex (object):
0.51 kex_gex.py(40):     name = 'diffie-hellman-group-exchange-sha1'
0.51 kex_gex.py(41):     min_bits = 1024
0.51 kex_gex.py(42):     max_bits = 8192
0.51 kex_gex.py(43):     preferred_bits = 2048
0.51 kex_gex.py(45):     def __init__(self, transport):
0.51 kex_gex.py(55):     def start_kex(self, _test_old_style=False):
0.51 kex_gex.py(76):     def parse_next(self, ptype, m):
0.51 kex_gex.py(93):     def _generate_x(self):
0.51 kex_gex.py(111):     def _parse_kexdh_gex_request(self, m):
0.51 kex_gex.py(144):     def _parse_kexdh_gex_request_old(self, m):
0.51 kex_gex.py(166):     def _parse_kexdh_gex_group(self, m):
0.51 kex_gex.py(183):     def _parse_kexdh_gex_init(self, m):
0.51 kex_gex.py(219):     def _parse_kexdh_gex_reply(self, m):
0.51 transport.py(39): from paramiko.kex_group1 import KexGroup1
 --- modulename: kex_group1, funcname: <module>
0.51 kex_group1.py(22): """
0.51 kex_group1.py(24): from Crypto.Hash import SHA
0.51 kex_group1.py(26): from paramiko.common import *
0.51 kex_group1.py(27): from paramiko import util
0.51 kex_group1.py(28): from paramiko.message import Message
0.51 kex_group1.py(29): from paramiko.ssh_exception import SSHException
0.51 kex_group1.py(32): _MSG_KEXDH_INIT, _MSG_KEXDH_REPLY = range(30, 32)
0.51 kex_group1.py(35): P = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFFL
0.51 kex_group1.py(36): G = 2
0.51 kex_group1.py(39): class KexGroup1(object):
 --- modulename: kex_group1, funcname: KexGroup1
0.51 kex_group1.py(39): class KexGroup1(object):
0.51 kex_group1.py(41):     name = 'diffie-hellman-group1-sha1'
0.51 kex_group1.py(43):     def __init__(self, transport):
0.51 kex_group1.py(49):     def start_kex(self):
0.51 kex_group1.py(64):     def parse_next(self, ptype, m):
0.51 kex_group1.py(75):     def _generate_x(self):
0.51 kex_group1.py(89):     def _parse_kexdh_reply(self, m):
0.51 kex_group1.py(109):     def _parse_kexdh_init(self, m):
0.51 transport.py(40): from paramiko.message import Message
0.51 transport.py(41): from paramiko.packet import Packetizer, NeedRekeyException
 --- modulename: packet, funcname: <module>
0.51 packet.py(21): """
0.52 packet.py(23): import errno
0.52 packet.py(24): import select
0.52 packet.py(25): import socket
0.52 packet.py(26): import struct
0.52 packet.py(27): import threading
0.52 packet.py(28): import time
0.52 packet.py(30): from paramiko.common import *
0.52 packet.py(31): from paramiko import util
0.52 packet.py(32): from paramiko.ssh_exception import SSHException
0.52 packet.py(33): from paramiko.message import Message
0.52 packet.py(36): got_r_hmac = False
0.52 packet.py(37): try:
0.52 packet.py(38):     import r_hmac
0.52 packet.py(40): except ImportError:
0.52 packet.py(41):     pass
0.52 packet.py(42): def compute_hmac(key, message, digest_class):
0.52 packet.py(49): class NeedRekeyException (Exception):
 --- modulename: packet, funcname: NeedRekeyException
0.52 packet.py(49): class NeedRekeyException (Exception):
0.52 packet.py(50):     pass
0.52 packet.py(53): class Packetizer (object):
 --- modulename: packet, funcname: Packetizer
0.52 packet.py(53): class Packetizer (object):
0.52 packet.py(56):     """
0.52 packet.py(60):     REKEY_PACKETS = pow(2, 30)
0.52 packet.py(61):     REKEY_BYTES = pow(2, 30)
0.52 packet.py(63):     def __init__(self, socket):
0.52 packet.py(103):     def set_log(self, log):
0.52 packet.py(109):     def set_outbound_cipher(self, block_engine, block_size, mac_engine, mac_size, mac_key):
0.52 packet.py(126):     def set_inbound_cipher(self, block_engine, block_size, mac_engine, mac_size, mac_key):
0.52 packet.py(144):     def set_outbound_compressor(self, compressor):
0.52 packet.py(147):     def set_inbound_compressor(self, compressor):
0.52 packet.py(150):     def close(self):
0.52 packet.py(154):     def set_hexdump(self, hexdump):
0.52 packet.py(157):     def get_hexdump(self):
0.52 packet.py(160):     def get_mac_size_in(self):
0.52 packet.py(163):     def get_mac_size_out(self):
0.52 packet.py(166):     def need_rekey(self):
0.52 packet.py(176):     def set_keepalive(self, interval, callback):
0.52 packet.py(186):     def read_all(self, n, check_rekey=False):
0.52 packet.py(236):     def write_all(self, out):
0.52 packet.py(266):     def readline(self, timeout):
0.52 packet.py(281):     def send_message(self, data):
0.52 packet.py(324):     def read_message(self):
0.52 packet.py(400):     def _log(self, level, msg):
0.52 packet.py(409):     def _check_keepalive(self):
0.52 packet.py(419):     def _py22_read_all(self, n, out):
0.52 packet.py(434):     def _py22_read_timeout(self, timeout):
0.52 packet.py(450):     def _read_timeout(self, timeout):
0.52 packet.py(469):     def _build_packet(self, payload):
0.52 packet.py(483):     def _trigger_rekey(self):
0.52 transport.py(42): from paramiko.primes import ModulusPack
 --- modulename: primes, funcname: <module>
0.52 primes.py(21): """
0.52 primes.py(23): from Crypto.Util import number
0.52 primes.py(25): from paramiko import util
0.52 primes.py(26): from paramiko.ssh_exception import SSHException
0.52 primes.py(29): def _generate_prime(bits, rng):
0.52 primes.py(46): def _roll_random(rng, n):
0.52 primes.py(68): class ModulusPack (object):
 --- modulename: primes, funcname: ModulusPack
0.52 primes.py(68): class ModulusPack (object):
0.52 primes.py(72):     """
0.52 primes.py(74):     def __init__(self, rpool):
0.52 primes.py(80):     def _parse_modulus(self, line):
0.52 primes.py(110):     def read_file(self, filename):
0.52 primes.py(126):     def get_modulus(self, min, prefer, max):
0.52 transport.py(43): from paramiko.rsakey import RSAKey
 --- modulename: rsakey, funcname: <module>
0.52 rsakey.py(21): """
0.52 rsakey.py(23): from Crypto.PublicKey import RSA
 --- modulename: RSA, funcname: <module>
0.52 RSA.py(25): """RSA public-key cryptography algorithm."""
0.52 RSA.py(27): __revision__ = "$Id$"
0.52 RSA.py(29): __all__ = ['generate', 'construct', 'error', 'importKey' ]
0.52 RSA.py(31): import sys
0.52 RSA.py(32): if sys.version_info[0] == 2 and sys.version_info[1] == 1:
0.52 RSA.py(34): from Crypto.Util.py3compat import *
0.52 RSA.py(37): from Crypto.Util.number import getRandomRange
0.52 RSA.py(39): from Crypto.PublicKey import _RSA, _slowmath, pubkey
 --- modulename: _RSA, funcname: <module>
0.52 _RSA.py(27): __revision__ = "$Id$"
0.52 _RSA.py(29): from Crypto.PublicKey import pubkey
0.52 _RSA.py(30): from Crypto.Util import number
0.52 _RSA.py(32): def generate_py(bits, randfunc, progress_func=None):
0.52 _RSA.py(72): class RSAobj(pubkey.pubkey):
 --- modulename: _RSA, funcname: RSAobj
0.52 _RSA.py(72): class RSAobj(pubkey.pubkey):
0.52 _RSA.py(74):     def size(self):
0.52 RSA.py(40): from Crypto import Random
0.52 RSA.py(42): from Crypto.Util.asn1 import DerObject, DerSequence
 --- modulename: asn1, funcname: <module>
0.52 asn1.py(23): from Crypto.Util.number import long_to_bytes, bytes_to_long
0.52 asn1.py(24): import sys
0.52 asn1.py(25): from Crypto.Util.py3compat import *
0.52 asn1.py(27): __all__ = [ 'DerObject', 'DerInteger', 'DerSequence' ]
0.52 asn1.py(29): class DerObject:
 --- modulename: asn1, funcname: DerObject
0.52 asn1.py(29): class DerObject:
0.52 asn1.py(30):     typeTags = { 'SEQUENCE':b('\x30'), 'BIT STRING':b('\x03'), 'INTEGER':b('\x02') }
 --- modulename: py3compat, funcname: b
0.52 py3compat.py(34):         return s
 --- modulename: py3compat, funcname: b
0.52 py3compat.py(34):         return s
 --- modulename: py3compat, funcname: b
0.52 py3compat.py(34):         return s
0.52 asn1.py(32):     def __init__(self, ASN1Type=None):
0.52 asn1.py(36):     def _lengthOctets(self, payloadLen):
0.52 asn1.py(47):     def encode(self):
0.52 asn1.py(50):     def _decodeLen(self, idx, str):
0.52 asn1.py(65):     def decode(self, input, noLeftOvers=0):
0.52 asn1.py(78): class DerInteger(DerObject):
 --- modulename: asn1, funcname: DerInteger
0.52 asn1.py(78): class DerInteger(DerObject):
0.52 asn1.py(79):     def __init__(self, value = 0):
0.52 asn1.py(83):     def encode(self):
0.52 asn1.py(89):     def decode(self, input, noLeftOvers=0):
0.52 asn1.py(96): class DerSequence(DerObject):
 --- modulename: asn1, funcname: DerSequence
0.52 asn1.py(96): class DerSequence(DerObject):
0.52 asn1.py(97):     def __init__(self):
0.52 asn1.py(100):     def __delitem__(self, n):
0.52 asn1.py(102):     def __getitem__(self, n):
0.52 asn1.py(104):     def __setitem__(self, key, value):
0.52 asn1.py(106):     if sys.version_info[0] == 2:
0.52 asn1.py(107):         def __setslice__(self,i,j,sequence):
0.52 asn1.py(109):         def __delslice__(self,i,j):
0.52 asn1.py(111):         def __getslice__(self, i, j):
0.52 asn1.py(113):     def __len__(self):
0.52 asn1.py(115):     def append(self, item):
0.52 asn1.py(118):     def hasOnlyInts(self):
0.52 asn1.py(128):     def encode(self):
0.52 asn1.py(144):     def decode(self, input,noLeftOvers=0):
0.52 RSA.py(43): import binascii
0.52 RSA.py(45): from Crypto.Util.number import inverse
0.52 RSA.py(47): try:
0.52 RSA.py(48):     from Crypto.PublicKey import _fastmath
0.52 RSA.py(52): class _RSAobj(pubkey.pubkey):
 --- modulename: RSA, funcname: _RSAobj
0.52 RSA.py(52): class _RSAobj(pubkey.pubkey):
0.52 RSA.py(53):     keydata = ['n', 'e', 'd', 'p', 'q', 'u']
0.52 RSA.py(55):     def __init__(self, implementation, key, randfunc=None):
0.52 RSA.py(62):     def __getattr__(self, attrname):
0.52 RSA.py(70):     def _encrypt(self, c, K):
0.52 RSA.py(73):     def _decrypt(self, c):
0.52 RSA.py(90):     def _blind(self, m, r):
0.52 RSA.py(93):     def _unblind(self, m, r):
0.52 RSA.py(96):     def _sign(self, m, K=None):
0.52 RSA.py(99):     def _verify(self, m, sig):
0.52 RSA.py(106):     def has_private(self):
0.52 RSA.py(109):     def size(self):
0.52 RSA.py(112):     def can_blind(self):
0.52 RSA.py(115):     def can_encrypt(self):
0.52 RSA.py(118):     def can_sign(self):
0.52 RSA.py(121):     def publickey(self):
0.52 RSA.py(124):     def __getstate__(self):
0.52 RSA.py(133):     def __setstate__(self, d):
0.52 RSA.py(143):     def __repr__(self):
0.52 RSA.py(155):     def exportKey(self, format='PEM'):
0.52 RSA.py(188): class RSAImplementation(object):
 --- modulename: RSA, funcname: RSAImplementation
0.52 RSA.py(188): class RSAImplementation(object):
0.52 RSA.py(189):     def __init__(self, **kwargs):
0.52 RSA.py(218):     def _get_randfunc(self, randfunc):
0.52 RSA.py(225):     def generate(self, bits, randfunc=None, progress_func=None):
0.52 RSA.py(234):     def construct(self, tup):
0.52 RSA.py(238):     def _importKeyDER(self, externKey):
0.52 RSA.py(268):     def importKey(self, externKey):
0.52 RSA.py(290): _impl = RSAImplementation()
 --- modulename: RSA, funcname: __init__
0.52 RSA.py(194):         use_fast_math = kwargs.get('use_fast_math', None)
0.52 RSA.py(195):         if use_fast_math is None:   # Automatic
0.52 RSA.py(196):             if _fastmath is not None:
0.52 RSA.py(197):                 self._math = _fastmath
0.52 RSA.py(210):         self.error = self._math.error
0.52 RSA.py(215):         self._default_randfunc = kwargs.get('default_randfunc', None)
0.52 RSA.py(216):         self._current_randfunc = None
0.52 RSA.py(291): generate = _impl.generate
0.52 RSA.py(292): construct = _impl.construct
0.52 RSA.py(293): importKey = _impl.importKey
0.52 RSA.py(294): error = _impl.error
0.52 rsakey.py(24): from Crypto.Hash import SHA, MD5
0.52 rsakey.py(25): from Crypto.Cipher import DES3
0.52 rsakey.py(27): from paramiko.common import *
0.52 rsakey.py(28): from paramiko import util
0.52 rsakey.py(29): from paramiko.message import Message
0.52 rsakey.py(30): from paramiko.ber import BER, BERException
0.52 rsakey.py(31): from paramiko.pkey import PKey
0.52 rsakey.py(32): from paramiko.ssh_exception import SSHException
0.52 rsakey.py(35): class RSAKey (PKey):
 --- modulename: rsakey, funcname: RSAKey
0.52 rsakey.py(35): class RSAKey (PKey):
0.52 rsakey.py(39):     """
0.52 rsakey.py(41):     def __init__(self, msg=None, data=None, filename=None, password=None, vals=None, file_obj=None):
0.52 rsakey.py(66):     def __str__(self):
0.52 rsakey.py(73):     def __hash__(self):
0.52 rsakey.py(79):     def get_name(self):
0.52 rsakey.py(82):     def get_bits(self):
0.52 rsakey.py(85):     def can_sign(self):
0.52 rsakey.py(88):     def sign_ssh_data(self, rpool, data):
0.52 rsakey.py(97):     def verify_ssh_sig(self, data, msg):
0.52 rsakey.py(108):     def _encode_key(self):
0.52 rsakey.py(121):     def write_private_key_file(self, filename, password=None):
0.52 rsakey.py(124):     def write_private_key(self, file_obj, password=None):
0.52 rsakey.py(127):     def generate(bits, progress_func=None):
0.52 rsakey.py(146):     generate = staticmethod(generate)
0.52 rsakey.py(152):     def _pkcs1imify(self, data):
0.52 rsakey.py(162):     def _from_private_key_file(self, filename, password):
0.52 rsakey.py(166):     def _from_private_key(self, file_obj, password):
0.52 rsakey.py(170):     def _decode_key(self, data):
0.52 transport.py(44): from paramiko.server import ServerInterface
0.52 transport.py(45): from paramiko.sftp_client import SFTPClient
 --- modulename: sftp_client, funcname: <module>
0.52 sftp_client.py(21): """
0.52 sftp_client.py(23): from binascii import hexlify
0.52 sftp_client.py(24): import errno
0.52 sftp_client.py(25): import os
0.52 sftp_client.py(26): import stat
0.52 sftp_client.py(27): import threading
0.52 sftp_client.py(28): import time
0.52 sftp_client.py(29): import weakref
0.52 sftp_client.py(31): from paramiko.sftp import *
 --- modulename: sftp, funcname: <module>
0.52 sftp.py(19): import select
0.52 sftp.py(20): import socket
0.52 sftp.py(21): import struct
0.52 sftp.py(23): from paramiko.common import *
0.52 sftp.py(24): from paramiko import util
0.52 sftp.py(25): from paramiko.channel import Channel
0.52 sftp.py(26): from paramiko.message import Message
0.52 sftp.py(32):            = range(1, 21)
0.52 sftp.py(33): CMD_STATUS, CMD_HANDLE, CMD_DATA, CMD_NAME, CMD_ATTRS = range(101, 106)
0.52 sftp.py(34): CMD_EXTENDED, CMD_EXTENDED_REPLY = range(200, 202)
0.52 sftp.py(36): SFTP_OK = 0
0.52 sftp.py(38):          SFTP_NO_CONNECTION, SFTP_CONNECTION_LOST, SFTP_OP_UNSUPPORTED = range(1, 9)
0.52 sftp.py(40): SFTP_DESC = [ 'Success',
0.52 sftp.py(41):               'End of file',
0.52 sftp.py(42):               'No such file',
0.52 sftp.py(43):               'Permission denied',
0.52 sftp.py(44):               'Failure',
0.52 sftp.py(45):               'Bad message',
0.52 sftp.py(46):               'No connection',
0.52 sftp.py(47):               'Connection lost',
0.52 sftp.py(48):               'Operation unsupported' ]
0.52 sftp.py(50): SFTP_FLAG_READ = 0x1
0.52 sftp.py(51): SFTP_FLAG_WRITE = 0x2
0.52 sftp.py(52): SFTP_FLAG_APPEND = 0x4
0.52 sftp.py(53): SFTP_FLAG_CREATE = 0x8
0.52 sftp.py(54): SFTP_FLAG_TRUNC = 0x10
0.52 sftp.py(55): SFTP_FLAG_EXCL = 0x20
0.52 sftp.py(57): _VERSION = 3
0.52 sftp.py(61): CMD_NAMES = {
0.52 sftp.py(62):     CMD_INIT: 'init',
0.52 sftp.py(63):     CMD_VERSION: 'version',
0.52 sftp.py(64):     CMD_OPEN: 'open',
0.52 sftp.py(65):     CMD_CLOSE: 'close',
0.52 sftp.py(66):     CMD_READ: 'read',
0.52 sftp.py(67):     CMD_WRITE: 'write',
0.52 sftp.py(68):     CMD_LSTAT: 'lstat',
0.52 sftp.py(69):     CMD_FSTAT: 'fstat',
0.52 sftp.py(70):     CMD_SETSTAT: 'setstat',
0.52 sftp.py(71):     CMD_FSETSTAT: 'fsetstat',
0.52 sftp.py(72):     CMD_OPENDIR: 'opendir',
0.52 sftp.py(73):     CMD_READDIR: 'readdir',
0.52 sftp.py(74):     CMD_REMOVE: 'remove',
0.52 sftp.py(75):     CMD_MKDIR: 'mkdir',
0.52 sftp.py(76):     CMD_RMDIR: 'rmdir',
0.52 sftp.py(77):     CMD_REALPATH: 'realpath',
0.52 sftp.py(78):     CMD_STAT: 'stat',
0.52 sftp.py(79):     CMD_RENAME: 'rename',
0.52 sftp.py(80):     CMD_READLINK: 'readlink',
0.52 sftp.py(81):     CMD_SYMLINK: 'symlink',
0.52 sftp.py(82):     CMD_STATUS: 'status',
0.52 sftp.py(83):     CMD_HANDLE: 'handle',
0.52 sftp.py(84):     CMD_DATA: 'data',
0.52 sftp.py(85):     CMD_NAME: 'name',
0.52 sftp.py(86):     CMD_ATTRS: 'attrs',
0.52 sftp.py(87):     CMD_EXTENDED: 'extended',
0.52 sftp.py(88):     CMD_EXTENDED_REPLY: 'extended_reply'
0.52 sftp.py(92): class SFTPError (Exception):
 --- modulename: sftp, funcname: SFTPError
0.53 sftp.py(92): class SFTPError (Exception):
0.53 sftp.py(93):     pass
0.53 sftp.py(96): class BaseSFTP (object):
 --- modulename: sftp, funcname: BaseSFTP
0.53 sftp.py(96): class BaseSFTP (object):
0.53 sftp.py(97):     def __init__(self):
0.53 sftp.py(106):     def _send_version(self):
0.53 sftp.py(116):     def _send_server_version(self):
0.53 sftp.py(131):     def _log(self, level, msg, *args):
0.53 sftp.py(134):     def _write_all(self, out):
0.53 sftp.py(144):     def _read_all(self, n):
0.53 sftp.py(167):     def _send_packet(self, t, packet):
0.53 sftp.py(174):     def _read_packet(self):
0.53 sftp_client.py(32): from paramiko.sftp_attr import SFTPAttributes
 --- modulename: sftp_attr, funcname: <module>
0.53 sftp_attr.py(19): import stat
0.53 sftp_attr.py(20): import time
0.53 sftp_attr.py(21): from paramiko.common import *
0.53 sftp_attr.py(22): from paramiko.sftp import *
0.53 sftp_attr.py(25): class SFTPAttributes (object):
 --- modulename: sftp_attr, funcname: SFTPAttributes
0.53 sftp_attr.py(25): class SFTPAttributes (object):
0.53 sftp_attr.py(41):     """
0.53 sftp_attr.py(43):     FLAG_SIZE = 1
0.53 sftp_attr.py(44):     FLAG_UIDGID = 2
0.53 sftp_attr.py(45):     FLAG_PERMISSIONS = 4
0.53 sftp_attr.py(46):     FLAG_AMTIME = 8
0.53 sftp_attr.py(47):     FLAG_EXTENDED = 0x80000000L
0.53 sftp_attr.py(49):     def __init__(self):
0.53 sftp_attr.py(62):     def from_stat(cls, obj, filename=None):
0.53 sftp_attr.py(84):     from_stat = classmethod(from_stat)
0.53 sftp_attr.py(86):     def __repr__(self):
0.53 sftp_attr.py(93):     def _from_msg(cls, msg, filename=None, longname=None):
0.53 sftp_attr.py(101):     _from_msg = classmethod(_from_msg)
0.53 sftp_attr.py(103):     def _unpack(self, msg):
0.53 sftp_attr.py(120):     def _pack(self, msg):
0.53 sftp_attr.py(151):     def _debug_str(self):
0.53 sftp_attr.py(166):     def _rwx(n, suid, sticky=False):
0.53 sftp_attr.py(175):     _rwx = staticmethod(_rwx)
0.53 sftp_attr.py(177):     def __str__(self):
0.53 sftp_client.py(33): from paramiko.ssh_exception import SSHException
0.53 sftp_client.py(34): from paramiko.sftp_file import SFTPFile
 --- modulename: sftp_file, funcname: <module>
0.53 sftp_file.py(21): """
0.53 sftp_file.py(23): from binascii import hexlify
0.53 sftp_file.py(24): import socket
0.53 sftp_file.py(25): import threading
0.53 sftp_file.py(26): import time
0.53 sftp_file.py(28): from paramiko.common import *
0.53 sftp_file.py(29): from paramiko.sftp import *
0.53 sftp_file.py(30): from paramiko.file import BufferedFile
0.53 sftp_file.py(31): from paramiko.sftp_attr import SFTPAttributes
0.53 sftp_file.py(34): class SFTPFile (BufferedFile):
 --- modulename: sftp_file, funcname: SFTPFile
0.53 sftp_file.py(34): class SFTPFile (BufferedFile):
0.53 sftp_file.py(37):     """
0.53 sftp_file.py(41):     MAX_REQUEST_SIZE = 32768
0.53 sftp_file.py(43):     def __init__(self, sftp, handle, mode='r', bufsize=-1):
0.53 sftp_file.py(55):     def __del__(self):
0.53 sftp_file.py(58):     def close(self):
0.53 sftp_file.py(61):     def _close(self, async=False):
0.53 sftp_file.py(88):     def _data_in_prefetch_requests(self, offset, size):
0.53 sftp_file.py(103):     def _data_in_prefetch_buffers(self, offset):
0.53 sftp_file.py(120):     def _read_prefetch(self, size):
0.53 sftp_file.py(149):     def _read(self, size):
0.53 sftp_file.py(160):     def _write(self, data):
0.53 sftp_file.py(171):     def settimeout(self, timeout):
0.53 sftp_file.py(183):     def gettimeout(self):
0.53 sftp_file.py(193):     def setblocking(self, blocking):
0.53 sftp_file.py(205):     def seek(self, offset, whence=0):
0.53 sftp_file.py(216):     def stat(self):
0.53 sftp_file.py(230):     def chmod(self, mode):
0.53 sftp_file.py(244):     def chown(self, uid, gid):
0.53 sftp_file.py(261):     def utime(self, times):
0.53 sftp_file.py(281):     def truncate(self, size):
0.53 sftp_file.py(295):     def check(self, hash_algorithm, offset=0, length=0, block_size=0):
0.53 sftp_file.py(349):     def set_pipelined(self, pipelined=True):
0.53 sftp_file.py(369):     def prefetch(self):
0.53 sftp_file.py(394):     def readv(self, chunks):
0.53 sftp_file.py(434):     def _get_size(self):
0.53 sftp_file.py(440):     def _start_prefetch(self, chunks):
0.53 sftp_file.py(449):     def _prefetch_thread(self, chunks):
0.53 sftp_file.py(455):     def _async_response(self, t, msg):
0.53 sftp_file.py(471):     def _check_exception(self):
0.53 sftp_client.py(37): def _to_unicode(s):
0.53 sftp_client.py(52): class SFTPClient (BaseSFTP):
 --- modulename: sftp_client, funcname: SFTPClient
0.53 sftp_client.py(52): class SFTPClient (BaseSFTP):
0.53 sftp_client.py(56):     """
0.53 sftp_client.py(58):     def __init__(self, sock):
0.53 sftp_client.py(92):     def from_transport(cls, t):
0.53 sftp_client.py(107):     from_transport = classmethod(from_transport)
0.53 sftp_client.py(109):     def _log(self, level, msg, *args):
0.53 sftp_client.py(116):     def close(self):
0.53 sftp_client.py(125):     def get_channel(self):
0.53 sftp_client.py(137):     def listdir(self, path='.'):
0.53 sftp_client.py(152):     def listdir_attr(self, path='.'):
0.53 sftp_client.py(196):     def open(self, filename, mode='r', bufsize=-1):
0.53 sftp_client.py(253):     file = open
0.53 sftp_client.py(255):     def remove(self, path):
0.53 sftp_client.py(269):     unlink = remove
0.53 sftp_client.py(271):     def rename(self, oldpath, newpath):
0.53 sftp_client.py(288):     def mkdir(self, path, mode=0777):
0.53 sftp_client.py(305):     def rmdir(self, path):
0.53 sftp_client.py(316):     def stat(self, path):
0.53 sftp_client.py(342):     def lstat(self, path):
0.53 sftp_client.py(360):     def symlink(self, source, dest):
0.53 sftp_client.py(376):     def chmod(self, path, mode):
0.53 sftp_client.py(393):     def chown(self, path, uid, gid):
0.53 sftp_client.py(413):     def utime(self, path, times):
0.53 sftp_client.py(436):     def truncate(self, path, size):
0.53 sftp_client.py(453):     def readlink(self, path):
0.53 sftp_client.py(476):     def normalize(self, path):
0.53 sftp_client.py(500):     def chdir(self, path):
0.53 sftp_client.py(523):     def getcwd(self):
0.53 sftp_client.py(536):     def put(self, localpath, remotepath, callback=None, confirm=True):
0.53 sftp_client.py(589):     def get(self, remotepath, localpath, callback=None):
0.53 sftp_client.py(633):     def _request(self, t, *arg):
0.53 sftp_client.py(637):     def _async_request(self, fileobj, t, *arg):
0.53 sftp_client.py(662):     def _read_response(self, waitfor=None):
0.53 sftp_client.py(691):     def _finish_responses(self, fileobj):
0.53 sftp_client.py(696):     def _convert_status(self, msg):
0.53 sftp_client.py(714):     def _adjust_cwd(self, path):
0.53 sftp_client.py(731): class SFTP (SFTPClient):
 --- modulename: sftp_client, funcname: SFTP
0.53 sftp_client.py(731): class SFTP (SFTPClient):
0.53 sftp_client.py(732):     "an alias for L{SFTPClient} for backwards compatability"
0.53 sftp_client.py(733):     pass
0.53 transport.py(46): from paramiko.ssh_exception import SSHException, BadAuthenticationType, ChannelException
0.53 transport.py(48): from Crypto import Random
0.53 transport.py(49): from Crypto.Cipher import Blowfish, AES, DES3, ARC4
0.53 transport.py(50): from Crypto.Hash import SHA, MD5
0.53 transport.py(51): try:
0.53 transport.py(52):     from Crypto.Util import Counter
0.53 transport.py(58): _active_threads = []
0.53 transport.py(59): def _join_lingering_threads():
0.53 transport.py(62): import atexit
0.53 transport.py(63): atexit.register(_join_lingering_threads)
 --- modulename: atexit, funcname: register
0.53 atexit.py(46):     _exithandlers.append((func, targs, kargs))
0.53 atexit.py(47):     return func
0.53 transport.py(66): class SecurityOptions (object):
 --- modulename: transport, funcname: SecurityOptions
0.53 transport.py(66): class SecurityOptions (object):
0.53 transport.py(77):     """
0.53 transport.py(78):     __slots__ = [ 'ciphers', 'digests', 'key_types', 'kex', 'compression', '_transport' ]
0.53 transport.py(80):     def __init__(self, transport):
0.53 transport.py(83):     def __repr__(self):
0.53 transport.py(91):     def _get_ciphers(self):
0.53 transport.py(94):     def _get_digests(self):
0.53 transport.py(97):     def _get_key_types(self):
0.53 transport.py(100):     def _get_kex(self):
0.53 transport.py(103):     def _get_compression(self):
0.53 transport.py(106):     def _set(self, name, orig, x):
0.53 transport.py(117):     def _set_ciphers(self, x):
0.53 transport.py(120):     def _set_digests(self, x):
0.53 transport.py(123):     def _set_key_types(self, x):
0.53 transport.py(126):     def _set_kex(self, x):
0.53 transport.py(129):     def _set_compression(self, x):
0.53 transport.py(132):     ciphers = property(_get_ciphers, _set_ciphers, None,
0.53 transport.py(133):                        "Symmetric encryption ciphers")
0.53 transport.py(134):     digests = property(_get_digests, _set_digests, None,
0.53 transport.py(135):                        "Digest (one-way hash) algorithms")
0.53 transport.py(136):     key_types = property(_get_key_types, _set_key_types, None,
0.53 transport.py(137):                          "Public-key algorithms")
0.53 transport.py(138):     kex = property(_get_kex, _set_kex, None, "Key exchange algorithms")
0.53 transport.py(139):     compression = property(_get_compression, _set_compression, None,
0.53 transport.py(140):                            "Compression algorithms")
0.53 transport.py(143): class ChannelMap (object):
 --- modulename: transport, funcname: ChannelMap
0.53 transport.py(143): class ChannelMap (object):
0.53 transport.py(144):     def __init__(self):
0.53 transport.py(149):     def put(self, chanid, chan):
0.53 transport.py(156):     def get(self, chanid):
0.53 transport.py(163):     def delete(self, chanid):
0.53 transport.py(173):     def values(self):
0.53 transport.py(180):     def __len__(self):
0.53 transport.py(188): class Transport (threading.Thread):
 --- modulename: transport, funcname: Transport
0.53 transport.py(188): class Transport (threading.Thread):
0.53 transport.py(194):     """
0.53 transport.py(196):     _PROTO_ID = '2.0'
0.53 transport.py(197):     _CLIENT_ID = 'paramiko_1.7.7.1'
0.53 transport.py(200):         'arcfour128', 'arcfour256' )
0.53 transport.py(201):     _preferred_macs = ( 'hmac-sha1', 'hmac-md5', 'hmac-sha1-96', 'hmac-md5-96' )
0.53 transport.py(202):     _preferred_keys = ( 'ssh-rsa', 'ssh-dss' )
0.53 transport.py(203):     _preferred_kex = ( 'diffie-hellman-group1-sha1', 'diffie-hellman-group-exchange-sha1' )
0.53 transport.py(204):     _preferred_compression = ( 'none', )
0.53 transport.py(206):     _cipher_info = {
0.53 transport.py(207):         'aes128-ctr': { 'class': AES, 'mode': AES.MODE_CTR, 'block-size': 16, 'key-size': 16 },
0.53 transport.py(208):         'aes256-ctr': { 'class': AES, 'mode': AES.MODE_CTR, 'block-size': 16, 'key-size': 32 },
0.53 transport.py(209):         'blowfish-cbc': { 'class': Blowfish, 'mode': Blowfish.MODE_CBC, 'block-size': 8, 'key-size': 16 },
0.53 transport.py(210):         'aes128-cbc': { 'class': AES, 'mode': AES.MODE_CBC, 'block-size': 16, 'key-size': 16 },
0.53 transport.py(211):         'aes256-cbc': { 'class': AES, 'mode': AES.MODE_CBC, 'block-size': 16, 'key-size': 32 },
0.53 transport.py(212):         '3des-cbc': { 'class': DES3, 'mode': DES3.MODE_CBC, 'block-size': 8, 'key-size': 24 },
0.53 transport.py(213):         'arcfour128': { 'class': ARC4, 'mode': None, 'block-size': 8, 'key-size': 16 },
0.53 transport.py(214):         'arcfour256': { 'class': ARC4, 'mode': None, 'block-size': 8, 'key-size': 32 },
0.53 transport.py(217):     _mac_info = {
0.53 transport.py(218):         'hmac-sha1': { 'class': SHA, 'size': 20 },
0.53 transport.py(219):         'hmac-sha1-96': { 'class': SHA, 'size': 12 },
0.53 transport.py(220):         'hmac-md5': { 'class': MD5, 'size': 16 },
0.53 transport.py(221):         'hmac-md5-96': { 'class': MD5, 'size': 12 },
0.53 transport.py(224):     _key_info = {
0.53 transport.py(225):         'ssh-rsa': RSAKey,
0.53 transport.py(226):         'ssh-dss': DSSKey,
0.53 transport.py(229):     _kex_info = {
0.53 transport.py(230):         'diffie-hellman-group1-sha1': KexGroup1,
0.53 transport.py(231):         'diffie-hellman-group-exchange-sha1': KexGex,
0.53 transport.py(234):     _compression_info = {
0.53 transport.py(238):         'zlib@openssh.com': ( ZlibCompressor, ZlibDecompressor ),
0.53 transport.py(239):         'zlib': ( ZlibCompressor, ZlibDecompressor ),
0.53 transport.py(240):         'none': ( None, None ),
0.53 transport.py(244):     _modulus_pack = None
0.53 transport.py(246):     def __init__(self, sock):
0.53 transport.py(367):     def __repr__(self):
0.53 transport.py(389):     def atfork(self):
0.53 transport.py(402):     def get_security_options(self):
0.53 transport.py(414):     def start_client(self, event=None):
0.53 transport.py(466):     def start_server(self, event=None, server=None):
0.53 transport.py(530):     def add_server_key(self, key):
0.53 transport.py(545):     def get_server_key(self):
0.53 transport.py(565):     def load_server_moduli(filename=None):
0.53 transport.py(605):     load_server_moduli = staticmethod(load_server_moduli)
0.53 transport.py(607):     def close(self):
0.53 transport.py(619):     def get_remote_server_key(self):
0.53 transport.py(637):     def is_active(self):
0.53 transport.py(647):     def open_session(self):
0.53 transport.py(660):     def open_x11_channel(self, src_addr=None):
0.53 transport.py(676):     def open_forwarded_tcpip_channel(self, (src_addr, src_port), (dest_addr, dest_port)):
0.53 transport.py(689):     def open_channel(self, kind, dest_addr=None, src_addr=None):
0.53 transport.py(757):     def request_port_forward(self, address, port, handler=None):
0.53 transport.py(802):     def cancel_port_forward(self, address, port):
0.53 transport.py(818):     def open_sftp_client(self):
0.53 transport.py(830):     def send_ignore(self, bytes=None):
0.53 transport.py(848):     def renegotiate_keys(self):
0.53 transport.py(873):     def set_keepalive(self, interval):
0.53 transport.py(887):     def global_request(self, kind, data=None, wait=True):
0.53 transport.py(925):     def accept(self, timeout=None):
0.53 transport.py(952):     def connect(self, hostkey=None, username='', password=None, pkey=None):
0.53 transport.py(1011):     def get_exception(self):
0.53 transport.py(1031):     def set_subsystem_handler(self, name, handler, *larg, **kwarg):
0.53 transport.py(1053):     def is_authenticated(self):
0.53 transport.py(1064):     def get_username(self):
0.53 transport.py(1077):     def auth_none(self, username):
0.53 transport.py(1104):     def auth_password(self, username, password, event=None, fallback=True):
0.53 transport.py(1187):     def auth_publickey(self, username, key, event=None):
0.53 transport.py(1236):     def auth_interactive(self, username, handler, submethods=''):
0.53 transport.py(1290):     def set_log_channel(self, name):
0.53 transport.py(1306):     def get_log_channel(self):
0.53 transport.py(1317):     def set_hexdump(self, hexdump):
0.53 transport.py(1329):     def get_hexdump(self):
0.53 transport.py(1341):     def use_compression(self, compress=True):
0.53 transport.py(1358):     def getpeername(self):
0.53 transport.py(1373):     def stop_thread(self):
0.53 transport.py(1381):     def _log(self, level, msg, *args):
0.53 transport.py(1388):     def _get_modulus_pack(self):
0.53 transport.py(1392):     def _next_channel(self):
0.53 transport.py(1401):     def _unlink_channel(self, chanid):
0.53 transport.py(1405):     def _send_message(self, data):
0.53 transport.py(1408):     def _send_user_message(self, data):
0.53 transport.py(1430):     def _set_K_H(self, k, h):
0.53 transport.py(1437):     def _expect_packet(self, *ptypes):
0.53 transport.py(1441):     def _verify_key(self, host_key, sig):
0.53 transport.py(1449):     def _compute_key(self, id, nbytes):
0.53 transport.py(1467):     def _get_cipher(self, name, key, iv):
0.53 transport.py(1484):     def _set_x11_handler(self, handler):
0.53 transport.py(1494):     def _queue_incoming_channel(self, channel):
0.53 transport.py(1502):     def run(self):
0.53 transport.py(1612):     def _negotiate_keys(self, m):
0.53 transport.py(1625):     def _check_banner(self):
0.53 transport.py(1661):     def _send_kex_init(self):
0.53 transport.py(1702):     def _parse_kex_init(self, m):
0.53 transport.py(1799):     def _activate_inbound(self):
0.53 transport.py(1823):     def _activate_outbound(self):
0.53 transport.py(1854):     def _auth_trigger(self):
0.53 transport.py(1866):     def _parse_newkeys(self, m):
0.53 transport.py(1892):     def _parse_disconnect(self, m):
0.53 transport.py(1897):     def _parse_global_request(self, m):
0.53 transport.py(1930):     def _parse_request_success(self, m):
0.53 transport.py(1936):     def _parse_request_failure(self, m):
0.53 transport.py(1942):     def _parse_channel_open_success(self, m):
0.53 transport.py(1962):     def _parse_channel_open_failure(self, m):
0.53 transport.py(1981):     def _parse_channel_open(self, m):
0.53 transport.py(2067):     def _parse_debug(self, m):
0.53 transport.py(2073):     def _get_subsystem_handler(self, name):
0.53 transport.py(2082):     _handler_table = {
0.53 transport.py(2083):         MSG_NEWKEYS: _parse_newkeys,
0.53 transport.py(2084):         MSG_GLOBAL_REQUEST: _parse_global_request,
0.53 transport.py(2085):         MSG_REQUEST_SUCCESS: _parse_request_success,
0.53 transport.py(2086):         MSG_REQUEST_FAILURE: _parse_request_failure,
0.53 transport.py(2087):         MSG_CHANNEL_OPEN_SUCCESS: _parse_channel_open_success,
0.53 transport.py(2088):         MSG_CHANNEL_OPEN_FAILURE: _parse_channel_open_failure,
0.53 transport.py(2089):         MSG_CHANNEL_OPEN: _parse_channel_open,
0.53 transport.py(2090):         MSG_KEXINIT: _negotiate_keys,
0.53 transport.py(2093):     _channel_handler_table = {
0.53 transport.py(2094):         MSG_CHANNEL_SUCCESS: Channel._request_success,
0.53 transport.py(2095):         MSG_CHANNEL_FAILURE: Channel._request_failed,
0.53 transport.py(2096):         MSG_CHANNEL_DATA: Channel._feed,
0.53 transport.py(2097):         MSG_CHANNEL_EXTENDED_DATA: Channel._feed_extended,
0.53 transport.py(2098):         MSG_CHANNEL_WINDOW_ADJUST: Channel._window_adjust,
0.53 transport.py(2099):         MSG_CHANNEL_REQUEST: Channel._handle_request,
0.53 transport.py(2100):         MSG_CHANNEL_EOF: Channel._handle_eof,
0.53 transport.py(2101):         MSG_CHANNEL_CLOSE: Channel._handle_close,
0.53 __init__.py(70): from client import SSHClient, MissingHostKeyPolicy, AutoAddPolicy, RejectPolicy, WarningPolicy
 --- modulename: client, funcname: <module>
0.53 client.py(21): """
0.53 client.py(23): from binascii import hexlify
0.53 client.py(24): import getpass
0.53 client.py(25): import os
0.53 client.py(26): import socket
0.53 client.py(27): import warnings
0.53 client.py(29): from paramiko.agent import Agent
 --- modulename: agent, funcname: <module>
0.53 agent.py(21): """
0.54 agent.py(23): import os
0.54 agent.py(24): import socket
0.54 agent.py(25): import struct
0.54 agent.py(26): import sys
0.54 agent.py(28): from paramiko.ssh_exception import SSHException
0.54 agent.py(29): from paramiko.message import Message
0.54 agent.py(30): from paramiko.pkey import PKey
0.54 agent.py(34):     SSH2_AGENTC_SIGN_REQUEST, SSH2_AGENT_SIGN_RESPONSE = range(11, 15)
0.54 agent.py(37): class Agent:
 --- modulename: agent, funcname: Agent
0.54 agent.py(37): class Agent:
0.54 agent.py(47):     """
0.54 agent.py(49):     def __init__(self):
0.54 agent.py(87):     def close(self):
0.54 agent.py(96):     def get_keys(self):
0.54 agent.py(107):     def _send_message(self, msg):
0.54 agent.py(114):     def _read_all(self, wanted):
0.54 agent.py(126): class AgentKey(PKey):
 --- modulename: agent, funcname: AgentKey
0.54 agent.py(126): class AgentKey(PKey):
0.54 agent.py(131):     """
0.54 agent.py(133):     def __init__(self, agent, blob):
0.54 agent.py(138):     def __str__(self):
0.54 agent.py(141):     def get_name(self):
0.54 agent.py(144):     def sign_ssh_data(self, rng, data):
0.54 client.py(30): from paramiko.common import *
0.54 client.py(31): from paramiko.dsskey import DSSKey
0.54 client.py(32): from paramiko.hostkeys import HostKeys
 --- modulename: hostkeys, funcname: <module>
0.54 hostkeys.py(21): """
0.54 hostkeys.py(23): import base64
0.54 hostkeys.py(24): from Crypto.Hash import SHA, HMAC
 --- modulename: HMAC, funcname: <module>
0.54 HMAC.py(40): """
0.54 HMAC.py(42): __revision__ = "$Id$"
0.54 HMAC.py(44): __all__ = ['new', 'digest_size']
0.54 HMAC.py(46): from Crypto.Util.strxor import strxor_c
0.54 HMAC.py(47): from Crypto.Util.py3compat import *
0.54 HMAC.py(51): digest_size = None
0.54 HMAC.py(53): class HMAC:
 --- modulename: HMAC, funcname: HMAC
0.54 HMAC.py(53): class HMAC:
0.54 HMAC.py(57):     """
0.54 HMAC.py(59):     def __init__(self, key, msg = None, digestmod = None):
0.54 HMAC.py(100):     def update(self, msg):
0.54 HMAC.py(105):     def copy(self):
0.54 HMAC.py(116):     def digest(self):
0.54 HMAC.py(127):     def hexdigest(self):
0.54 HMAC.py(133): def new(key, msg = None, digestmod = None):
0.54 hostkeys.py(25): import UserDict
0.54 hostkeys.py(27): from paramiko.common import *
0.54 hostkeys.py(28): from paramiko.dsskey import DSSKey
0.54 hostkeys.py(29): from paramiko.rsakey import RSAKey
0.54 hostkeys.py(32): class HostKeyEntry:
 --- modulename: hostkeys, funcname: HostKeyEntry
0.54 hostkeys.py(32): class HostKeyEntry:
0.54 hostkeys.py(35):     """
0.54 hostkeys.py(37):     def __init__(self, hostnames=None, key=None):
0.54 hostkeys.py(42):     def from_line(cls, line):
0.54 hostkeys.py(74):     from_line = classmethod(from_line)
0.54 hostkeys.py(76):     def to_line(self):
0.54 hostkeys.py(87):     def __repr__(self):
0.54 hostkeys.py(91): class HostKeys (UserDict.DictMixin):
 --- modulename: hostkeys, funcname: HostKeys
0.54 hostkeys.py(91): class HostKeys (UserDict.DictMixin):
0.54 hostkeys.py(101):     """
0.54 hostkeys.py(103):     def __init__(self, filename=None):
0.54 hostkeys.py(116):     def add(self, hostname, keytype, key):
0.54 hostkeys.py(134):     def load(self, filename):
0.54 hostkeys.py(160):     def save(self, filename):
0.54 hostkeys.py(181):     def lookup(self, hostname):
0.54 hostkeys.py(230):     def check(self, hostname, key):
0.54 hostkeys.py(251):     def clear(self):
0.54 hostkeys.py(257):     def __getitem__(self, key):
0.54 hostkeys.py(263):     def __setitem__(self, hostname, entry):
0.54 hostkeys.py(278):     def keys(self):
0.54 hostkeys.py(287):     def values(self):
0.54 hostkeys.py(293):     def hash_host(hostname, salt=None):
0.54 hostkeys.py(315):     hash_host = staticmethod(hash_host)
0.54 client.py(33): from paramiko.resource import ResourceManager
 --- modulename: resource, funcname: <module>
0.54 resource.py(21): """
0.54 resource.py(23): import weakref
0.54 resource.py(26): class ResourceManager (object):
 --- modulename: resource, funcname: ResourceManager
0.54 resource.py(26): class ResourceManager (object):
0.54 resource.py(41):     """
0.54 resource.py(43):     def __init__(self):
0.54 resource.py(46):     def register(self, obj, resource):
0.54 resource.py(72): ResourceManager = ResourceManager()
 --- modulename: resource, funcname: __init__
0.54 resource.py(44):         self._table = {}
0.54 client.py(34): from paramiko.rsakey import RSAKey
0.54 client.py(35): from paramiko.ssh_exception import SSHException, BadHostKeyException
0.54 client.py(36): from paramiko.transport import Transport
0.54 client.py(39): SSH_PORT = 22
0.54 client.py(41): class MissingHostKeyPolicy (object):
 --- modulename: client, funcname: MissingHostKeyPolicy
0.54 client.py(41): class MissingHostKeyPolicy (object):
0.54 client.py(50):     """
0.54 client.py(52):     def missing_host_key(self, client, hostname, key):
0.54 client.py(62): class AutoAddPolicy (MissingHostKeyPolicy):
 --- modulename: client, funcname: AutoAddPolicy
0.54 client.py(62): class AutoAddPolicy (MissingHostKeyPolicy):
0.54 client.py(66):     """
0.54 client.py(68):     def missing_host_key(self, client, hostname, key):
0.54 client.py(76): class RejectPolicy (MissingHostKeyPolicy):
 --- modulename: client, funcname: RejectPolicy
0.54 client.py(76): class RejectPolicy (MissingHostKeyPolicy):
0.54 client.py(80):     """
0.54 client.py(82):     def missing_host_key(self, client, hostname, key):
0.54 client.py(88): class WarningPolicy (MissingHostKeyPolicy):
 --- modulename: client, funcname: WarningPolicy
0.54 client.py(88): class WarningPolicy (MissingHostKeyPolicy):
0.54 client.py(92):     """
0.54 client.py(93):     def missing_host_key(self, client, hostname, key):
0.54 client.py(98): class SSHClient (object):
 --- modulename: client, funcname: SSHClient
0.54 client.py(98): class SSHClient (object):
0.54 client.py(114):     """
0.54 client.py(116):     def __init__(self):
0.54 client.py(128):     def load_system_host_keys(self, filename=None):
0.54 client.py(158):     def load_host_keys(self, filename):
0.54 client.py(178):     def save_host_keys(self, filename):
0.54 client.py(196):     def get_host_keys(self):
0.54 client.py(206):     def set_log_channel(self, name):
0.54 client.py(216):     def set_missing_host_key_policy(self, policy):
0.54 client.py(229):     def connect(self, hostname, port=SSH_PORT, username=None, password=None, pkey=None,
0.54 client.py(230):                 key_filename=None, timeout=None, allow_agent=True, look_for_keys=True,
0.54 client.py(231):                 compress=False):
0.54 client.py(334):     def close(self):
0.54 client.py(347):     def exec_command(self, command, bufsize=-1):
0.54 client.py(370):     def invoke_shell(self, term='vt100', width=80, height=24):
0.54 client.py(392):     def open_sftp(self):
0.54 client.py(401):     def get_transport(self):
0.54 client.py(412):     def _auth(self, username, password, pkey, key_filenames, allow_agent, look_for_keys):
0.54 client.py(496):     def _log(self, level, msg):
0.54 __init__.py(71): from auth_handler import AuthHandler
0.54 __init__.py(72): from channel import Channel, ChannelFile
0.54 __init__.py(73): from ssh_exception import SSHException, PasswordRequiredException, \
0.54 __init__.py(76): from server import ServerInterface, SubsystemHandler, InteractiveQuery
0.54 __init__.py(77): from rsakey import RSAKey
0.54 __init__.py(78): from dsskey import DSSKey
0.54 __init__.py(79): from sftp import SFTPError, BaseSFTP
0.54 __init__.py(80): from sftp_client import SFTP, SFTPClient
0.54 __init__.py(81): from sftp_server import SFTPServer
 --- modulename: sftp_server, funcname: <module>
0.54 sftp_server.py(21): """
0.54 sftp_server.py(23): import os
0.54 sftp_server.py(24): import errno
0.54 sftp_server.py(26): from Crypto.Hash import MD5, SHA
0.54 sftp_server.py(27): from paramiko.common import *
0.54 sftp_server.py(28): from paramiko.server import SubsystemHandler
0.54 sftp_server.py(29): from paramiko.sftp import *
0.54 sftp_server.py(30): from paramiko.sftp_si import *
 --- modulename: sftp_si, funcname: <module>
0.54 sftp_si.py(21): """
0.54 sftp_si.py(23): import os
0.54 sftp_si.py(25): from paramiko.common import *
0.54 sftp_si.py(26): from paramiko.sftp import *
0.54 sftp_si.py(29): class SFTPServerInterface (object):
 --- modulename: sftp_si, funcname: SFTPServerInterface
0.54 sftp_si.py(29): class SFTPServerInterface (object):
0.54 sftp_si.py(42):     """
0.54 sftp_si.py(44):     def __init__ (self, server, *largs, **kwargs):
0.54 sftp_si.py(55):     def session_started(self):
0.54 sftp_si.py(63):     def session_ended(self):
0.54 sftp_si.py(72):     def open(self, path, flags, attr):
0.54 sftp_si.py(112):     def list_folder(self, path):
0.54 sftp_si.py(142):     def stat(self, path):
0.54 sftp_si.py(158):     def lstat(self, path):
0.54 sftp_si.py(175):     def remove(self, path):
0.54 sftp_si.py(187):     def rename(self, oldpath, newpath):
0.54 sftp_si.py(209):     def mkdir(self, path, attr):
0.54 sftp_si.py(229):     def rmdir(self, path):
0.54 sftp_si.py(243):     def chattr(self, path, attr):
0.54 sftp_si.py(259):     def canonicalize(self, path):
0.54 sftp_si.py(282):     def readlink(self, path):
0.54 sftp_si.py(296):     def symlink(self, target_path, path):
0.54 sftp_server.py(31): from paramiko.sftp_attr import *
0.54 sftp_server.py(35): _hash_class = {
0.54 sftp_server.py(36):     'sha1': SHA,
0.54 sftp_server.py(37):     'md5': MD5,
0.54 sftp_server.py(41): class SFTPServer (BaseSFTP, SubsystemHandler):
 --- modulename: sftp_server, funcname: SFTPServer
0.54 sftp_server.py(41): class SFTPServer (BaseSFTP, SubsystemHandler):
0.54 sftp_server.py(46):     """
0.54 sftp_server.py(48):     def __init__(self, channel, name, server, sftp_si=SFTPServerInterface, *largs, **kwargs):
0.54 sftp_server.py(77):     def _log(self, level, msg):
0.54 sftp_server.py(84):     def start_subsystem(self, name, transport, channel):
0.54 sftp_server.py(112):     def finish_subsystem(self):
0.54 sftp_server.py(123):     def convert_errno(e):
0.54 sftp_server.py(142):     convert_errno = staticmethod(convert_errno)
0.54 sftp_server.py(144):     def set_file_attr(filename, attr):
0.54 sftp_server.py(170):     set_file_attr = staticmethod(set_file_attr)
0.54 sftp_server.py(176):     def _response(self, request_number, t, *arg):
0.54 sftp_server.py(192):     def _send_handle_response(self, request_number, handle, folder=False):
0.54 sftp_server.py(205):     def _send_status(self, request_number, code, desc=None):
0.54 sftp_server.py(214):     def _open_folder(self, request_number, path):
0.54 sftp_server.py(225):     def _read_folder(self, request_number, folder):
0.54 sftp_server.py(239):     def _check_file(self, request_number, msg):
0.54 sftp_server.py(298):     def _convert_pflags(self, pflags):
0.54 sftp_server.py(316):     def _process(self, t, request_number, msg):
0.54 sftp_server.py(444): from paramiko.sftp_handle import SFTPHandle
 --- modulename: sftp_handle, funcname: <module>
0.54 sftp_handle.py(21): """
0.54 sftp_handle.py(23): import os
0.54 sftp_handle.py(25): from paramiko.common import *
0.54 sftp_handle.py(26): from paramiko.sftp import *
0.54 sftp_handle.py(29): class SFTPHandle (object):
 --- modulename: sftp_handle, funcname: SFTPHandle
0.54 sftp_handle.py(29): class SFTPHandle (object):
0.54 sftp_handle.py(37):     """
0.54 sftp_handle.py(38):     def __init__(self, flags=0):
0.54 sftp_handle.py(53):     def close(self):
0.54 sftp_handle.py(72):     def read(self, offset, length):
0.54 sftp_handle.py(109):     def write(self, offset, data):
0.54 sftp_handle.py(149):     def stat(self):
0.54 sftp_handle.py(161):     def chattr(self, attr):
0.54 sftp_handle.py(178):     def _set_files(self, files):
0.54 sftp_handle.py(186):     def _get_next_files(self):
0.54 sftp_handle.py(195):     def _get_name(self):
0.54 sftp_handle.py(198):     def _set_name(self, name):
0.54 sftp_handle.py(202): from paramiko.sftp_server import SFTPServer
0.54 __init__.py(82): from sftp_attr import SFTPAttributes
0.54 __init__.py(83): from sftp_handle import SFTPHandle
0.54 __init__.py(84): from sftp_si import SFTPServerInterface
0.54 __init__.py(85): from sftp_file import SFTPFile
0.54 __init__.py(86): from message import Message
0.54 __init__.py(87): from packet import Packetizer
0.54 __init__.py(88): from file import BufferedFile
0.54 __init__.py(89): from agent import Agent, AgentKey
0.54 __init__.py(90): from pkey import PKey
0.54 __init__.py(91): from hostkeys import HostKeys
0.54 __init__.py(92): from config import SSHConfig
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(98):         c.__module__ = __name__
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(96):     if issubclass(type(c), type) or type(c).__name__ == 'classobj':
0.54 __init__.py(95): for c in locals().values():
0.54 __init__.py(99): del c
0.54 __init__.py(101): from common import AUTH_SUCCESSFUL, AUTH_PARTIALLY_SUCCESSFUL, AUTH_FAILED, \
0.54 __init__.py(105): from sftp import SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED, SFTP_FAILURE, \
0.54 __init__.py(108): __all__ = [ 'Transport',
0.54 __init__.py(109):             'SSHClient',
0.54 __init__.py(110):             'MissingHostKeyPolicy',
0.54 __init__.py(111):             'AutoAddPolicy',
0.54 __init__.py(112):             'RejectPolicy',
0.54 __init__.py(113):             'WarningPolicy',
0.54 __init__.py(114):             'SecurityOptions',
0.54 __init__.py(115):             'SubsystemHandler',
0.54 __init__.py(116):             'Channel',
0.54 __init__.py(117):             'PKey',
0.54 __init__.py(118):             'RSAKey',
0.54 __init__.py(119):             'DSSKey',
0.54 __init__.py(120):             'Message',
0.54 __init__.py(121):             'SSHException',
0.54 __init__.py(122):             'AuthenticationException',
0.54 __init__.py(123):             'PasswordRequiredException',
0.54 __init__.py(124):             'BadAuthenticationType',
0.54 __init__.py(125):             'ChannelException',
0.54 __init__.py(126):             'BadHostKeyException',
0.54 __init__.py(127):             'SFTP',
0.54 __init__.py(128):             'SFTPFile',
0.54 __init__.py(129):             'SFTPHandle',
0.54 __init__.py(130):             'SFTPClient',
0.54 __init__.py(131):             'SFTPServer',
0.54 __init__.py(132):             'SFTPError',
0.54 __init__.py(133):             'SFTPAttributes',
0.54 __init__.py(134):             'SFTPServerInterface',
0.54 __init__.py(135):             'ServerInterface',
0.54 __init__.py(136):             'BufferedFile',
0.54 __init__.py(137):             'Agent',
0.54 __init__.py(138):             'AgentKey',
0.54 __init__.py(139):             'HostKeys',
0.54 __init__.py(140):             'SSHConfig',
0.54 __init__.py(141):             'util' ]
0.54 network.py(31): host_pattern = r'((?P<user>.+)@)?(?P<host>[^:]+)(:(?P<port>\d+))?'
0.54 network.py(32): host_regex = re.compile(host_pattern)
 --- modulename: re, funcname: compile
0.54 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.54 re.py(228):     cachekey = (type(key[0]),) + key
0.54 re.py(229):     p = _cache.get(cachekey)
0.54 re.py(230):     if p is not None:
0.54 re.py(232):     pattern, flags = key
0.54 re.py(233):     if isinstance(pattern, _pattern_type):
0.54 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.54 sre_compile.py(475):     for tp in STRING_TYPES:
0.54 sre_compile.py(476):         if isinstance(obj, tp):
0.54 sre_compile.py(477):             return 1
0.54 re.py(239):     try:
0.54 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.54 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.54 sre_compile.py(475):     for tp in STRING_TYPES:
0.54 sre_compile.py(476):         if isinstance(obj, tp):
0.54 sre_compile.py(477):             return 1
0.54 sre_compile.py(499):         pattern = p
0.54 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.54 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.54 sre_parse.py(179):         self.string = string
0.54 sre_parse.py(180):         self.index = 0
0.54 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(668):     if pattern is None:
0.54 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.54 sre_parse.py(68):         self.flags = 0
0.54 sre_parse.py(69):         self.open = []
0.54 sre_parse.py(70):         self.groups = 1
0.54 sre_parse.py(71):         self.groupdict = {}
0.54 sre_parse.py(670):     pattern.flags = flags
0.54 sre_parse.py(671):     pattern.str = str
0.54 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.54 sre_parse.py(304):     items = []
0.54 sre_parse.py(305):     itemsappend = items.append
0.54 sre_parse.py(306):     sourcematch = source.match
0.54 sre_parse.py(307):     while 1:
0.54 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.54 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.54 sre_parse.py(91):         self.pattern = pattern
0.54 sre_parse.py(92):         if data is None:
0.54 sre_parse.py(93):             data = []
0.54 sre_parse.py(94):         self.data = data
0.54 sre_parse.py(95):         self.width = None
0.54 sre_parse.py(384):     subpatternappend = subpattern.append
0.54 sre_parse.py(385):     sourceget = source.get
0.54 sre_parse.py(386):     sourcematch = source.match
0.54 sre_parse.py(387):     _len = len
0.54 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.54 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.54 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.54 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.54 sre_parse.py(393):     while 1:
0.54 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.54 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.54 sre_parse.py(202):         this = self.next
0.54 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(204):         return this
0.54 sre_parse.py(398):         if this is None:
0.54 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.54 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.54 sre_parse.py(415):         elif this == "[":
0.54 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.54 sre_parse.py(521):         elif this == ".":
0.54 sre_parse.py(524):         elif this == "(":
0.54 sre_parse.py(525):             group = 1
0.54 sre_parse.py(526):             name = None
0.54 sre_parse.py(527):             condgroup = None
0.54 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.54 sre_parse.py(196):         if char == self.next:
0.54 sre_parse.py(200):         return 0
0.54 sre_parse.py(623):             if group:
0.54 sre_parse.py(625):                 if group == 2:
0.54 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.54 sre_parse.py(73):         gid = self.groups
0.54 sre_parse.py(74):         self.groups = gid + 1
0.54 sre_parse.py(75):         if name is not None:
0.54 sre_parse.py(81):         self.open.append(gid)
0.54 sre_parse.py(82):         return gid
0.54 sre_parse.py(630):                 if condgroup:
0.54 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.54 sre_parse.py(304):     items = []
0.54 sre_parse.py(305):     itemsappend = items.append
0.54 sre_parse.py(306):     sourcematch = source.match
0.54 sre_parse.py(307):     while 1:
0.54 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.54 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.54 sre_parse.py(91):         self.pattern = pattern
0.54 sre_parse.py(92):         if data is None:
0.54 sre_parse.py(93):             data = []
0.54 sre_parse.py(94):         self.data = data
0.54 sre_parse.py(95):         self.width = None
0.54 sre_parse.py(384):     subpatternappend = subpattern.append
0.54 sre_parse.py(385):     sourceget = source.get
0.54 sre_parse.py(386):     sourcematch = source.match
0.54 sre_parse.py(387):     _len = len
0.54 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.54 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.54 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.54 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.54 sre_parse.py(393):     while 1:
0.54 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.54 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.54 sre_parse.py(202):         this = self.next
0.54 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(204):         return this
0.54 sre_parse.py(398):         if this is None:
0.54 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.54 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.54 sre_parse.py(415):         elif this == "[":
0.54 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.54 sre_parse.py(521):         elif this == ".":
0.54 sre_parse.py(524):         elif this == "(":
0.54 sre_parse.py(525):             group = 1
0.54 sre_parse.py(526):             name = None
0.54 sre_parse.py(527):             condgroup = None
0.54 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.54 sre_parse.py(196):         if char == self.next:
0.54 sre_parse.py(197):             if skip:
0.54 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(199):             return 1
0.54 sre_parse.py(529):                 group = 0
0.54 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.54 sre_parse.py(196):         if char == self.next:
0.54 sre_parse.py(197):             if skip:
0.54 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(199):             return 1
0.54 sre_parse.py(533):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
0.54 sre_parse.py(196):         if char == self.next:
0.54 sre_parse.py(197):             if skip:
0.54 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.54 sre_parse.py(183):         if self.index >= len(self.string):
0.54 sre_parse.py(186):         char = self.string[self.index]
0.54 sre_parse.py(187):         if char[0] == "\\":
0.54 sre_parse.py(193):         self.index = self.index + len(char)
0.54 sre_parse.py(194):         self.next = char
0.54 sre_parse.py(199):             return 1
0.54 sre_parse.py(535):                         name = ""
0.54 sre_parse.py(536):                         while 1:
0.54 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(541):                                 break
0.55 sre_parse.py(543):                         group = 1
0.55 sre_parse.py(544):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
0.55 sre_parse.py(218):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(223):     return True
0.55 sre_parse.py(623):             if group:
0.55 sre_parse.py(625):                 if group == 2:
0.55 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.55 sre_parse.py(73):         gid = self.groups
0.55 sre_parse.py(74):         self.groups = gid + 1
0.55 sre_parse.py(75):         if name is not None:
0.55 sre_parse.py(76):             ogid = self.groupdict.get(name, None)
0.55 sre_parse.py(77):             if ogid is not None:
0.55 sre_parse.py(80):             self.groupdict[name] = gid
0.55 sre_parse.py(81):         self.open.append(gid)
0.55 sre_parse.py(82):         return gid
0.55 sre_parse.py(630):                 if condgroup:
0.55 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.55 sre_parse.py(304):     items = []
0.55 sre_parse.py(305):     itemsappend = items.append
0.55 sre_parse.py(306):     sourcematch = source.match
0.55 sre_parse.py(307):     while 1:
0.55 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.55 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(93):             data = []
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(384):     subpatternappend = subpattern.append
0.55 sre_parse.py(385):     sourceget = source.get
0.55 sre_parse.py(386):     sourcematch = source.match
0.55 sre_parse.py(387):     _len = len
0.55 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.55 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.55 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.55 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.55 sre_parse.py(393):     while 1:
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(521):         elif this == ".":
0.55 sre_parse.py(522):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(474):             if this == "?":
0.55 sre_parse.py(476):             elif this == "*":
0.55 sre_parse.py(479):             elif this == "+":
0.55 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.55 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
0.55 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.55 sre_parse.py(135):         self.data[index] = code
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(396):             break # end of subpattern
0.55 sre_parse.py(661):     return subpattern
0.55 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(311):         if not nested:
0.55 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(314):             break
0.55 sre_parse.py(318):     if len(items) == 1:
0.55 sre_parse.py(319):         return items[0]
0.55 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(636):                 if group is not None:
0.55 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.55 sre_parse.py(84):         self.open.remove(gid)
0.55 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(413):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(396):             break # end of subpattern
0.55 sre_parse.py(661):     return subpattern
0.55 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(311):         if not nested:
0.55 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(314):             break
0.55 sre_parse.py(318):     if len(items) == 1:
0.55 sre_parse.py(319):         return items[0]
0.55 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(636):                 if group is not None:
0.55 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.55 sre_parse.py(84):         self.open.remove(gid)
0.55 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(474):             if this == "?":
0.55 sre_parse.py(475):                 min, max = 0, 1
0.55 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
0.55 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.55 sre_parse.py(135):         self.data[index] = code
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(521):         elif this == ".":
0.55 sre_parse.py(524):         elif this == "(":
0.55 sre_parse.py(525):             group = 1
0.55 sre_parse.py(526):             name = None
0.55 sre_parse.py(527):             condgroup = None
0.55 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(529):                 group = 0
0.55 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(533):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(535):                         name = ""
0.55 sre_parse.py(536):                         while 1:
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(541):                                 break
0.55 sre_parse.py(543):                         group = 1
0.55 sre_parse.py(544):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
0.55 sre_parse.py(218):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.55 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.55 sre_parse.py(220):     for char in name[1:]:
0.55 sre_parse.py(223):     return True
0.55 sre_parse.py(623):             if group:
0.55 sre_parse.py(625):                 if group == 2:
0.55 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.55 sre_parse.py(73):         gid = self.groups
0.55 sre_parse.py(74):         self.groups = gid + 1
0.55 sre_parse.py(75):         if name is not None:
0.55 sre_parse.py(76):             ogid = self.groupdict.get(name, None)
0.55 sre_parse.py(77):             if ogid is not None:
0.55 sre_parse.py(80):             self.groupdict[name] = gid
0.55 sre_parse.py(81):         self.open.append(gid)
0.55 sre_parse.py(82):         return gid
0.55 sre_parse.py(630):                 if condgroup:
0.55 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.55 sre_parse.py(304):     items = []
0.55 sre_parse.py(305):     itemsappend = items.append
0.55 sre_parse.py(306):     sourcematch = source.match
0.55 sre_parse.py(307):     while 1:
0.55 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.55 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(93):             data = []
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(384):     subpatternappend = subpattern.append
0.55 sre_parse.py(385):     sourceget = source.get
0.55 sre_parse.py(386):     sourcematch = source.match
0.55 sre_parse.py(387):     _len = len
0.55 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.55 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.55 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.55 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.55 sre_parse.py(393):     while 1:
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(417):             set = []
0.55 sre_parse.py(418):             setappend = set.append
0.55 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(422):                 setappend((NEGATE, None))
0.55 sre_parse.py(424):             start = set[:]
0.55 sre_parse.py(425):             while 1:
0.55 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(427):                 if this == "]" and set != start:
0.55 sre_parse.py(429):                 elif this and this[0] == "\\":
0.55 sre_parse.py(431):                 elif this:
0.55 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.55 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(459):                     if code1[0] is IN:
0.55 sre_parse.py(461):                     setappend(code1)
0.55 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(427):                 if this == "]" and set != start:
0.55 sre_parse.py(428):                     break
0.55 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.55 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.55 sre_parse.py(467):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(474):             if this == "?":
0.55 sre_parse.py(476):             elif this == "*":
0.55 sre_parse.py(479):             elif this == "+":
0.55 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.55 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
0.55 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.55 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.55 sre_parse.py(131):         if isinstance(index, slice):
0.55 sre_parse.py(133):         return self.data[index]
0.55 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.55 sre_parse.py(135):         self.data[index] = code
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(396):             break # end of subpattern
0.55 sre_parse.py(661):     return subpattern
0.55 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(311):         if not nested:
0.55 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(314):             break
0.55 sre_parse.py(318):     if len(items) == 1:
0.55 sre_parse.py(319):         return items[0]
0.55 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(636):                 if group is not None:
0.55 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.55 sre_parse.py(84):         self.open.remove(gid)
0.55 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(521):         elif this == ".":
0.55 sre_parse.py(524):         elif this == "(":
0.55 sre_parse.py(525):             group = 1
0.55 sre_parse.py(526):             name = None
0.55 sre_parse.py(527):             condgroup = None
0.55 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(200):         return 0
0.55 sre_parse.py(623):             if group:
0.55 sre_parse.py(625):                 if group == 2:
0.55 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.55 sre_parse.py(73):         gid = self.groups
0.55 sre_parse.py(74):         self.groups = gid + 1
0.55 sre_parse.py(75):         if name is not None:
0.55 sre_parse.py(81):         self.open.append(gid)
0.55 sre_parse.py(82):         return gid
0.55 sre_parse.py(630):                 if condgroup:
0.55 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.55 sre_parse.py(304):     items = []
0.55 sre_parse.py(305):     itemsappend = items.append
0.55 sre_parse.py(306):     sourcematch = source.match
0.55 sre_parse.py(307):     while 1:
0.55 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.55 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.55 sre_parse.py(91):         self.pattern = pattern
0.55 sre_parse.py(92):         if data is None:
0.55 sre_parse.py(93):             data = []
0.55 sre_parse.py(94):         self.data = data
0.55 sre_parse.py(95):         self.width = None
0.55 sre_parse.py(384):     subpatternappend = subpattern.append
0.55 sre_parse.py(385):     sourceget = source.get
0.55 sre_parse.py(386):     sourcematch = source.match
0.55 sre_parse.py(387):     _len = len
0.55 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.55 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.55 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.55 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.55 sre_parse.py(393):     while 1:
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(413):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
0.55 sre_parse.py(139):         self.data.append(code)
0.55 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.55 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(398):         if this is None:
0.55 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.55 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.55 sre_parse.py(415):         elif this == "[":
0.55 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.55 sre_parse.py(521):         elif this == ".":
0.55 sre_parse.py(524):         elif this == "(":
0.55 sre_parse.py(525):             group = 1
0.55 sre_parse.py(526):             name = None
0.55 sre_parse.py(527):             condgroup = None
0.55 sre_parse.py(528):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(529):                 group = 0
0.55 sre_parse.py(531):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(533):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
0.55 sre_parse.py(196):         if char == self.next:
0.55 sre_parse.py(197):             if skip:
0.55 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(199):             return 1
0.55 sre_parse.py(535):                         name = ""
0.55 sre_parse.py(536):                         while 1:
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.55 sre_parse.py(538):                             if char is None:
0.55 sre_parse.py(540):                             if char == ">":
0.55 sre_parse.py(542):                             name = name + char
0.55 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.55 sre_parse.py(202):         this = self.next
0.55 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.55 sre_parse.py(183):         if self.index >= len(self.string):
0.55 sre_parse.py(186):         char = self.string[self.index]
0.55 sre_parse.py(187):         if char[0] == "\\":
0.55 sre_parse.py(193):         self.index = self.index + len(char)
0.55 sre_parse.py(194):         self.next = char
0.55 sre_parse.py(204):         return this
0.56 sre_parse.py(538):                             if char is None:
0.56 sre_parse.py(540):                             if char == ">":
0.56 sre_parse.py(542):                             name = name + char
0.56 sre_parse.py(537):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(186):         char = self.string[self.index]
0.56 sre_parse.py(187):         if char[0] == "\\":
0.56 sre_parse.py(188):             try:
0.56 sre_parse.py(189):                 c = self.string[self.index + 1]
0.56 sre_parse.py(192):             char = char + c
0.56 sre_parse.py(193):         self.index = self.index + len(char)
0.56 sre_parse.py(194):         self.next = char
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(538):                             if char is None:
0.56 sre_parse.py(540):                             if char == ">":
0.56 sre_parse.py(541):                                 break
0.56 sre_parse.py(543):                         group = 1
0.56 sre_parse.py(544):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
0.56 sre_parse.py(218):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
0.56 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.56 sre_parse.py(220):     for char in name[1:]:
0.56 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.56 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.56 sre_parse.py(220):     for char in name[1:]:
0.56 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.56 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.56 sre_parse.py(220):     for char in name[1:]:
0.56 sre_parse.py(221):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
0.56 sre_parse.py(211):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
0.56 sre_parse.py(220):     for char in name[1:]:
0.56 sre_parse.py(223):     return True
0.56 sre_parse.py(623):             if group:
0.56 sre_parse.py(625):                 if group == 2:
0.56 sre_parse.py(629):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
0.56 sre_parse.py(73):         gid = self.groups
0.56 sre_parse.py(74):         self.groups = gid + 1
0.56 sre_parse.py(75):         if name is not None:
0.56 sre_parse.py(76):             ogid = self.groupdict.get(name, None)
0.56 sre_parse.py(77):             if ogid is not None:
0.56 sre_parse.py(80):             self.groupdict[name] = gid
0.56 sre_parse.py(81):         self.open.append(gid)
0.56 sre_parse.py(82):         return gid
0.56 sre_parse.py(630):                 if condgroup:
0.56 sre_parse.py(633):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
0.56 sre_parse.py(304):     items = []
0.56 sre_parse.py(305):     itemsappend = items.append
0.56 sre_parse.py(306):     sourcematch = source.match
0.56 sre_parse.py(307):     while 1:
0.56 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.56 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.56 sre_parse.py(91):         self.pattern = pattern
0.56 sre_parse.py(92):         if data is None:
0.56 sre_parse.py(93):             data = []
0.56 sre_parse.py(94):         self.data = data
0.56 sre_parse.py(95):         self.width = None
0.56 sre_parse.py(384):     subpatternappend = subpattern.append
0.56 sre_parse.py(385):     sourceget = source.get
0.56 sre_parse.py(386):     sourcematch = source.match
0.56 sre_parse.py(387):     _len = len
0.56 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.56 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.56 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.56 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.56 sre_parse.py(393):     while 1:
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(186):         char = self.string[self.index]
0.56 sre_parse.py(187):         if char[0] == "\\":
0.56 sre_parse.py(193):         self.index = self.index + len(char)
0.56 sre_parse.py(194):         self.next = char
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(398):         if this is None:
0.56 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.56 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.56 sre_parse.py(415):         elif this == "[":
0.56 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.56 sre_parse.py(521):         elif this == ".":
0.56 sre_parse.py(524):         elif this == "(":
0.56 sre_parse.py(648):         elif this == "^":
0.56 sre_parse.py(651):         elif this == "$":
0.56 sre_parse.py(654):         elif this and this[0] == "\\":
0.56 sre_parse.py(655):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
0.56 sre_parse.py(259):     code = CATEGORIES.get(escape)
0.56 sre_parse.py(260):     if code:
0.56 sre_parse.py(261):         return code
0.56 sre_parse.py(656):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
0.56 sre_parse.py(139):         self.data.append(code)
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(186):         char = self.string[self.index]
0.56 sre_parse.py(187):         if char[0] == "\\":
0.56 sre_parse.py(193):         self.index = self.index + len(char)
0.56 sre_parse.py(194):         self.next = char
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(398):         if this is None:
0.56 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.56 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.56 sre_parse.py(415):         elif this == "[":
0.56 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.56 sre_parse.py(474):             if this == "?":
0.56 sre_parse.py(476):             elif this == "*":
0.56 sre_parse.py(479):             elif this == "+":
0.56 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.56 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
0.56 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.56 sre_parse.py(91):         self.pattern = pattern
0.56 sre_parse.py(92):         if data is None:
0.56 sre_parse.py(94):         self.data = data
0.56 sre_parse.py(95):         self.width = None
0.56 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(200):         return 0
0.56 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.56 sre_parse.py(135):         self.data[index] = code
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(396):             break # end of subpattern
0.56 sre_parse.py(661):     return subpattern
0.56 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(200):         return 0
0.56 sre_parse.py(311):         if not nested:
0.56 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(197):             if skip:
0.56 sre_parse.py(199):             return 1
0.56 sre_parse.py(314):             break
0.56 sre_parse.py(318):     if len(items) == 1:
0.56 sre_parse.py(319):         return items[0]
0.56 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(197):             if skip:
0.56 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(186):         char = self.string[self.index]
0.56 sre_parse.py(187):         if char[0] == "\\":
0.56 sre_parse.py(193):         self.index = self.index + len(char)
0.56 sre_parse.py(194):         self.next = char
0.56 sre_parse.py(199):             return 1
0.56 sre_parse.py(636):                 if group is not None:
0.56 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.56 sre_parse.py(84):         self.open.remove(gid)
0.56 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.56 sre_parse.py(139):         self.data.append(code)
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(396):             break # end of subpattern
0.56 sre_parse.py(661):     return subpattern
0.56 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(200):         return 0
0.56 sre_parse.py(311):         if not nested:
0.56 sre_parse.py(313):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(197):             if skip:
0.56 sre_parse.py(199):             return 1
0.56 sre_parse.py(314):             break
0.56 sre_parse.py(318):     if len(items) == 1:
0.56 sre_parse.py(319):         return items[0]
0.56 sre_parse.py(634):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(197):             if skip:
0.56 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(186):         char = self.string[self.index]
0.56 sre_parse.py(187):         if char[0] == "\\":
0.56 sre_parse.py(193):         self.index = self.index + len(char)
0.56 sre_parse.py(194):         self.next = char
0.56 sre_parse.py(199):             return 1
0.56 sre_parse.py(636):                 if group is not None:
0.56 sre_parse.py(637):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
0.56 sre_parse.py(84):         self.open.remove(gid)
0.56 sre_parse.py(638):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
0.56 sre_parse.py(139):         self.data.append(code)
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(184):             self.next = None
0.56 sre_parse.py(185):             return
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(398):         if this is None:
0.56 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.56 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.56 sre_parse.py(415):         elif this == "[":
0.56 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.56 sre_parse.py(474):             if this == "?":
0.56 sre_parse.py(475):                 min, max = 0, 1
0.56 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
0.56 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.56 sre_parse.py(91):         self.pattern = pattern
0.56 sre_parse.py(92):         if data is None:
0.56 sre_parse.py(94):         self.data = data
0.56 sre_parse.py(95):         self.width = None
0.56 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.56 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(200):         return 0
0.56 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.56 sre_parse.py(135):         self.data[index] = code
0.56 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.56 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(184):             self.next = None
0.56 sre_parse.py(185):             return
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(398):         if this is None:
0.56 sre_parse.py(399):             break # end of pattern
0.56 sre_parse.py(661):     return subpattern
0.56 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.56 sre_parse.py(196):         if char == self.next:
0.56 sre_parse.py(200):         return 0
0.56 sre_parse.py(311):         if not nested:
0.56 sre_parse.py(312):             break
0.56 sre_parse.py(318):     if len(items) == 1:
0.56 sre_parse.py(319):         return items[0]
0.56 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.56 sre_parse.py(202):         this = self.next
0.56 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.56 sre_parse.py(183):         if self.index >= len(self.string):
0.56 sre_parse.py(184):             self.next = None
0.56 sre_parse.py(185):             return
0.56 sre_parse.py(204):         return this
0.56 sre_parse.py(676):     if tail == ")":
0.56 sre_parse.py(678):     elif tail:
0.56 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.56 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.56 sre_parse.py(689):     return p
0.56 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.56 sre_compile.py(482):     flags = p.pattern.flags | flags
0.56 sre_compile.py(483):     code = []
0.56 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.56 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(169):             elif op in UNITCODES:
0.56 sre_parse.py(170):                 lo = lo + 1
0.56 sre_parse.py(171):                 hi = hi + 1
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.56 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(163):                 lo = lo + i
0.56 sre_parse.py(164):                 hi = hi + j
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(169):             elif op in UNITCODES:
0.56 sre_parse.py(170):                 lo = lo + 1
0.56 sre_parse.py(171):                 hi = hi + 1
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(163):                 lo = lo + i
0.56 sre_parse.py(164):                 hi = hi + j
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.56 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(169):             elif op in UNITCODES:
0.56 sre_parse.py(170):                 lo = lo + 1
0.56 sre_parse.py(171):                 hi = hi + 1
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.56 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(163):                 lo = lo + i
0.56 sre_parse.py(164):                 hi = hi + j
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(169):             elif op in UNITCODES:
0.56 sre_parse.py(170):                 lo = lo + 1
0.56 sre_parse.py(171):                 hi = hi + 1
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(162):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(144):         lo = hi = 0L
0.56 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.56 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(148):             if op is BRANCH:
0.56 sre_parse.py(157):             elif op is CALL:
0.56 sre_parse.py(161):             elif op is SUBPATTERN:
0.56 sre_parse.py(165):             elif op in REPEATCODES:
0.56 sre_parse.py(169):             elif op in UNITCODES:
0.56 sre_parse.py(170):                 lo = lo + 1
0.56 sre_parse.py(171):                 hi = hi + 1
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.56 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(163):                 lo = lo + i
0.56 sre_parse.py(164):                 hi = hi + j
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(163):                 lo = lo + i
0.56 sre_parse.py(164):                 hi = hi + j
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.56 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.56 sre_parse.py(147):         for op, av in self.data:
0.56 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.56 sre_parse.py(175):         return self.width
0.56 sre_compile.py(366):     if lo == 0:
0.56 sre_compile.py(369):     prefix = []
0.56 sre_compile.py(370):     prefixappend = prefix.append
0.56 sre_compile.py(371):     prefix_skip = 0
0.56 sre_compile.py(372):     charset = [] # not used
0.56 sre_compile.py(373):     charsetappend = charset.append
0.56 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.56 sre_compile.py(376):         for op, av in pattern.data:
0.56 sre_compile.py(377):             if op is LITERAL:
0.56 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.56 sre_compile.py(388):                 break
0.56 sre_compile.py(390):         if not prefix and pattern.data:
0.56 sre_compile.py(391):             op, av = pattern.data[0]
0.56 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
0.56 sre_compile.py(409):             elif op is BRANCH:
0.56 sre_compile.py(422):             elif op is IN:
0.56 sre_compile.py(429):     emit = code.append
0.56 sre_compile.py(430):     emit(OPCODES[INFO])
0.56 sre_compile.py(431):     skip = len(code); emit(0)
0.56 sre_compile.py(433):     mask = 0
0.56 sre_compile.py(434):     if prefix:
0.56 sre_compile.py(438):     elif charset:
0.56 sre_compile.py(440):     emit(mask)
0.56 sre_compile.py(442):     if lo < MAXCODE:
0.56 sre_compile.py(443):         emit(lo)
0.56 sre_compile.py(447):     if hi < MAXCODE:
0.56 sre_compile.py(448):         emit(hi)
0.56 sre_compile.py(452):     if prefix:
0.56 sre_compile.py(463):     elif charset:
0.56 sre_compile.py(465):     code[skip] = len(code) - skip
0.56 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.56 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.56 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(143):             return self.width
0.56 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.56 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
0.56 sre_compile.py(86):                 emit(OPCODES[REPEAT])
0.56 sre_compile.py(87):                 skip = _len(code); emit(0)
0.56 sre_compile.py(88):                 emit(av[0])
0.56 sre_compile.py(89):                 emit(av[1])
0.56 sre_compile.py(90):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(96):         elif op is SUBPATTERN:
0.56 sre_compile.py(97):             if av[0]:
0.56 sre_compile.py(98):                 emit(OPCODES[MARK])
0.56 sre_compile.py(99):                 emit((av[0]-1)*2)
0.56 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(96):         elif op is SUBPATTERN:
0.56 sre_compile.py(97):             if av[0]:
0.56 sre_compile.py(98):                 emit(OPCODES[MARK])
0.56 sre_compile.py(99):                 emit((av[0]-1)*2)
0.56 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.56 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.56 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(143):             return self.width
0.56 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.56 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(75):                 if op is MAX_REPEAT:
0.56 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.56 sre_compile.py(79):                 skip = _len(code); emit(0)
0.56 sre_compile.py(80):                 emit(av[0])
0.56 sre_compile.py(81):                 emit(av[1])
0.56 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(60):             if flags & SRE_FLAG_DOTALL:
0.56 sre_compile.py(63):                 emit(OPCODES[ANY])
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.56 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(102):             if av[0]:
0.56 sre_compile.py(103):                 emit(OPCODES[MARK])
0.56 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.56 sre_compile.py(46):                 emit(OPCODES[op])
0.56 sre_compile.py(47):                 emit(av)
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(102):             if av[0]:
0.56 sre_compile.py(103):                 emit(OPCODES[MARK])
0.56 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(91):                 code[skip] = _len(code) - skip
0.56 sre_compile.py(92):                 if op is MAX_REPEAT:
0.56 sre_compile.py(93):                     emit(OPCODES[MAX_UNTIL])
0.56 sre_compile.py(40):     for op, av in pattern:
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(96):         elif op is SUBPATTERN:
0.56 sre_compile.py(97):             if av[0]:
0.56 sre_compile.py(98):                 emit(OPCODES[MARK])
0.56 sre_compile.py(99):                 emit((av[0]-1)*2)
0.56 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.56 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.56 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(143):             return self.width
0.56 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.56 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(75):                 if op is MAX_REPEAT:
0.56 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.56 sre_compile.py(79):                 skip = _len(code); emit(0)
0.56 sre_compile.py(80):                 emit(av[0])
0.56 sre_compile.py(81):                 emit(av[1])
0.56 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.56 sre_compile.py(46):                 emit(OPCODES[op])
0.56 sre_compile.py(47):                 emit(av)
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.56 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(102):             if av[0]:
0.56 sre_compile.py(103):                 emit(OPCODES[MARK])
0.56 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.56 sre_compile.py(40):     for op, av in pattern:
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.56 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.56 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(143):             return self.width
0.56 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.56 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
0.56 sre_compile.py(86):                 emit(OPCODES[REPEAT])
0.56 sre_compile.py(87):                 skip = _len(code); emit(0)
0.56 sre_compile.py(88):                 emit(av[0])
0.56 sre_compile.py(89):                 emit(av[1])
0.56 sre_compile.py(90):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(96):         elif op is SUBPATTERN:
0.56 sre_compile.py(97):             if av[0]:
0.56 sre_compile.py(98):                 emit(OPCODES[MARK])
0.56 sre_compile.py(99):                 emit((av[0]-1)*2)
0.56 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(42):             if flags & SRE_FLAG_IGNORECASE:
0.56 sre_compile.py(46):                 emit(OPCODES[op])
0.56 sre_compile.py(47):                 emit(av)
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(96):         elif op is SUBPATTERN:
0.56 sre_compile.py(97):             if av[0]:
0.56 sre_compile.py(98):                 emit(OPCODES[MARK])
0.56 sre_compile.py(99):                 emit((av[0]-1)*2)
0.56 sre_compile.py(101):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
0.56 sre_compile.py(34):     emit = code.append
0.56 sre_compile.py(35):     _len = len
0.56 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.56 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.56 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.56 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.56 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.56 sre_parse.py(131):         if isinstance(index, slice):
0.56 sre_parse.py(133):         return self.data[index]
0.56 sre_compile.py(41):         if op in LITERAL_CODES:
0.56 sre_compile.py(48):         elif op is IN:
0.56 sre_compile.py(59):         elif op is ANY:
0.56 sre_compile.py(64):         elif op in REPEATING_CODES:
0.56 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.56 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.56 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.56 sre_parse.py(142):         if self.width:
0.56 sre_parse.py(143):             return self.width
0.56 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.56 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(75):                 if op is MAX_REPEAT:
0.57 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.57 sre_compile.py(79):                 skip = _len(code); emit(0)
0.57 sre_compile.py(80):                 emit(av[0])
0.57 sre_compile.py(81):                 emit(av[1])
0.57 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.57 sre_compile.py(34):     emit = code.append
0.57 sre_compile.py(35):     _len = len
0.57 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.57 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.57 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.57 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.57 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(41):         if op in LITERAL_CODES:
0.57 sre_compile.py(48):         elif op is IN:
0.57 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.57 sre_compile.py(54):                 emit(OPCODES[op])
0.57 sre_compile.py(55):                 fixup = _identityfunction
0.57 sre_compile.py(56):             skip = _len(code); emit(0)
0.57 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.57 sre_compile.py(180):     emit = code.append
0.57 sre_compile.py(181):     if fixup is None:
0.57 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.57 sre_compile.py(209):     out = []
0.57 sre_compile.py(210):     outappend = out.append
0.57 sre_compile.py(211):     charmap = [0]*256
0.57 sre_compile.py(212):     try:
0.57 sre_compile.py(213):         for op, av in charset:
0.57 sre_compile.py(214):             if op is NEGATE:
0.57 sre_compile.py(216):             elif op is LITERAL:
0.57 sre_compile.py(218):             elif op is RANGE:
0.57 sre_compile.py(221):             elif op is CATEGORY:
0.57 sre_compile.py(223):                 return charset # cannot compress
0.57 sre_compile.py(184):         emit(OPCODES[op])
0.57 sre_compile.py(185):         if op is NEGATE:
0.57 sre_compile.py(187):         elif op is LITERAL:
0.57 sre_compile.py(189):         elif op is RANGE:
0.57 sre_compile.py(192):         elif op is CHARSET:
0.57 sre_compile.py(194):         elif op is BIGCHARSET:
0.57 sre_compile.py(196):         elif op is CATEGORY:
0.57 sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:
0.57 sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:
0.57 sre_compile.py(202):                 emit(CHCODES[av])
0.57 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.57 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.57 sre_compile.py(58):             code[skip] = _len(code) - skip
0.57 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.57 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.57 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(102):             if av[0]:
0.57 sre_compile.py(103):                 emit(OPCODES[MARK])
0.57 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.57 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(102):             if av[0]:
0.57 sre_compile.py(103):                 emit(OPCODES[MARK])
0.57 sre_compile.py(104):                 emit((av[0]-1)*2+1)
0.57 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.57 sre_parse.py(131):         if isinstance(index, slice):
0.57 sre_parse.py(133):         return self.data[index]
0.57 sre_compile.py(91):                 code[skip] = _len(code) - skip
0.57 sre_compile.py(92):                 if op is MAX_REPEAT:
0.57 sre_compile.py(93):                     emit(OPCODES[MAX_UNTIL])
0.57 sre_compile.py(40):     for op, av in pattern:
0.57 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.57 sre_compile.py(493):     return code
0.57 sre_compile.py(509):     if p.pattern.groups > 100:
0.57 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.57 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.57 sre_compile.py(517):     for k, i in groupindex.items():
0.57 sre_compile.py(518):         indexgroup[i] = k
0.57 sre_compile.py(517):     for k, i in groupindex.items():
0.57 sre_compile.py(518):         indexgroup[i] = k
0.57 sre_compile.py(517):     for k, i in groupindex.items():
0.57 sre_compile.py(518):         indexgroup[i] = k
0.57 sre_compile.py(517):     for k, i in groupindex.items():
0.57 sre_compile.py(520):     return _sre.compile(
0.57 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.57 sre_compile.py(522):         p.pattern.groups-1,
0.57 sre_compile.py(523):         groupindex, indexgroup
0.57 re.py(243):     if len(_cache) >= _MAXCACHE:
0.57 re.py(245):     _cache[cachekey] = p
0.57 re.py(246):     return p
0.57 network.py(35): class HostConnectionCache(dict):
 --- modulename: network, funcname: HostConnectionCache
0.57 network.py(35): class HostConnectionCache(dict):
0.57 network.py(65):     """
0.57 network.py(66):     def __getitem__(self, key):
0.57 network.py(77):     def __setitem__(self, key, value):
0.57 network.py(80):     def __delitem__(self, key):
0.57 network.py(83):     def __contains__(self, key):
0.57 network.py(86): def normalize(host_string, omit_port=False):
0.57 network.py(107): def to_dict(host_string):
0.57 network.py(113): def from_dict(arg):
0.57 network.py(117): def denormalize(host_string):
0.57 network.py(135): def join_host_strings(user, host, port=None):
0.57 network.py(151): def normalize_to_string(host_string):
0.57 network.py(158): def connect(user, host, port):
0.57 network.py(281): def prompt_for_password(prompt=None, no_colon=False, stream=None):
0.57 network.py(316): def needs_host(func):
0.57 network.py(346): def disconnect_all():
0.57 state.py(10): from fabric.version import get_version
 --- modulename: version, funcname: <module>
0.57 version.py(7): """
0.57 version.py(9): from subprocess import Popen, PIPE
 --- modulename: subprocess, funcname: <module>
0.57 subprocess.py(389): """
0.57 subprocess.py(391): import sys
0.57 subprocess.py(392): mswindows = (sys.platform == "win32")
0.57 subprocess.py(394): import os
0.57 subprocess.py(395): import types
0.57 subprocess.py(396): import traceback
0.57 subprocess.py(397): import gc
0.57 subprocess.py(398): import signal
0.57 subprocess.py(399): import errno
0.57 subprocess.py(402): class CalledProcessError(Exception):
 --- modulename: subprocess, funcname: CalledProcessError
0.57 subprocess.py(402): class CalledProcessError(Exception):
0.57 subprocess.py(407):     """
0.57 subprocess.py(408):     def __init__(self, returncode, cmd, output=None):
0.57 subprocess.py(412):     def __str__(self):
0.57 subprocess.py(416): if mswindows:
0.57 subprocess.py(429):     import select
0.57 subprocess.py(430):     _has_poll = hasattr(select, 'poll')
0.57 subprocess.py(431):     import fcntl
0.57 subprocess.py(432):     import pickle
 --- modulename: pickle, funcname: <module>
0.57 pickle.py(25): """
0.57 pickle.py(27): __version__ = "$Revision: 72223 $"       # Code version
0.57 pickle.py(29): from types import *
0.57 pickle.py(30): from copy_reg import dispatch_table
0.57 pickle.py(31): from copy_reg import _extension_registry, _inverted_registry, _extension_cache
0.57 pickle.py(32): import marshal
0.57 pickle.py(33): import sys
0.57 pickle.py(34): import struct
0.57 pickle.py(35): import re
0.57 pickle.py(37): __all__ = ["PickleError", "PicklingError", "UnpicklingError", "Pickler",
0.57 pickle.py(38):            "Unpickler", "dump", "dumps", "load", "loads"]
0.57 pickle.py(41): format_version = "2.0"                  # File format version we write
0.57 pickle.py(42): compatible_formats = ["1.0",            # Original protocol 0
0.57 pickle.py(43):                       "1.1",            # Protocol 0 with INST added
0.57 pickle.py(44):                       "1.2",            # Original protocol 1
0.57 pickle.py(45):                       "1.3",            # Protocol 1 with BINFLOAT added
0.57 pickle.py(46):                       "2.0",            # Protocol 2
0.57 pickle.py(51): HIGHEST_PROTOCOL = 2
0.57 pickle.py(56): mloads = marshal.loads
0.57 pickle.py(58): class PickleError(Exception):
 --- modulename: pickle, funcname: PickleError
0.57 pickle.py(58): class PickleError(Exception):
0.57 pickle.py(59):     """A common base class for the other pickling exceptions."""
0.57 pickle.py(60):     pass
0.57 pickle.py(62): class PicklingError(PickleError):
 --- modulename: pickle, funcname: PicklingError
0.57 pickle.py(62): class PicklingError(PickleError):
0.57 pickle.py(66):     """
0.57 pickle.py(67):     pass
0.57 pickle.py(69): class UnpicklingError(PickleError):
 --- modulename: pickle, funcname: UnpicklingError
0.57 pickle.py(69): class UnpicklingError(PickleError):
0.57 pickle.py(77):     """
0.57 pickle.py(78):     pass
0.57 pickle.py(82): class _Stop(Exception):
 --- modulename: pickle, funcname: _Stop
0.57 pickle.py(82): class _Stop(Exception):
0.57 pickle.py(83):     def __init__(self, value):
0.57 pickle.py(87): try:
0.57 pickle.py(88):     from org.python.core import PyStringMap
0.57 pickle.py(89): except ImportError:
0.57 pickle.py(90):     PyStringMap = None
0.57 pickle.py(93): try:
0.57 pickle.py(94):     UnicodeType
0.57 pickle.py(102): MARK            = '('   # push special markobject on stack
0.57 pickle.py(103): STOP            = '.'   # every pickle ends with STOP
0.57 pickle.py(104): POP             = '0'   # discard topmost stack item
0.57 pickle.py(105): POP_MARK        = '1'   # discard stack top through topmost markobject
0.57 pickle.py(106): DUP             = '2'   # duplicate top stack item
0.57 pickle.py(107): FLOAT           = 'F'   # push float object; decimal string argument
0.57 pickle.py(108): INT             = 'I'   # push integer or bool; decimal string argument
0.57 pickle.py(109): BININT          = 'J'   # push four-byte signed int
0.57 pickle.py(110): BININT1         = 'K'   # push 1-byte unsigned int
0.57 pickle.py(111): LONG            = 'L'   # push long; decimal string argument
0.57 pickle.py(112): BININT2         = 'M'   # push 2-byte unsigned int
0.57 pickle.py(113): NONE            = 'N'   # push None
0.57 pickle.py(114): PERSID          = 'P'   # push persistent object; id is taken from string arg
0.57 pickle.py(115): BINPERSID       = 'Q'   #  "       "         "  ;  "  "   "     "  stack
0.57 pickle.py(116): REDUCE          = 'R'   # apply callable to argtuple, both on stack
0.57 pickle.py(117): STRING          = 'S'   # push string; NL-terminated string argument
0.57 pickle.py(118): BINSTRING       = 'T'   # push string; counted binary string argument
0.57 pickle.py(119): SHORT_BINSTRING = 'U'   #  "     "   ;    "      "       "      " < 256 bytes
0.57 pickle.py(120): UNICODE         = 'V'   # push Unicode string; raw-unicode-escaped'd argument
0.57 pickle.py(121): BINUNICODE      = 'X'   #   "     "       "  ; counted UTF-8 string argument
0.57 pickle.py(122): APPEND          = 'a'   # append stack top to list below it
0.57 pickle.py(123): BUILD           = 'b'   # call __setstate__ or __dict__.update()
0.57 pickle.py(124): GLOBAL          = 'c'   # push self.find_class(modname, name); 2 string args
0.57 pickle.py(125): DICT            = 'd'   # build a dict from stack items
0.57 pickle.py(126): EMPTY_DICT      = '}'   # push empty dict
0.57 pickle.py(127): APPENDS         = 'e'   # extend list on stack by topmost stack slice
0.57 pickle.py(128): GET             = 'g'   # push item from memo on stack; index is string arg
0.57 pickle.py(129): BINGET          = 'h'   #   "    "    "    "   "   "  ;   "    " 1-byte arg
0.57 pickle.py(130): INST            = 'i'   # build & push class instance
0.57 pickle.py(131): LONG_BINGET     = 'j'   # push item from memo on stack; index is 4-byte arg
0.57 pickle.py(132): LIST            = 'l'   # build list from topmost stack items
0.57 pickle.py(133): EMPTY_LIST      = ']'   # push empty list
0.57 pickle.py(134): OBJ             = 'o'   # build & push class instance
0.57 pickle.py(135): PUT             = 'p'   # store stack top in memo; index is string arg
0.57 pickle.py(136): BINPUT          = 'q'   #   "     "    "   "   " ;   "    " 1-byte arg
0.57 pickle.py(137): LONG_BINPUT     = 'r'   #   "     "    "   "   " ;   "    " 4-byte arg
0.57 pickle.py(138): SETITEM         = 's'   # add key+value pair to dict
0.57 pickle.py(139): TUPLE           = 't'   # build tuple from topmost stack items
0.57 pickle.py(140): EMPTY_TUPLE     = ')'   # push empty tuple
0.57 pickle.py(141): SETITEMS        = 'u'   # modify dict by adding topmost key+value pairs
0.57 pickle.py(142): BINFLOAT        = 'G'   # push float; arg is 8-byte float encoding
0.57 pickle.py(144): TRUE            = 'I01\n'  # not an opcode; see INT docs in pickletools.py
0.57 pickle.py(145): FALSE           = 'I00\n'  # not an opcode; see INT docs in pickletools.py
0.57 pickle.py(149): PROTO           = '\x80'  # identify pickle protocol
0.57 pickle.py(150): NEWOBJ          = '\x81'  # build object by applying cls.__new__ to argtuple
0.57 pickle.py(151): EXT1            = '\x82'  # push object from extension registry; 1-byte index
0.57 pickle.py(152): EXT2            = '\x83'  # ditto, but 2-byte index
0.57 pickle.py(153): EXT4            = '\x84'  # ditto, but 4-byte index
0.57 pickle.py(154): TUPLE1          = '\x85'  # build 1-tuple from stack top
0.57 pickle.py(155): TUPLE2          = '\x86'  # build 2-tuple from two topmost stack items
0.57 pickle.py(156): TUPLE3          = '\x87'  # build 3-tuple from three topmost stack items
0.57 pickle.py(157): NEWTRUE         = '\x88'  # push True
0.57 pickle.py(158): NEWFALSE        = '\x89'  # push False
0.57 pickle.py(159): LONG1           = '\x8a'  # push long from < 256 bytes
0.57 pickle.py(160): LONG4           = '\x8b'  # push really big long
0.57 pickle.py(162): _tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]
0.57 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.57 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.57 re.py(228):     cachekey = (type(key[0]),) + key
0.57 re.py(229):     p = _cache.get(cachekey)
0.57 re.py(230):     if p is not None:
0.57 re.py(232):     pattern, flags = key
0.57 re.py(233):     if isinstance(pattern, _pattern_type):
0.57 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.57 sre_compile.py(475):     for tp in STRING_TYPES:
0.57 sre_compile.py(476):         if isinstance(obj, tp):
0.57 sre_compile.py(477):             return 1
0.57 re.py(239):     try:
0.57 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.57 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.57 sre_compile.py(475):     for tp in STRING_TYPES:
0.57 sre_compile.py(476):         if isinstance(obj, tp):
0.57 sre_compile.py(477):             return 1
0.57 sre_compile.py(499):         pattern = p
0.57 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.57 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.57 sre_parse.py(179):         self.string = string
0.57 sre_parse.py(180):         self.index = 0
0.57 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.57 sre_parse.py(183):         if self.index >= len(self.string):
0.57 sre_parse.py(186):         char = self.string[self.index]
0.57 sre_parse.py(187):         if char[0] == "\\":
0.57 sre_parse.py(193):         self.index = self.index + len(char)
0.57 sre_parse.py(194):         self.next = char
0.57 sre_parse.py(668):     if pattern is None:
0.57 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.57 sre_parse.py(68):         self.flags = 0
0.57 sre_parse.py(69):         self.open = []
0.57 sre_parse.py(70):         self.groups = 1
0.57 sre_parse.py(71):         self.groupdict = {}
0.57 sre_parse.py(670):     pattern.flags = flags
0.57 sre_parse.py(671):     pattern.str = str
0.57 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.57 sre_parse.py(304):     items = []
0.57 sre_parse.py(305):     itemsappend = items.append
0.57 sre_parse.py(306):     sourcematch = source.match
0.57 sre_parse.py(307):     while 1:
0.57 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.57 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.57 sre_parse.py(91):         self.pattern = pattern
0.57 sre_parse.py(92):         if data is None:
0.57 sre_parse.py(93):             data = []
0.57 sre_parse.py(94):         self.data = data
0.57 sre_parse.py(95):         self.width = None
0.57 sre_parse.py(384):     subpatternappend = subpattern.append
0.57 sre_parse.py(385):     sourceget = source.get
0.57 sre_parse.py(386):     sourcematch = source.match
0.57 sre_parse.py(387):     _len = len
0.57 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.57 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.57 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.57 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.57 sre_parse.py(393):     while 1:
0.57 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.57 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.57 sre_parse.py(202):         this = self.next
0.57 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.57 sre_parse.py(183):         if self.index >= len(self.string):
0.57 sre_parse.py(186):         char = self.string[self.index]
0.57 sre_parse.py(187):         if char[0] == "\\":
0.57 sre_parse.py(193):         self.index = self.index + len(char)
0.57 sre_parse.py(194):         self.next = char
0.57 sre_parse.py(204):         return this
0.57 sre_parse.py(398):         if this is None:
0.57 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.57 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.57 sre_parse.py(415):         elif this == "[":
0.57 sre_parse.py(417):             set = []
0.57 sre_parse.py(418):             setappend = set.append
0.57 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.57 sre_parse.py(196):         if char == self.next:
0.57 sre_parse.py(200):         return 0
0.57 sre_parse.py(424):             start = set[:]
0.57 sre_parse.py(425):             while 1:
0.57 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.57 sre_parse.py(202):         this = self.next
0.57 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.57 sre_parse.py(183):         if self.index >= len(self.string):
0.57 sre_parse.py(186):         char = self.string[self.index]
0.57 sre_parse.py(187):         if char[0] == "\\":
0.57 sre_parse.py(193):         self.index = self.index + len(char)
0.57 sre_parse.py(194):         self.next = char
0.57 sre_parse.py(204):         return this
0.57 sre_parse.py(427):                 if this == "]" and set != start:
0.57 sre_parse.py(429):                 elif this and this[0] == "\\":
0.57 sre_parse.py(431):                 elif this:
0.57 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.57 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.57 sre_parse.py(196):         if char == self.next:
0.57 sre_parse.py(197):             if skip:
0.57 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.57 sre_parse.py(183):         if self.index >= len(self.string):
0.57 sre_parse.py(186):         char = self.string[self.index]
0.57 sre_parse.py(187):         if char[0] == "\\":
0.57 sre_parse.py(193):         self.index = self.index + len(char)
0.57 sre_parse.py(194):         self.next = char
0.57 sre_parse.py(199):             return 1
0.57 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.57 sre_parse.py(202):         this = self.next
0.57 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.57 sre_parse.py(183):         if self.index >= len(self.string):
0.57 sre_parse.py(186):         char = self.string[self.index]
0.57 sre_parse.py(187):         if char[0] == "\\":
0.57 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(438):                     if this == "]":
0.58 sre_parse.py(444):                     elif this:
0.58 sre_parse.py(445):                         if this[0] == "\\":
0.58 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.58 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.58 sre_parse.py(451):                         lo = code1[1]
0.58 sre_parse.py(452):                         hi = code2[1]
0.58 sre_parse.py(453):                         if hi < lo:
0.58 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.58 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(427):                 if this == "]" and set != start:
0.58 sre_parse.py(428):                     break
0.58 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.58 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.58 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.58 sre_parse.py(139):         self.data.append(code)
0.58 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.58 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(398):         if this is None:
0.58 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.58 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.58 sre_parse.py(415):         elif this == "[":
0.58 sre_parse.py(417):             set = []
0.58 sre_parse.py(418):             setappend = set.append
0.58 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(200):         return 0
0.58 sre_parse.py(424):             start = set[:]
0.58 sre_parse.py(425):             while 1:
0.58 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(427):                 if this == "]" and set != start:
0.58 sre_parse.py(429):                 elif this and this[0] == "\\":
0.58 sre_parse.py(431):                 elif this:
0.58 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.58 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(197):             if skip:
0.58 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(199):             return 1
0.58 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(438):                     if this == "]":
0.58 sre_parse.py(444):                     elif this:
0.58 sre_parse.py(445):                         if this[0] == "\\":
0.58 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.58 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.58 sre_parse.py(451):                         lo = code1[1]
0.58 sre_parse.py(452):                         hi = code2[1]
0.58 sre_parse.py(453):                         if hi < lo:
0.58 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.58 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(427):                 if this == "]" and set != start:
0.58 sre_parse.py(429):                 elif this and this[0] == "\\":
0.58 sre_parse.py(431):                 elif this:
0.58 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.58 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(197):             if skip:
0.58 sre_parse.py(198):                 self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(199):             return 1
0.58 sre_parse.py(437):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(438):                     if this == "]":
0.58 sre_parse.py(444):                     elif this:
0.58 sre_parse.py(445):                         if this[0] == "\\":
0.58 sre_parse.py(448):                             code2 = LITERAL, ord(this)
0.58 sre_parse.py(449):                         if code1[0] != LITERAL or code2[0] != LITERAL:
0.58 sre_parse.py(451):                         lo = code1[1]
0.58 sre_parse.py(452):                         hi = code2[1]
0.58 sre_parse.py(453):                         if hi < lo:
0.58 sre_parse.py(455):                         setappend((RANGE, (lo, hi)))
0.58 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(427):                 if this == "]" and set != start:
0.58 sre_parse.py(429):                 elif this and this[0] == "\\":
0.58 sre_parse.py(431):                 elif this:
0.58 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.58 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(200):         return 0
0.58 sre_parse.py(459):                     if code1[0] is IN:
0.58 sre_parse.py(461):                     setappend(code1)
0.58 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(427):                 if this == "]" and set != start:
0.58 sre_parse.py(428):                     break
0.58 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.58 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.58 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.58 sre_parse.py(139):         self.data.append(code)
0.58 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.58 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(186):         char = self.string[self.index]
0.58 sre_parse.py(187):         if char[0] == "\\":
0.58 sre_parse.py(193):         self.index = self.index + len(char)
0.58 sre_parse.py(194):         self.next = char
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(398):         if this is None:
0.58 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.58 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.58 sre_parse.py(415):         elif this == "[":
0.58 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.58 sre_parse.py(474):             if this == "?":
0.58 sre_parse.py(476):             elif this == "*":
0.58 sre_parse.py(479):             elif this == "+":
0.58 sre_parse.py(480):                 min, max = 1, MAXREPEAT
0.58 sre_parse.py(508):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
0.58 sre_parse.py(127):         return len(self.data)
0.58 sre_parse.py(509):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
0.58 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.58 sre_parse.py(131):         if isinstance(index, slice):
0.58 sre_parse.py(132):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
0.58 sre_parse.py(91):         self.pattern = pattern
0.58 sre_parse.py(92):         if data is None:
0.58 sre_parse.py(94):         self.data = data
0.58 sre_parse.py(95):         self.width = None
0.58 sre_parse.py(512):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
0.58 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
0.58 sre_parse.py(127):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
0.58 sre_parse.py(131):         if isinstance(index, slice):
0.58 sre_parse.py(133):         return self.data[index]
0.58 sre_parse.py(514):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
0.58 sre_parse.py(131):         if isinstance(index, slice):
0.58 sre_parse.py(133):         return self.data[index]
0.58 sre_parse.py(516):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(200):         return 0
0.58 sre_parse.py(519):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
0.58 sre_parse.py(135):         self.data[index] = code
0.58 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.58 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(184):             self.next = None
0.58 sre_parse.py(185):             return
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(398):         if this is None:
0.58 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.58 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.58 sre_parse.py(415):         elif this == "[":
0.58 sre_parse.py(472):         elif this and this[0] in REPEAT_CHARS:
0.58 sre_parse.py(521):         elif this == ".":
0.58 sre_parse.py(524):         elif this == "(":
0.58 sre_parse.py(648):         elif this == "^":
0.58 sre_parse.py(651):         elif this == "$":
0.58 sre_parse.py(652):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
0.58 sre_parse.py(139):         self.data.append(code)
0.58 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.58 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(184):             self.next = None
0.58 sre_parse.py(185):             return
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(398):         if this is None:
0.58 sre_parse.py(399):             break # end of pattern
0.58 sre_parse.py(661):     return subpattern
0.58 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.58 sre_parse.py(196):         if char == self.next:
0.58 sre_parse.py(200):         return 0
0.58 sre_parse.py(311):         if not nested:
0.58 sre_parse.py(312):             break
0.58 sre_parse.py(318):     if len(items) == 1:
0.58 sre_parse.py(319):         return items[0]
0.58 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.58 sre_parse.py(202):         this = self.next
0.58 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.58 sre_parse.py(183):         if self.index >= len(self.string):
0.58 sre_parse.py(184):             self.next = None
0.58 sre_parse.py(185):             return
0.58 sre_parse.py(204):         return this
0.58 sre_parse.py(676):     if tail == ")":
0.58 sre_parse.py(678):     elif tail:
0.58 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.58 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.58 sre_parse.py(689):     return p
0.58 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.58 sre_compile.py(482):     flags = p.pattern.flags | flags
0.58 sre_compile.py(483):     code = []
0.58 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.58 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.58 sre_parse.py(142):         if self.width:
0.58 sre_parse.py(144):         lo = hi = 0L
0.58 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.58 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(148):             if op is BRANCH:
0.58 sre_parse.py(157):             elif op is CALL:
0.58 sre_parse.py(161):             elif op is SUBPATTERN:
0.58 sre_parse.py(165):             elif op in REPEATCODES:
0.58 sre_parse.py(169):             elif op in UNITCODES:
0.58 sre_parse.py(170):                 lo = lo + 1
0.58 sre_parse.py(171):                 hi = hi + 1
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(148):             if op is BRANCH:
0.58 sre_parse.py(157):             elif op is CALL:
0.58 sre_parse.py(161):             elif op is SUBPATTERN:
0.58 sre_parse.py(165):             elif op in REPEATCODES:
0.58 sre_parse.py(166):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.58 sre_parse.py(142):         if self.width:
0.58 sre_parse.py(144):         lo = hi = 0L
0.58 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.58 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(148):             if op is BRANCH:
0.58 sre_parse.py(157):             elif op is CALL:
0.58 sre_parse.py(161):             elif op is SUBPATTERN:
0.58 sre_parse.py(165):             elif op in REPEATCODES:
0.58 sre_parse.py(169):             elif op in UNITCODES:
0.58 sre_parse.py(170):                 lo = lo + 1
0.58 sre_parse.py(171):                 hi = hi + 1
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.58 sre_parse.py(175):         return self.width
0.58 sre_parse.py(167):                 lo = lo + long(i) * av[0]
0.58 sre_parse.py(168):                 hi = hi + long(j) * av[1]
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(148):             if op is BRANCH:
0.58 sre_parse.py(157):             elif op is CALL:
0.58 sre_parse.py(161):             elif op is SUBPATTERN:
0.58 sre_parse.py(165):             elif op in REPEATCODES:
0.58 sre_parse.py(169):             elif op in UNITCODES:
0.58 sre_parse.py(172):             elif op == SUCCESS:
0.58 sre_parse.py(147):         for op, av in self.data:
0.58 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.58 sre_parse.py(175):         return self.width
0.58 sre_compile.py(366):     if lo == 0:
0.58 sre_compile.py(369):     prefix = []
0.58 sre_compile.py(370):     prefixappend = prefix.append
0.58 sre_compile.py(371):     prefix_skip = 0
0.58 sre_compile.py(372):     charset = [] # not used
0.58 sre_compile.py(373):     charsetappend = charset.append
0.58 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.58 sre_compile.py(376):         for op, av in pattern.data:
0.58 sre_compile.py(377):             if op is LITERAL:
0.58 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.58 sre_compile.py(388):                 break
0.58 sre_compile.py(390):         if not prefix and pattern.data:
0.58 sre_compile.py(391):             op, av = pattern.data[0]
0.58 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
0.58 sre_compile.py(409):             elif op is BRANCH:
0.58 sre_compile.py(422):             elif op is IN:
0.58 sre_compile.py(423):                 charset = av
0.58 sre_compile.py(429):     emit = code.append
0.58 sre_compile.py(430):     emit(OPCODES[INFO])
0.58 sre_compile.py(431):     skip = len(code); emit(0)
0.58 sre_compile.py(433):     mask = 0
0.58 sre_compile.py(434):     if prefix:
0.58 sre_compile.py(438):     elif charset:
0.58 sre_compile.py(439):         mask = mask + SRE_INFO_CHARSET
0.58 sre_compile.py(440):     emit(mask)
0.58 sre_compile.py(442):     if lo < MAXCODE:
0.58 sre_compile.py(443):         emit(lo)
0.58 sre_compile.py(447):     if hi < MAXCODE:
0.58 sre_compile.py(448):         emit(hi)
0.58 sre_compile.py(452):     if prefix:
0.58 sre_compile.py(463):     elif charset:
0.58 sre_compile.py(464):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
0.58 sre_compile.py(180):     emit = code.append
0.58 sre_compile.py(181):     if fixup is None:
0.58 sre_compile.py(182):         fixup = _identityfunction
0.58 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.58 sre_compile.py(209):     out = []
0.58 sre_compile.py(210):     outappend = out.append
0.58 sre_compile.py(211):     charmap = [0]*256
0.58 sre_compile.py(212):     try:
0.58 sre_compile.py(213):         for op, av in charset:
0.58 sre_compile.py(214):             if op is NEGATE:
0.58 sre_compile.py(216):             elif op is LITERAL:
0.58 sre_compile.py(218):             elif op is RANGE:
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.58 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.58 sre_compile.py(25):     return x
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(220):                     charmap[i] = 1
0.58 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.58 sre_compile.py(213):         for op, av in charset:
0.58 sre_compile.py(228):     i = p = n = 0
0.58 sre_compile.py(229):     runs = []
0.58 sre_compile.py(230):     runsappend = runs.append
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(234):                 p = i
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(233):             if n == 0:
0.58 sre_compile.py(235):             n = n + 1
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(237):             runsappend((p, n))
0.58 sre_compile.py(238):             n = 0
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.58 sre_compile.py(239):         i = i + 1
0.58 sre_compile.py(231):     for c in charmap:
0.58 sre_compile.py(232):         if c:
0.58 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(240):     if n:
0.59 sre_compile.py(242):     if len(runs) <= 2:
0.59 sre_compile.py(244):         for p, n in runs:
0.59 sre_compile.py(245):             if n == 1:
0.59 sre_compile.py(248):                 outappend((RANGE, (p, p+n-1)))
0.59 sre_compile.py(244):         for p, n in runs:
0.59 sre_compile.py(249):         if len(out) < len(charset):
0.59 sre_compile.py(256):     return charset
0.59 sre_compile.py(184):         emit(OPCODES[op])
0.59 sre_compile.py(185):         if op is NEGATE:
0.59 sre_compile.py(187):         elif op is LITERAL:
0.59 sre_compile.py(189):         elif op is RANGE:
0.59 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.59 sre_compile.py(25):     return x
0.59 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.59 sre_compile.py(25):     return x
0.59 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.59 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.59 sre_compile.py(465):     code[skip] = len(code) - skip
0.59 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.59 sre_compile.py(34):     emit = code.append
0.59 sre_compile.py(35):     _len = len
0.59 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.59 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.59 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.59 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.59 sre_compile.py(40):     for op, av in pattern:
0.59 sre_compile.py(41):         if op in LITERAL_CODES:
0.59 sre_compile.py(48):         elif op is IN:
0.59 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.59 sre_compile.py(54):                 emit(OPCODES[op])
0.59 sre_compile.py(55):                 fixup = _identityfunction
0.59 sre_compile.py(56):             skip = _len(code); emit(0)
0.59 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.59 sre_compile.py(180):     emit = code.append
0.59 sre_compile.py(181):     if fixup is None:
0.59 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.59 sre_compile.py(209):     out = []
0.59 sre_compile.py(210):     outappend = out.append
0.59 sre_compile.py(211):     charmap = [0]*256
0.59 sre_compile.py(212):     try:
0.59 sre_compile.py(213):         for op, av in charset:
0.59 sre_compile.py(214):             if op is NEGATE:
0.59 sre_compile.py(216):             elif op is LITERAL:
0.59 sre_compile.py(218):             elif op is RANGE:
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.59 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.59 sre_compile.py(25):     return x
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(220):                     charmap[i] = 1
0.59 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.59 sre_compile.py(213):         for op, av in charset:
0.59 sre_compile.py(228):     i = p = n = 0
0.59 sre_compile.py(229):     runs = []
0.59 sre_compile.py(230):     runsappend = runs.append
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.59 sre_compile.py(231):     for c in charmap:
0.59 sre_compile.py(232):         if c:
0.59 sre_compile.py(236):         elif n:
0.59 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(234):                 p = i
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(233):             if n == 0:
0.60 sre_compile.py(235):             n = n + 1
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(237):             runsappend((p, n))
0.60 sre_compile.py(238):             n = 0
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(232):         if c:
0.60 sre_compile.py(236):         elif n:
0.60 sre_compile.py(239):         i = i + 1
0.60 sre_compile.py(231):     for c in charmap:
0.60 sre_compile.py(240):     if n:
0.60 sre_compile.py(242):     if len(runs) <= 2:
0.60 sre_compile.py(244):         for p, n in runs:
0.60 sre_compile.py(245):             if n == 1:
0.60 sre_compile.py(248):                 outappend((RANGE, (p, p+n-1)))
0.60 sre_compile.py(244):         for p, n in runs:
0.60 sre_compile.py(249):         if len(out) < len(charset):
0.60 sre_compile.py(256):     return charset
0.60 sre_compile.py(184):         emit(OPCODES[op])
0.60 sre_compile.py(185):         if op is NEGATE:
0.60 sre_compile.py(187):         elif op is LITERAL:
0.60 sre_compile.py(189):         elif op is RANGE:
0.60 sre_compile.py(190):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
0.60 sre_compile.py(25):     return x
0.60 sre_compile.py(191):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
0.60 sre_compile.py(25):     return x
0.60 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.60 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.60 sre_compile.py(58):             code[skip] = _len(code) - skip
0.60 sre_compile.py(40):     for op, av in pattern:
0.60 sre_compile.py(41):         if op in LITERAL_CODES:
0.60 sre_compile.py(48):         elif op is IN:
0.60 sre_compile.py(59):         elif op is ANY:
0.60 sre_compile.py(64):         elif op in REPEATING_CODES:
0.60 sre_compile.py(65):             if flags & SRE_FLAG_TEMPLATE:
0.60 sre_compile.py(74):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
0.60 sre_compile.py(356):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.60 sre_parse.py(142):         if self.width:
0.60 sre_parse.py(143):             return self.width
0.60 sre_compile.py(357):     if lo == 0 and hi == MAXREPEAT:
0.60 sre_compile.py(359):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
0.60 sre_parse.py(131):         if isinstance(index, slice):
0.60 sre_parse.py(133):         return self.data[index]
0.60 sre_compile.py(75):                 if op is MAX_REPEAT:
0.60 sre_compile.py(76):                     emit(OPCODES[REPEAT_ONE])
0.60 sre_compile.py(79):                 skip = _len(code); emit(0)
0.60 sre_compile.py(80):                 emit(av[0])
0.60 sre_compile.py(81):                 emit(av[1])
0.60 sre_compile.py(82):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
0.60 sre_compile.py(34):     emit = code.append
0.60 sre_compile.py(35):     _len = len
0.60 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.60 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.60 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.60 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.60 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.60 sre_parse.py(131):         if isinstance(index, slice):
0.60 sre_parse.py(133):         return self.data[index]
0.60 sre_compile.py(41):         if op in LITERAL_CODES:
0.60 sre_compile.py(48):         elif op is IN:
0.60 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.60 sre_compile.py(54):                 emit(OPCODES[op])
0.60 sre_compile.py(55):                 fixup = _identityfunction
0.60 sre_compile.py(56):             skip = _len(code); emit(0)
0.60 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.60 sre_compile.py(180):     emit = code.append
0.60 sre_compile.py(181):     if fixup is None:
0.60 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.60 sre_compile.py(209):     out = []
0.60 sre_compile.py(210):     outappend = out.append
0.60 sre_compile.py(211):     charmap = [0]*256
0.60 sre_compile.py(212):     try:
0.60 sre_compile.py(213):         for op, av in charset:
0.60 sre_compile.py(214):             if op is NEGATE:
0.60 sre_compile.py(216):             elif op is LITERAL:
0.60 sre_compile.py(218):             elif op is RANGE:
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.60 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.60 sre_compile.py(25):     return x
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.60 sre_compile.py(220):                     charmap[i] = 1
0.60 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(213):         for op, av in charset:
0.61 sre_compile.py(214):             if op is NEGATE:
0.61 sre_compile.py(216):             elif op is LITERAL:
0.61 sre_compile.py(218):             elif op is RANGE:
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
0.61 sre_compile.py(25):     return x
 --- modulename: sre_compile, funcname: _identityfunction
0.61 sre_compile.py(25):     return x
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(220):                     charmap[i] = 1
0.61 sre_compile.py(219):                 for i in range(fixup(av[0]), fixup(av[1])+1):
0.61 sre_compile.py(213):         for op, av in charset:
0.61 sre_compile.py(214):             if op is NEGATE:
0.61 sre_compile.py(216):             elif op is LITERAL:
0.61 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.61 sre_compile.py(25):     return x
0.61 sre_compile.py(213):         for op, av in charset:
0.61 sre_compile.py(228):     i = p = n = 0
0.61 sre_compile.py(229):     runs = []
0.61 sre_compile.py(230):     runsappend = runs.append
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(234):                 p = i
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(237):             runsappend((p, n))
0.61 sre_compile.py(238):             n = 0
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(234):                 p = i
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(237):             runsappend((p, n))
0.61 sre_compile.py(238):             n = 0
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(233):             if n == 0:
0.61 sre_compile.py(234):                 p = i
0.61 sre_compile.py(235):             n = n + 1
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(237):             runsappend((p, n))
0.61 sre_compile.py(238):             n = 0
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.61 sre_compile.py(231):     for c in charmap:
0.61 sre_compile.py(232):         if c:
0.61 sre_compile.py(236):         elif n:
0.61 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(232):         if c:
0.62 sre_compile.py(236):         elif n:
0.62 sre_compile.py(239):         i = i + 1
0.62 sre_compile.py(231):     for c in charmap:
0.62 sre_compile.py(240):     if n:
0.62 sre_compile.py(242):     if len(runs) <= 2:
0.62 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.62 sre_compile.py(259):     data = []
0.62 sre_compile.py(260):     dataappend = data.append
0.62 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.62 sre_compile.py(264):         start = (1L, 0L)
0.62 sre_compile.py(265):     m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(268):             v = v + m
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(271):             dataappend(v)
0.62 sre_compile.py(272):             m, v = start
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.62 sre_compile.py(269):         m = m + m
0.62 sre_compile.py(270):         if m > MAXCODE:
0.62 sre_compile.py(266):     for c in bits:
0.62 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(271):             dataappend(v)
0.63 sre_compile.py(272):             m, v = start
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(267):         if c:
0.63 sre_compile.py(269):         m = m + m
0.63 sre_compile.py(270):         if m > MAXCODE:
0.63 sre_compile.py(271):             dataappend(v)
0.63 sre_compile.py(272):             m, v = start
0.63 sre_compile.py(266):     for c in bits:
0.63 sre_compile.py(273):     return data
0.63 sre_compile.py(254):         outappend((CHARSET, data))
0.63 sre_compile.py(255):         return out
0.63 sre_compile.py(184):         emit(OPCODES[op])
0.63 sre_compile.py(185):         if op is NEGATE:
0.63 sre_compile.py(187):         elif op is LITERAL:
0.63 sre_compile.py(189):         elif op is RANGE:
0.63 sre_compile.py(192):         elif op is CHARSET:
0.63 sre_compile.py(193):             code.extend(av)
0.63 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.63 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.63 sre_compile.py(58):             code[skip] = _len(code) - skip
0.63 sre_compile.py(40):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
0.63 sre_parse.py(131):         if isinstance(index, slice):
0.63 sre_parse.py(133):         return self.data[index]
0.63 sre_compile.py(83):                 emit(OPCODES[SUCCESS])
0.63 sre_compile.py(84):                 code[skip] = _len(code) - skip
0.63 sre_compile.py(40):     for op, av in pattern:
0.63 sre_compile.py(41):         if op in LITERAL_CODES:
0.63 sre_compile.py(48):         elif op is IN:
0.63 sre_compile.py(59):         elif op is ANY:
0.63 sre_compile.py(64):         elif op in REPEATING_CODES:
0.63 sre_compile.py(96):         elif op is SUBPATTERN:
0.63 sre_compile.py(105):         elif op in SUCCESS_CODES:
0.63 sre_compile.py(107):         elif op in ASSERT_CODES:
0.63 sre_compile.py(120):         elif op is CALL:
0.63 sre_compile.py(126):         elif op is AT:
0.63 sre_compile.py(127):             emit(OPCODES[op])
0.63 sre_compile.py(128):             if flags & SRE_FLAG_MULTILINE:
0.63 sre_compile.py(130):             if flags & SRE_FLAG_LOCALE:
0.63 sre_compile.py(132):             elif flags & SRE_FLAG_UNICODE:
0.63 sre_compile.py(134):             emit(ATCODES[av])
0.63 sre_compile.py(40):     for op, av in pattern:
0.63 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.63 sre_compile.py(493):     return code
0.63 sre_compile.py(509):     if p.pattern.groups > 100:
0.63 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.63 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.63 sre_compile.py(517):     for k, i in groupindex.items():
0.63 sre_compile.py(520):     return _sre.compile(
0.63 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.63 sre_compile.py(522):         p.pattern.groups-1,
0.63 sre_compile.py(523):         groupindex, indexgroup
0.63 re.py(243):     if len(_cache) >= _MAXCACHE:
0.63 re.py(245):     _cache[cachekey] = p
0.63 re.py(246):     return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.63 re.py(228):     cachekey = (type(key[0]),) + key
0.63 re.py(229):     p = _cache.get(cachekey)
0.63 re.py(230):     if p is not None:
0.63 re.py(231):         return p
0.63 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.63 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
 --- modulename: re, funcname: match
0.64 re.py(137):     return _compile(pattern, flags).match(string)
 --- modulename: re, funcname: _compile
0.64 re.py(228):     cachekey = (type(key[0]),) + key
0.64 re.py(229):     p = _cache.get(cachekey)
0.64 re.py(230):     if p is not None:
0.64 re.py(231):         return p
0.64 pickle.py(165): __all__.extend([x for x in dir() if re.match("[A-Z][A-Z0-9_]+$",x)])
0.64 pickle.py(166): del x
0.64 pickle.py(171): class Pickler:
 --- modulename: pickle, funcname: Pickler
0.64 pickle.py(171): class Pickler:
0.64 pickle.py(173):     def __init__(self, file, protocol=None):
0.64 pickle.py(209):     def clear_memo(self):
0.64 pickle.py(220):     def dump(self, obj):
0.64 pickle.py(227):     def memoize(self, obj):
0.64 pickle.py(250):     def put(self, i, pack=struct.pack):
0.64 pickle.py(260):     def get(self, i, pack=struct.pack):
0.64 pickle.py(269):     def save(self, obj):
0.64 pickle.py(333):     def persistent_id(self, obj):
0.64 pickle.py(337):     def save_pers(self, pid):
0.64 pickle.py(345):     def save_reduce(self, func, args, state=None,
0.64 pickle.py(346):                     listitems=None, dictitems=None, obj=None):
0.64 pickle.py(424):     dispatch = {}
0.64 pickle.py(426):     def save_none(self, obj):
0.64 pickle.py(428):     dispatch[NoneType] = save_none
0.64 pickle.py(430):     def save_bool(self, obj):
0.64 pickle.py(435):     dispatch[bool] = save_bool
0.64 pickle.py(437):     def save_int(self, obj, pack=struct.pack):
0.64 pickle.py(459):     dispatch[IntType] = save_int
0.64 pickle.py(461):     def save_long(self, obj, pack=struct.pack):
0.64 pickle.py(471):     dispatch[LongType] = save_long
0.64 pickle.py(473):     def save_float(self, obj, pack=struct.pack):
0.64 pickle.py(478):     dispatch[FloatType] = save_float
0.64 pickle.py(480):     def save_string(self, obj, pack=struct.pack):
0.64 pickle.py(490):     dispatch[StringType] = save_string
0.64 pickle.py(492):     def save_unicode(self, obj, pack=struct.pack):
0.64 pickle.py(502):     dispatch[UnicodeType] = save_unicode
0.64 pickle.py(504):     if StringType is UnicodeType:
0.64 pickle.py(532):     def save_tuple(self, obj):
0.64 pickle.py(583):     dispatch[TupleType] = save_tuple
0.64 pickle.py(588):     def save_empty_tuple(self, obj):
0.64 pickle.py(591):     def save_list(self, obj):
0.64 pickle.py(602):     dispatch[ListType] = save_list
0.64 pickle.py(606):     _BATCHSIZE = 1000
0.64 pickle.py(608):     def _batch_appends(self, items):
0.64 pickle.py(640):     def save_dict(self, obj):
0.64 pickle.py(651):     dispatch[DictionaryType] = save_dict
0.64 pickle.py(652):     if not PyStringMap is None:
0.64 pickle.py(655):     def _batch_setitems(self, items):
0.64 pickle.py(690):     def save_inst(self, obj):
0.64 pickle.py(728):     dispatch[InstanceType] = save_inst
0.64 pickle.py(730):     def save_global(self, obj, name=None, pack=struct.pack):
0.64 pickle.py(770):     dispatch[ClassType] = save_global
0.64 pickle.py(771):     dispatch[FunctionType] = save_global
0.64 pickle.py(772):     dispatch[BuiltinFunctionType] = save_global
0.64 pickle.py(773):     dispatch[TypeType] = save_global
0.64 pickle.py(777): def _keep_alive(x, memo):
0.64 pickle.py(797): classmap = {} # called classmap for backwards compatibility
0.64 pickle.py(799): def whichmodule(func, funcname):
0.64 pickle.py(827): class Unpickler:
 --- modulename: pickle, funcname: Unpickler
0.64 pickle.py(827): class Unpickler:
0.64 pickle.py(829):     def __init__(self, file):
0.64 pickle.py(845):     def load(self):
0.64 pickle.py(870):     def marker(self):
0.64 pickle.py(877):     dispatch = {}
0.64 pickle.py(879):     def load_eof(self):
0.64 pickle.py(881):     dispatch[''] = load_eof
0.64 pickle.py(883):     def load_proto(self):
0.64 pickle.py(887):     dispatch[PROTO] = load_proto
0.64 pickle.py(889):     def load_persid(self):
0.64 pickle.py(892):     dispatch[PERSID] = load_persid
0.64 pickle.py(894):     def load_binpersid(self):
0.64 pickle.py(897):     dispatch[BINPERSID] = load_binpersid
0.64 pickle.py(899):     def load_none(self):
0.64 pickle.py(901):     dispatch[NONE] = load_none
0.64 pickle.py(903):     def load_false(self):
0.64 pickle.py(905):     dispatch[NEWFALSE] = load_false
0.64 pickle.py(907):     def load_true(self):
0.64 pickle.py(909):     dispatch[NEWTRUE] = load_true
0.64 pickle.py(911):     def load_int(self):
0.64 pickle.py(923):     dispatch[INT] = load_int
0.64 pickle.py(925):     def load_binint(self):
0.64 pickle.py(927):     dispatch[BININT] = load_binint
0.64 pickle.py(929):     def load_binint1(self):
0.64 pickle.py(931):     dispatch[BININT1] = load_binint1
0.64 pickle.py(933):     def load_binint2(self):
0.64 pickle.py(935):     dispatch[BININT2] = load_binint2
0.64 pickle.py(937):     def load_long(self):
0.64 pickle.py(939):     dispatch[LONG] = load_long
0.64 pickle.py(941):     def load_long1(self):
0.64 pickle.py(945):     dispatch[LONG1] = load_long1
0.64 pickle.py(947):     def load_long4(self):
0.64 pickle.py(951):     dispatch[LONG4] = load_long4
0.64 pickle.py(953):     def load_float(self):
0.64 pickle.py(955):     dispatch[FLOAT] = load_float
0.64 pickle.py(957):     def load_binfloat(self, unpack=struct.unpack):
0.64 pickle.py(959):     dispatch[BINFLOAT] = load_binfloat
0.64 pickle.py(961):     def load_string(self):
0.64 pickle.py(972):     dispatch[STRING] = load_string
0.64 pickle.py(974):     def load_binstring(self):
0.64 pickle.py(977):     dispatch[BINSTRING] = load_binstring
0.64 pickle.py(979):     def load_unicode(self):
0.64 pickle.py(981):     dispatch[UNICODE] = load_unicode
0.64 pickle.py(983):     def load_binunicode(self):
0.64 pickle.py(986):     dispatch[BINUNICODE] = load_binunicode
0.64 pickle.py(988):     def load_short_binstring(self):
0.64 pickle.py(991):     dispatch[SHORT_BINSTRING] = load_short_binstring
0.64 pickle.py(993):     def load_tuple(self):
0.64 pickle.py(996):     dispatch[TUPLE] = load_tuple
0.64 pickle.py(998):     def load_empty_tuple(self):
0.64 pickle.py(1000):     dispatch[EMPTY_TUPLE] = load_empty_tuple
0.64 pickle.py(1002):     def load_tuple1(self):
0.64 pickle.py(1004):     dispatch[TUPLE1] = load_tuple1
0.64 pickle.py(1006):     def load_tuple2(self):
0.64 pickle.py(1008):     dispatch[TUPLE2] = load_tuple2
0.64 pickle.py(1010):     def load_tuple3(self):
0.64 pickle.py(1012):     dispatch[TUPLE3] = load_tuple3
0.64 pickle.py(1014):     def load_empty_list(self):
0.64 pickle.py(1016):     dispatch[EMPTY_LIST] = load_empty_list
0.64 pickle.py(1018):     def load_empty_dictionary(self):
0.64 pickle.py(1020):     dispatch[EMPTY_DICT] = load_empty_dictionary
0.64 pickle.py(1022):     def load_list(self):
0.64 pickle.py(1025):     dispatch[LIST] = load_list
0.64 pickle.py(1027):     def load_dict(self):
0.64 pickle.py(1036):     dispatch[DICT] = load_dict
0.64 pickle.py(1043):     def _instantiate(self, klass, k):
0.64 pickle.py(1066):     def load_inst(self):
0.64 pickle.py(1071):     dispatch[INST] = load_inst
0.64 pickle.py(1073):     def load_obj(self):
0.64 pickle.py(1078):     dispatch[OBJ] = load_obj
0.64 pickle.py(1080):     def load_newobj(self):
0.64 pickle.py(1085):     dispatch[NEWOBJ] = load_newobj
0.64 pickle.py(1087):     def load_global(self):
0.64 pickle.py(1092):     dispatch[GLOBAL] = load_global
0.64 pickle.py(1094):     def load_ext1(self):
0.64 pickle.py(1097):     dispatch[EXT1] = load_ext1
0.64 pickle.py(1099):     def load_ext2(self):
0.64 pickle.py(1102):     dispatch[EXT2] = load_ext2
0.64 pickle.py(1104):     def load_ext4(self):
0.64 pickle.py(1107):     dispatch[EXT4] = load_ext4
0.64 pickle.py(1109):     def get_extension(self, code):
0.64 pickle.py(1122):     def find_class(self, module, name):
0.64 pickle.py(1129):     def load_reduce(self):
0.64 pickle.py(1135):     dispatch[REDUCE] = load_reduce
0.64 pickle.py(1137):     def load_pop(self):
0.64 pickle.py(1139):     dispatch[POP] = load_pop
0.64 pickle.py(1141):     def load_pop_mark(self):
0.64 pickle.py(1144):     dispatch[POP_MARK] = load_pop_mark
0.64 pickle.py(1146):     def load_dup(self):
0.64 pickle.py(1148):     dispatch[DUP] = load_dup
0.64 pickle.py(1150):     def load_get(self):
0.64 pickle.py(1152):     dispatch[GET] = load_get
0.64 pickle.py(1154):     def load_binget(self):
0.64 pickle.py(1157):     dispatch[BINGET] = load_binget
0.64 pickle.py(1159):     def load_long_binget(self):
0.64 pickle.py(1162):     dispatch[LONG_BINGET] = load_long_binget
0.64 pickle.py(1164):     def load_put(self):
0.64 pickle.py(1166):     dispatch[PUT] = load_put
0.64 pickle.py(1168):     def load_binput(self):
0.64 pickle.py(1171):     dispatch[BINPUT] = load_binput
0.64 pickle.py(1173):     def load_long_binput(self):
0.64 pickle.py(1176):     dispatch[LONG_BINPUT] = load_long_binput
0.64 pickle.py(1178):     def load_append(self):
0.64 pickle.py(1183):     dispatch[APPEND] = load_append
0.64 pickle.py(1185):     def load_appends(self):
0.64 pickle.py(1191):     dispatch[APPENDS] = load_appends
0.64 pickle.py(1193):     def load_setitem(self):
0.64 pickle.py(1199):     dispatch[SETITEM] = load_setitem
0.64 pickle.py(1201):     def load_setitems(self):
0.64 pickle.py(1209):     dispatch[SETITEMS] = load_setitems
0.64 pickle.py(1211):     def load_build(self):
0.64 pickle.py(1248):     dispatch[BUILD] = load_build
0.64 pickle.py(1250):     def load_mark(self):
0.64 pickle.py(1252):     dispatch[MARK] = load_mark
0.64 pickle.py(1254):     def load_stop(self):
0.64 pickle.py(1257):     dispatch[STOP] = load_stop
0.64 pickle.py(1261): class _EmptyClass:
 --- modulename: pickle, funcname: _EmptyClass
0.64 pickle.py(1261): class _EmptyClass:
0.64 pickle.py(1262):     pass
0.64 pickle.py(1266): import binascii as _binascii
0.64 pickle.py(1268): def encode_long(x):
0.64 pickle.py(1334): def decode_long(data):
0.64 pickle.py(1364): try:
0.64 pickle.py(1365):     from cStringIO import StringIO
0.64 pickle.py(1369): def dump(obj, file, protocol=None):
0.64 pickle.py(1372): def dumps(obj, protocol=None):
0.64 pickle.py(1377): def load(file):
0.64 pickle.py(1380): def loads(str):
0.64 pickle.py(1386): def _test():
0.64 pickle.py(1390): if __name__ == "__main__":
0.64 subprocess.py(437):     _PIPE_BUF = getattr(select, 'PIPE_BUF', 512)
0.64 subprocess.py(440): __all__ = ["Popen", "PIPE", "STDOUT", "call", "check_call",
0.64 subprocess.py(441):            "check_output", "CalledProcessError"]
0.64 subprocess.py(443): if mswindows:
0.64 subprocess.py(453): try:
0.64 subprocess.py(454):     MAXFD = os.sysconf("SC_OPEN_MAX")
0.64 subprocess.py(458): _active = []
0.64 subprocess.py(460): def _cleanup():
0.64 subprocess.py(471): PIPE = -1
0.64 subprocess.py(472): STDOUT = -2
0.64 subprocess.py(475): def _eintr_retry_call(func, *args):
0.64 subprocess.py(485): def call(*popenargs, **kwargs):
0.64 subprocess.py(496): def check_call(*popenargs, **kwargs):
0.64 subprocess.py(515): def check_output(*popenargs, **kwargs):
0.64 subprocess.py(548): def list2cmdline(seq):
0.64 subprocess.py(618): class Popen(object):
 --- modulename: subprocess, funcname: Popen
0.64 subprocess.py(618): class Popen(object):
0.64 subprocess.py(619):     def __init__(self, args, bufsize=0, executable=None,
0.64 subprocess.py(620):                  stdin=None, stdout=None, stderr=None,
0.64 subprocess.py(621):                  preexec_fn=None, close_fds=False, shell=False,
0.64 subprocess.py(622):                  cwd=None, env=None, universal_newlines=False,
0.64 subprocess.py(623):                  startupinfo=None, creationflags=0):
0.64 subprocess.py(703):     def _translate_newlines(self, data):
0.64 subprocess.py(709):     def __del__(self, _maxint=sys.maxint, _active=_active):
0.64 subprocess.py(723):     def communicate(self, input=None):
0.64 subprocess.py(757):     def poll(self):
0.64 subprocess.py(761):     if mswindows:
0.64 subprocess.py(1027):         def _get_handles(self, stdin, stdout, stderr):
0.64 subprocess.py(1072):         def _set_cloexec_flag(self, fd, cloexec=True):
0.64 subprocess.py(1085):         def pipe_cloexec(self):
0.64 subprocess.py(1097):         def _close_fds(self, but):
0.64 subprocess.py(1111):         def _execute_child(self, args, executable, preexec_fn, close_fds,
0.64 subprocess.py(1252):         def _handle_exitstatus(self, sts, _WIFSIGNALED=os.WIFSIGNALED,
0.64 subprocess.py(1253):                 _WTERMSIG=os.WTERMSIG, _WIFEXITED=os.WIFEXITED,
0.64 subprocess.py(1254):                 _WEXITSTATUS=os.WEXITSTATUS):
0.64 subprocess.py(1266):         def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,
0.64 subprocess.py(1267):                 _WNOHANG=os.WNOHANG, _os_error=os.error):
0.64 subprocess.py(1286):         def wait(self):
0.64 subprocess.py(1303):         def _communicate(self, input):
0.64 subprocess.py(1336):         def _communicate_with_poll(self, input):
0.64 subprocess.py(1397):         def _communicate_with_select(self, input):
0.64 subprocess.py(1454):         def send_signal(self, sig):
0.64 subprocess.py(1459):         def terminate(self):
0.64 subprocess.py(1464):         def kill(self):
0.64 subprocess.py(1470): def _demo_posix():
0.64 subprocess.py(1511): def _demo_windows():
0.64 subprocess.py(1528): if __name__ == "__main__":
0.64 version.py(10): from os.path import abspath, dirname
0.64 version.py(13): VERSION = (1, 3, 2, 'final', 0)
0.64 version.py(16): def git_sha():
0.64 version.py(27): def get_version(form='short'):
0.64 version.py(98): __version__ = get_version('short')
 --- modulename: version, funcname: get_version
0.64 version.py(44):     versions = {}
0.64 version.py(45):     branch = "%s.%s" % (VERSION[0], VERSION[1])
0.64 version.py(46):     tertiary = VERSION[2]
0.64 version.py(47):     type_ = VERSION[3]
0.64 version.py(48):     final = (type_ == "final")
0.64 version.py(49):     type_num = VERSION[4]
0.64 version.py(50):     firsts = "".join([x[0] for x in type_.split()])
0.64 version.py(50):     firsts = "".join([x[0] for x in type_.split()])
0.64 version.py(51):     sha = git_sha()
 --- modulename: version, funcname: git_sha
0.64 version.py(17):     loc = abspath(dirname(__file__))
 --- modulename: posixpath, funcname: dirname
0.64 posixpath.py(120):     i = p.rfind('/') + 1
0.64 posixpath.py(121):     head = p[:i]
0.64 posixpath.py(122):     if head and head != '/'*len(head):
0.64 posixpath.py(123):         head = head.rstrip('/')
0.64 posixpath.py(124):     return head
 --- modulename: posixpath, funcname: abspath
0.64 posixpath.py(343):     if not isabs(path):
 --- modulename: posixpath, funcname: isabs
0.64 posixpath.py(53):     return s.startswith('/')
0.64 posixpath.py(349):     return normpath(path)
 --- modulename: posixpath, funcname: normpath
0.64 posixpath.py(315):     slash, dot = (u'/', u'.') if isinstance(path, unicode) else ('/', '.')
0.64 posixpath.py(316):     if path == '':
0.64 posixpath.py(318):     initial_slashes = path.startswith('/')
0.64 posixpath.py(321):     if (initial_slashes and
0.64 posixpath.py(322):         path.startswith('//') and not path.startswith('///')):
0.64 posixpath.py(324):     comps = path.split('/')
0.64 posixpath.py(325):     new_comps = []
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(328):             continue
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.64 posixpath.py(331):             new_comps.append(comp)
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.64 posixpath.py(331):             new_comps.append(comp)
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.64 posixpath.py(331):             new_comps.append(comp)
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.64 posixpath.py(331):             new_comps.append(comp)
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(327):         if comp in ('', '.'):
0.64 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.64 posixpath.py(331):             new_comps.append(comp)
0.64 posixpath.py(326):     for comp in comps:
0.64 posixpath.py(334):     comps = new_comps
0.64 posixpath.py(335):     path = slash.join(comps)
0.64 posixpath.py(336):     if initial_slashes:
0.64 posixpath.py(337):         path = slash*initial_slashes + path
0.64 posixpath.py(338):     return path or dot
0.64 version.py(18):     p = Popen(
0.64 version.py(19):         "cd \"%s\" && git log -1 --format=format:%%h" % loc,
0.64 version.py(20):         shell=True,
0.64 version.py(21):         stdout=PIPE,
0.64 version.py(22):         stderr=PIPE
 --- modulename: subprocess, funcname: __init__
0.64 subprocess.py(625):         _cleanup()
 --- modulename: subprocess, funcname: _cleanup
0.64 subprocess.py(461):     for inst in _active[:]:
0.64 subprocess.py(627):         self._child_created = False
0.64 subprocess.py(628):         if not isinstance(bufsize, (int, long)):
0.64 subprocess.py(631):         if mswindows:
0.64 subprocess.py(641):             if startupinfo is not None:
0.64 subprocess.py(644):             if creationflags != 0:
0.64 subprocess.py(648):         self.stdin = None
0.64 subprocess.py(649):         self.stdout = None
0.64 subprocess.py(650):         self.stderr = None
0.64 subprocess.py(651):         self.pid = None
0.64 subprocess.py(652):         self.returncode = None
0.64 subprocess.py(653):         self.universal_newlines = universal_newlines
0.64 subprocess.py(672):          errread, errwrite) = self._get_handles(stdin, stdout, stderr)
 --- modulename: subprocess, funcname: _get_handles
0.64 subprocess.py(1031):             p2cread, p2cwrite = None, None
0.64 subprocess.py(1032):             c2pread, c2pwrite = None, None
0.64 subprocess.py(1033):             errread, errwrite = None, None
0.64 subprocess.py(1035):             if stdin is None:
0.64 subprocess.py(1036):                 pass
0.64 subprocess.py(1045):             if stdout is None:
0.64 subprocess.py(1047):             elif stdout == PIPE:
0.64 subprocess.py(1048):                 c2pread, c2pwrite = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.64 subprocess.py(1091):             r, w = os.pipe()
0.64 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1094):             return r, w
0.64 subprocess.py(1055):             if stderr is None:
0.64 subprocess.py(1057):             elif stderr == PIPE:
0.64 subprocess.py(1058):                 errread, errwrite = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.64 subprocess.py(1091):             r, w = os.pipe()
0.64 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1094):             return r, w
0.64 subprocess.py(1067):             return (p2cread, p2cwrite,
0.64 subprocess.py(1068):                     c2pread, c2pwrite,
0.64 subprocess.py(1069):                     errread, errwrite)
0.64 subprocess.py(674):         self._execute_child(args, executable, preexec_fn, close_fds,
0.64 subprocess.py(675):                             cwd, env, universal_newlines,
0.64 subprocess.py(676):                             startupinfo, creationflags, shell,
0.64 subprocess.py(677):                             p2cread, p2cwrite,
0.64 subprocess.py(678):                             c2pread, c2pwrite,
0.64 subprocess.py(679):                             errread, errwrite)
 --- modulename: subprocess, funcname: _execute_child
0.64 subprocess.py(1119):             if isinstance(args, types.StringTypes):
0.64 subprocess.py(1120):                 args = [args]
0.64 subprocess.py(1124):             if shell:
0.64 subprocess.py(1125):                 args = ["/bin/sh", "-c"] + args
0.64 subprocess.py(1126):                 if executable:
0.64 subprocess.py(1129):             if executable is None:
0.64 subprocess.py(1130):                 executable = args[0]
0.64 subprocess.py(1135):             errpipe_read, errpipe_write = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.64 subprocess.py(1091):             r, w = os.pipe()
0.64 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.64 subprocess.py(1073):             try:
0.64 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.64 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.64 subprocess.py(1079):             if cloexec:
0.64 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.64 subprocess.py(1094):             return r, w
0.64 subprocess.py(1136):             try:
0.64 subprocess.py(1137):                 try:
0.64 subprocess.py(1138):                     gc_was_enabled = gc.isenabled()
0.64 subprocess.py(1141):                     gc.disable()
0.64 subprocess.py(1142):                     try:
0.64 subprocess.py(1143):                         self.pid = os.fork()
0.64 subprocess.py(1148):                     self._child_created = True
0.64 subprocess.py(1149):                     if self.pid == 0:
0.64 subprocess.py(1219):                     if gc_was_enabled:
0.64 subprocess.py(1220):                         gc.enable()
0.64 subprocess.py(1223):                     os.close(errpipe_write)
0.64 subprocess.py(1225):                 if p2cread is not None and p2cwrite is not None:
0.64 subprocess.py(1227):                 if c2pwrite is not None and c2pread is not None:
0.64 subprocess.py(1228):                     os.close(c2pwrite)
0.64 subprocess.py(1229):                 if errwrite is not None and errread is not None:
0.64 subprocess.py(1230):                     os.close(errwrite)
0.64 subprocess.py(1234):                 data = _eintr_retry_call(os.read, errpipe_read, 1048576)
 --- modulename: subprocess, funcname: _eintr_retry_call
0.64 subprocess.py(476):     while True:
0.64 subprocess.py(477):         try:
0.64 subprocess.py(478):             return func(*args)
0.83 subprocess.py(1237):                 os.close(errpipe_read)
0.83 subprocess.py(1239):             if data != "":
0.83 subprocess.py(681):         if mswindows:
0.83 subprocess.py(689):         if p2cwrite is not None:
0.83 subprocess.py(691):         if c2pread is not None:
0.83 subprocess.py(692):             if universal_newlines:
0.83 subprocess.py(695):                 self.stdout = os.fdopen(c2pread, 'rb', bufsize)
0.83 subprocess.py(696):         if errread is not None:
0.83 subprocess.py(697):             if universal_newlines:
0.83 subprocess.py(700):                 self.stderr = os.fdopen(errread, 'rb', bufsize)
0.83 version.py(24):     return p.communicate()[0]
 --- modulename: subprocess, funcname: communicate
0.83 subprocess.py(734):         if [self.stdin, self.stdout, self.stderr].count(None) >= 2:
0.83 subprocess.py(754):         return self._communicate(input)
 --- modulename: subprocess, funcname: _communicate
0.83 subprocess.py(1304):             if self.stdin:
0.83 subprocess.py(1311):             if _has_poll:
0.83 subprocess.py(1312):                 stdout, stderr = self._communicate_with_poll(input)
 --- modulename: subprocess, funcname: _communicate_with_poll
0.83 subprocess.py(1337):             stdout = None # Return
0.83 subprocess.py(1338):             stderr = None # Return
0.83 subprocess.py(1339):             fd2file = {}
0.83 subprocess.py(1340):             fd2output = {}
0.83 subprocess.py(1342):             poller = select.poll()
0.83 subprocess.py(1343):             def register_and_append(file_obj, eventmask):
0.83 subprocess.py(1347):             def close_unregister_and_remove(fd):
0.83 subprocess.py(1352):             if self.stdin and input:
0.83 subprocess.py(1355):             select_POLLIN_POLLPRI = select.POLLIN | select.POLLPRI
0.83 subprocess.py(1356):             if self.stdout:
0.83 subprocess.py(1357):                 register_and_append(self.stdout, select_POLLIN_POLLPRI)
 --- modulename: subprocess, funcname: register_and_append
0.83 subprocess.py(1344):                 poller.register(file_obj.fileno(), eventmask)
0.83 subprocess.py(1345):                 fd2file[file_obj.fileno()] = file_obj
0.83 subprocess.py(1358):                 fd2output[self.stdout.fileno()] = stdout = []
0.83 subprocess.py(1359):             if self.stderr:
0.83 subprocess.py(1360):                 register_and_append(self.stderr, select_POLLIN_POLLPRI)
 --- modulename: subprocess, funcname: register_and_append
0.83 subprocess.py(1344):                 poller.register(file_obj.fileno(), eventmask)
0.83 subprocess.py(1345):                 fd2file[file_obj.fileno()] = file_obj
0.83 subprocess.py(1361):                 fd2output[self.stderr.fileno()] = stderr = []
0.83 subprocess.py(1363):             input_offset = 0
0.83 subprocess.py(1364):             while fd2file:
0.83 subprocess.py(1365):                 try:
0.83 subprocess.py(1366):                     ready = poller.poll()
0.83 subprocess.py(1372):                 for fd, mode in ready:
0.83 subprocess.py(1373):                     if mode & select.POLLOUT:
0.83 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.83 subprocess.py(1386):                         data = os.read(fd, 4096)
0.83 subprocess.py(1387):                         if not data:
0.83 subprocess.py(1389):                         fd2output[fd].append(data)
0.83 subprocess.py(1372):                 for fd, mode in ready:
0.83 subprocess.py(1364):             while fd2file:
0.83 subprocess.py(1365):                 try:
0.83 subprocess.py(1366):                     ready = poller.poll()
0.83 subprocess.py(1372):                 for fd, mode in ready:
0.83 subprocess.py(1373):                     if mode & select.POLLOUT:
0.83 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.83 subprocess.py(1392):                         close_unregister_and_remove(fd)
 --- modulename: subprocess, funcname: close_unregister_and_remove
0.83 subprocess.py(1348):                 poller.unregister(fd)
0.83 subprocess.py(1349):                 fd2file[fd].close()
0.83 subprocess.py(1350):                 fd2file.pop(fd)
0.83 subprocess.py(1372):                 for fd, mode in ready:
0.83 subprocess.py(1373):                     if mode & select.POLLOUT:
0.83 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.83 subprocess.py(1392):                         close_unregister_and_remove(fd)
 --- modulename: subprocess, funcname: close_unregister_and_remove
0.83 subprocess.py(1348):                 poller.unregister(fd)
0.83 subprocess.py(1349):                 fd2file[fd].close()
0.83 subprocess.py(1350):                 fd2file.pop(fd)
0.83 subprocess.py(1372):                 for fd, mode in ready:
0.83 subprocess.py(1364):             while fd2file:
0.83 subprocess.py(1394):             return (stdout, stderr)
0.83 subprocess.py(1317):             if stdout is not None:
0.83 subprocess.py(1318):                 stdout = ''.join(stdout)
0.83 subprocess.py(1319):             if stderr is not None:
0.83 subprocess.py(1320):                 stderr = ''.join(stderr)
0.83 subprocess.py(1326):             if self.universal_newlines and hasattr(file, 'newlines'):
0.83 subprocess.py(1332):             self.wait()
 --- modulename: subprocess, funcname: wait
0.83 subprocess.py(1289):             if self.returncode is None:
0.83 subprocess.py(1290):                 try:
0.83 subprocess.py(1291):                     pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
 --- modulename: subprocess, funcname: _eintr_retry_call
0.83 subprocess.py(476):     while True:
0.83 subprocess.py(477):         try:
0.83 subprocess.py(478):             return func(*args)
0.83 subprocess.py(1299):                 self._handle_exitstatus(sts)
 --- modulename: subprocess, funcname: _handle_exitstatus
0.83 subprocess.py(1257):             if _WIFSIGNALED(sts):
0.83 subprocess.py(1259):             elif _WIFEXITED(sts):
0.83 subprocess.py(1260):                 self.returncode = _WEXITSTATUS(sts)
0.83 subprocess.py(1300):             return self.returncode
0.83 subprocess.py(1333):             return (stdout, stderr)
 --- modulename: subprocess, funcname: __del__
0.83 subprocess.py(713):         if not getattr(self, '_child_created', False):
0.83 subprocess.py(717):         self._internal_poll(_deadstate=_maxint)
 --- modulename: subprocess, funcname: _internal_poll
0.83 subprocess.py(1275):             if self.returncode is None:
0.83 subprocess.py(1283):             return self.returncode
0.83 subprocess.py(718):         if self.returncode is None and _active is not None:
0.83 version.py(52):     sha1 = (" (%s)" % sha) if sha else ""
0.83 version.py(55):     versions['branch'] = branch
0.83 version.py(58):     v = branch
0.83 version.py(59):     if (tertiary or final):
0.83 version.py(60):         v += "." + str(tertiary)
0.83 version.py(61):     if not final:
0.83 version.py(67):     versions['short'] = v
0.83 version.py(70):     v = branch
0.83 version.py(71):     if tertiary:
0.83 version.py(72):         v += "." + str(tertiary)
0.83 version.py(73):     if not final:
0.83 version.py(78):     versions['normal'] = v
0.83 version.py(81):     v = branch
0.83 version.py(82):     if tertiary:
0.83 version.py(83):         v += "." + str(tertiary)
0.83 version.py(84):     if not final:
0.83 version.py(90):         v += " final"
0.83 version.py(91):     versions['verbose'] = v
0.83 version.py(93):     try:
0.83 version.py(94):         return versions[form]
0.83 state.py(21): win32 = (sys.platform == 'win32')
0.83 state.py(28): class _AttributeDict(dict):
 --- modulename: state, funcname: _AttributeDict
0.83 state.py(28): class _AttributeDict(dict):
0.83 state.py(49):     """
0.83 state.py(50):     def __getattr__(self, key):
0.83 state.py(57):     def __setattr__(self, key, value):
0.83 state.py(60):     def first(self, *names):
0.83 state.py(69): def _get_system_username():
0.83 state.py(83): def _rc_path():
0.83 state.py(115):     make_option('-r', '--reject-unknown-hosts',
0.83 state.py(116):         action='store_true',
0.83 state.py(117):         default=False,
0.83 state.py(118):         help="reject unknown hosts"
 --- modulename: optparse, funcname: __init__
0.83 optparse.py(563):         self._short_opts = []
0.83 optparse.py(564):         self._long_opts = []
0.83 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.83 optparse.py(583):         opts = filter(None, opts)
0.83 optparse.py(584):         if not opts:
0.83 optparse.py(586):         return opts
0.83 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.83 optparse.py(600):                 self._short_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.83 optparse.py(607):                 self._long_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(619):         if attrs:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.83 optparse.py(630):         if self.action is None:
0.83 optparse.py(632):         elif self.action not in self.ACTIONS:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.83 optparse.py(636):         if self.type is None:
0.83 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.83 optparse.py(666):         if self.type == "choice":
0.83 optparse.py(674):         elif self.choices is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.83 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.83 optparse.py(683):         if self.dest is None and takes_value:
0.83 optparse.py(687):             if self._long_opts:
0.83 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.83 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.83 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.83 optparse.py(703):         elif self.nargs is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.83 optparse.py(709):         if self.action == "callback":
0.83 optparse.py(724):             if self.callback is not None:
0.83 optparse.py(728):             if self.callback_args is not None:
0.83 optparse.py(731):             if self.callback_kwargs is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 state.py(121):     make_option('-D', '--disable-known-hosts',
0.83 state.py(122):         action='store_true',
0.83 state.py(123):         default=False,
0.83 state.py(124):         help="do not load user known_hosts file"
 --- modulename: optparse, funcname: __init__
0.83 optparse.py(563):         self._short_opts = []
0.83 optparse.py(564):         self._long_opts = []
0.83 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.83 optparse.py(583):         opts = filter(None, opts)
0.83 optparse.py(584):         if not opts:
0.83 optparse.py(586):         return opts
0.83 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.83 optparse.py(600):                 self._short_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.83 optparse.py(607):                 self._long_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(619):         if attrs:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.83 optparse.py(630):         if self.action is None:
0.83 optparse.py(632):         elif self.action not in self.ACTIONS:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.83 optparse.py(636):         if self.type is None:
0.83 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.83 optparse.py(666):         if self.type == "choice":
0.83 optparse.py(674):         elif self.choices is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.83 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.83 optparse.py(683):         if self.dest is None and takes_value:
0.83 optparse.py(687):             if self._long_opts:
0.83 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.83 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.83 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.83 optparse.py(703):         elif self.nargs is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.83 optparse.py(709):         if self.action == "callback":
0.83 optparse.py(724):             if self.callback is not None:
0.83 optparse.py(728):             if self.callback_args is not None:
0.83 optparse.py(731):             if self.callback_kwargs is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 state.py(127):     make_option('-u', '--user',
0.83 state.py(128):         default=_get_system_username(),
 --- modulename: state, funcname: _get_system_username
0.83 state.py(73):     if not win32:
0.83 state.py(74):         import pwd
0.83 state.py(75):         return pwd.getpwuid(os.getuid())[0]
0.83 state.py(129):         help="username to use when connecting to remote hosts"
 --- modulename: optparse, funcname: __init__
0.83 optparse.py(563):         self._short_opts = []
0.83 optparse.py(564):         self._long_opts = []
0.83 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.83 optparse.py(583):         opts = filter(None, opts)
0.83 optparse.py(584):         if not opts:
0.83 optparse.py(586):         return opts
0.83 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.83 optparse.py(600):                 self._short_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.83 optparse.py(607):                 self._long_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.83 optparse.py(613):                 del attrs[attr]
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(611):             if attr in attrs:
0.83 optparse.py(615):                 if attr == 'default':
0.83 optparse.py(618):                     setattr(self, attr, None)
0.83 optparse.py(610):         for attr in self.ATTRS:
0.83 optparse.py(619):         if attrs:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.83 optparse.py(630):         if self.action is None:
0.83 optparse.py(631):             self.action = "store"
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.83 optparse.py(636):         if self.type is None:
0.83 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.83 optparse.py(638):                 if self.choices is not None:
0.83 optparse.py(643):                     self.type = "string"
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.83 optparse.py(666):         if self.type == "choice":
0.83 optparse.py(674):         elif self.choices is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.83 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.83 optparse.py(683):         if self.dest is None and takes_value:
0.83 optparse.py(687):             if self._long_opts:
0.83 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.83 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.83 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.83 optparse.py(701):             if self.nargs is None:
0.83 optparse.py(702):                 self.nargs = 1
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.83 optparse.py(709):         if self.action == "callback":
0.83 optparse.py(724):             if self.callback is not None:
0.83 optparse.py(728):             if self.callback_args is not None:
0.83 optparse.py(731):             if self.callback_kwargs is not None:
0.83 optparse.py(576):         for checker in self.CHECK_METHODS:
0.83 state.py(132):     make_option('-p', '--password',
0.83 state.py(133):         default=None,
0.83 state.py(134):         help="password for use with authentication and/or sudo"
 --- modulename: optparse, funcname: __init__
0.83 optparse.py(563):         self._short_opts = []
0.83 optparse.py(564):         self._long_opts = []
0.83 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.83 optparse.py(583):         opts = filter(None, opts)
0.83 optparse.py(584):         if not opts:
0.83 optparse.py(586):         return opts
0.83 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.83 optparse.py(600):                 self._short_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(590):             if len(opt) < 2:
0.83 optparse.py(594):             elif len(opt) == 2:
0.83 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.83 optparse.py(607):                 self._long_opts.append(opt)
0.83 optparse.py(589):         for opt in opts:
0.83 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.83 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(631):             self.action = "store"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(137):     make_option('-H', '--hosts',
0.84 state.py(138):         default=[],
0.84 state.py(139):         help="comma-separated list of hosts to operate on"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(631):             self.action = "store"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(142):     make_option('-R', '--roles',
0.84 state.py(143):         default=[],
0.84 state.py(144):         help="comma-separated list of roles to operate on"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(631):             self.action = "store"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(147):     make_option('-x', '--exclude-hosts',
0.84 state.py(148):         default=[],
0.84 state.py(149):         help="comma-separated list of hosts to exclude"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(631):             self.action = "store"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(152):     make_option('-i', 
0.84 state.py(153):         action='append',
0.84 state.py(154):         dest='key_filename',
0.84 state.py(155):         default=None,
0.84 state.py(156):         help="path to SSH private key file. May be repeated."
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(632):         elif self.action not in self.ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(160):     make_option('-a', '--no_agent',
0.84 state.py(161):         action='store_true',
0.84 state.py(162):         default=False,
0.84 state.py(163):         help="don't use the running SSH agent"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(632):         elif self.action not in self.ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(703):         elif self.nargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(167):     make_option('-k', '--no-keys',
0.84 state.py(168):         action='store_true',
0.84 state.py(169):         default=False,
0.84 state.py(170):         help="don't load private key files from ~/.ssh/"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(632):         elif self.action not in self.ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(703):         elif self.nargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(173):     make_option('-f', '--fabfile',
0.84 state.py(174):         default='fabfile',
0.84 state.py(175):         help="Python module file to import, e.g. '../other.py'"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(631):             self.action = "store"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(638):                 if self.choices is not None:
0.84 optparse.py(643):                     self.type = "string"
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(701):             if self.nargs is None:
0.84 optparse.py(702):                 self.nargs = 1
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(178):     make_option('-w', '--warn-only',
0.84 state.py(179):         action='store_true',
0.84 state.py(180):         default=False,
0.84 state.py(181):         help="warn, instead of abort, when commands fail"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.84 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.84 optparse.py(600):                 self._short_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(590):             if len(opt) < 2:
0.84 optparse.py(594):             elif len(opt) == 2:
0.84 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.84 optparse.py(607):                 self._long_opts.append(opt)
0.84 optparse.py(589):         for opt in opts:
0.84 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.84 optparse.py(613):                 del attrs[attr]
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(611):             if attr in attrs:
0.84 optparse.py(615):                 if attr == 'default':
0.84 optparse.py(618):                     setattr(self, attr, None)
0.84 optparse.py(610):         for attr in self.ATTRS:
0.84 optparse.py(619):         if attrs:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.84 optparse.py(630):         if self.action is None:
0.84 optparse.py(632):         elif self.action not in self.ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.84 optparse.py(636):         if self.type is None:
0.84 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.84 optparse.py(666):         if self.type == "choice":
0.84 optparse.py(674):         elif self.choices is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.84 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.84 optparse.py(683):         if self.dest is None and takes_value:
0.84 optparse.py(687):             if self._long_opts:
0.84 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.84 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.84 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.84 optparse.py(703):         elif self.nargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.84 optparse.py(709):         if self.action == "callback":
0.84 optparse.py(724):             if self.callback is not None:
0.84 optparse.py(728):             if self.callback_args is not None:
0.84 optparse.py(731):             if self.callback_kwargs is not None:
0.84 optparse.py(576):         for checker in self.CHECK_METHODS:
0.84 state.py(184):     make_option('-s', '--shell',
0.84 state.py(185):         default='/bin/bash -l -c',
0.84 state.py(186):         help="specify a new shell, defaults to '/bin/bash -l -c'"
 --- modulename: optparse, funcname: __init__
0.84 optparse.py(563):         self._short_opts = []
0.84 optparse.py(564):         self._long_opts = []
0.84 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.84 optparse.py(583):         opts = filter(None, opts)
0.84 optparse.py(584):         if not opts:
0.84 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.85 optparse.py(600):                 self._short_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(638):                 if self.choices is not None:
0.85 optparse.py(643):                     self.type = "string"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(687):             if self._long_opts:
0.85 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(701):             if self.nargs is None:
0.85 optparse.py(702):                 self.nargs = 1
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(189):     make_option('-c', '--config',
0.85 state.py(190):         dest='rcfile',
0.85 state.py(191):         default=_rc_path(),
 --- modulename: state, funcname: _rc_path
0.85 state.py(87):     rc_file = '.fabricrc'
0.85 state.py(88):     if not win32:
0.85 state.py(89):         return os.path.expanduser("~/" + rc_file)
 --- modulename: posixpath, funcname: expanduser
0.85 posixpath.py(252):     if not path.startswith('~'):
0.85 posixpath.py(254):     i = path.find('/', 1)
0.85 posixpath.py(255):     if i < 0:
0.85 posixpath.py(257):     if i == 1:
0.85 posixpath.py(258):         if 'HOME' not in os.environ:
 --- modulename: UserDict, funcname: __contains__
0.85 UserDict.py(71):         return key in self.data
0.85 posixpath.py(262):             userhome = os.environ['HOME']
 --- modulename: UserDict, funcname: __getitem__
0.85 UserDict.py(19):         if key in self.data:
0.85 UserDict.py(20):             return self.data[key]
0.85 posixpath.py(270):     userhome = userhome.rstrip('/') or userhome
0.85 posixpath.py(271):     return userhome + path[i:]
0.85 state.py(192):         help="specify location of config file to use"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.85 optparse.py(600):                 self._short_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(638):                 if self.choices is not None:
0.85 optparse.py(643):                     self.type = "string"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(701):             if self.nargs is None:
0.85 optparse.py(702):                 self.nargs = 1
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(196):     make_option('--hide',
0.85 state.py(197):         metavar='LEVELS',
0.85 state.py(198):         help="comma-separated list of output levels to hide"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(616):                     setattr(self, attr, NO_DEFAULT)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(638):                 if self.choices is not None:
0.85 optparse.py(643):                     self.type = "string"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(687):             if self._long_opts:
0.85 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(701):             if self.nargs is None:
0.85 optparse.py(702):                 self.nargs = 1
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(200):     make_option('--show',
0.85 state.py(201):         metavar='LEVELS',
0.85 state.py(202):         help="comma-separated list of output levels to show"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(616):                     setattr(self, attr, NO_DEFAULT)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(638):                 if self.choices is not None:
0.85 optparse.py(643):                     self.type = "string"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(687):             if self._long_opts:
0.85 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(701):             if self.nargs is None:
0.85 optparse.py(702):                 self.nargs = 1
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(206):     make_option('--no-pty',
0.85 state.py(207):         dest='always_use_pty',
0.85 state.py(208):         action='store_false',
0.85 state.py(209):         default=True,
0.85 state.py(210):         help="do not use pseudo-terminal in run/sudo"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(632):         elif self.action not in self.ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(703):         elif self.nargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(214):     make_option('-P', '--parallel',
0.85 state.py(215):             dest='parallel',
0.85 state.py(216):             action='store_true',
0.85 state.py(217):             default=False,
0.85 state.py(218):             help="Default to parallel execution method"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.85 optparse.py(600):                 self._short_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(632):         elif self.action not in self.ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(703):         elif self.nargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(222):     make_option('-z', '--pool-size',
0.85 state.py(223):             dest='pool_size',
0.85 state.py(224):             type='int',
0.85 state.py(225):             metavar='NUM_FORKS',
0.85 state.py(226):             default=0,
0.85 state.py(227):             help="Number of concurrent processes to use when running in parallel",
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
0.85 optparse.py(600):                 self._short_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(650):             import __builtin__
0.85 optparse.py(651):             if ( type(self.type) is types.TypeType or
0.85 optparse.py(652):                  (hasattr(self.type, "__name__") and
0.85 optparse.py(656):             if self.type == "str":
0.85 optparse.py(659):             if self.type not in self.TYPES:
0.85 optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(701):             if self.nargs is None:
0.85 optparse.py(702):                 self.nargs = 1
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(231):     make_option('--abort-on-prompts',
0.85 state.py(232):         action='store_true',
0.85 state.py(233):         default=False,
0.85 state.py(234):         help="Abort instead of prompting (for password, host, etc)"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(632):         elif self.action not in self.ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(687):             if self._long_opts:
0.85 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.85 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.85 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.85 optparse.py(703):         elif self.nargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.85 optparse.py(709):         if self.action == "callback":
0.85 optparse.py(724):             if self.callback is not None:
0.85 optparse.py(728):             if self.callback_args is not None:
0.85 optparse.py(731):             if self.callback_kwargs is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 state.py(238):     make_option('--keepalive',
0.85 state.py(239):         dest='keepalive',
0.85 state.py(240):         type=int,
0.85 state.py(241):         default=0,
0.85 state.py(242):         help="enables a keepalive every n seconds"
 --- modulename: optparse, funcname: __init__
0.85 optparse.py(563):         self._short_opts = []
0.85 optparse.py(564):         self._long_opts = []
0.85 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.85 optparse.py(583):         opts = filter(None, opts)
0.85 optparse.py(584):         if not opts:
0.85 optparse.py(586):         return opts
0.85 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(590):             if len(opt) < 2:
0.85 optparse.py(594):             elif len(opt) == 2:
0.85 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.85 optparse.py(607):                 self._long_opts.append(opt)
0.85 optparse.py(589):         for opt in opts:
0.85 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.85 optparse.py(613):                 del attrs[attr]
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(611):             if attr in attrs:
0.85 optparse.py(615):                 if attr == 'default':
0.85 optparse.py(618):                     setattr(self, attr, None)
0.85 optparse.py(610):         for attr in self.ATTRS:
0.85 optparse.py(619):         if attrs:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.85 optparse.py(630):         if self.action is None:
0.85 optparse.py(631):             self.action = "store"
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.85 optparse.py(636):         if self.type is None:
0.85 optparse.py(650):             import __builtin__
0.85 optparse.py(651):             if ( type(self.type) is types.TypeType or
0.85 optparse.py(654):                 self.type = self.type.__name__
0.85 optparse.py(656):             if self.type == "str":
0.85 optparse.py(659):             if self.type not in self.TYPES:
0.85 optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.85 optparse.py(666):         if self.type == "choice":
0.85 optparse.py(674):         elif self.choices is not None:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.85 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.85 optparse.py(683):         if self.dest is None and takes_value:
0.85 optparse.py(576):         for checker in self.CHECK_METHODS:
0.85 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.86 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.86 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.86 optparse.py(701):             if self.nargs is None:
0.86 optparse.py(702):                 self.nargs = 1
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.86 optparse.py(709):         if self.action == "callback":
0.86 optparse.py(724):             if self.callback is not None:
0.86 optparse.py(728):             if self.callback_args is not None:
0.86 optparse.py(731):             if self.callback_kwargs is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 state.py(246):     make_option('--linewise',
0.86 state.py(247):         action='store_true',
0.86 state.py(248):         default=False,
0.86 state.py(249):         help="Print stdout/stderr line-by-line instead of byte-by-byte"
 --- modulename: optparse, funcname: __init__
0.86 optparse.py(563):         self._short_opts = []
0.86 optparse.py(564):         self._long_opts = []
0.86 optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
0.86 optparse.py(583):         opts = filter(None, opts)
0.86 optparse.py(584):         if not opts:
0.86 optparse.py(586):         return opts
0.86 optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
0.86 optparse.py(589):         for opt in opts:
0.86 optparse.py(590):             if len(opt) < 2:
0.86 optparse.py(594):             elif len(opt) == 2:
0.86 optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
0.86 optparse.py(607):                 self._long_opts.append(opt)
0.86 optparse.py(589):         for opt in opts:
0.86 optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.86 optparse.py(613):                 del attrs[attr]
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.86 optparse.py(613):                 del attrs[attr]
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(612):                 setattr(self, attr, attrs[attr])
0.86 optparse.py(613):                 del attrs[attr]
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(611):             if attr in attrs:
0.86 optparse.py(615):                 if attr == 'default':
0.86 optparse.py(618):                     setattr(self, attr, None)
0.86 optparse.py(610):         for attr in self.ATTRS:
0.86 optparse.py(619):         if attrs:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
0.86 optparse.py(630):         if self.action is None:
0.86 optparse.py(632):         elif self.action not in self.ACTIONS:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
0.86 optparse.py(636):         if self.type is None:
0.86 optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
0.86 optparse.py(666):         if self.type == "choice":
0.86 optparse.py(674):         elif self.choices is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
0.86 optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
0.86 optparse.py(683):         if self.dest is None and takes_value:
0.86 optparse.py(687):             if self._long_opts:
0.86 optparse.py(689):                 self.dest = self._long_opts[0][2:].replace('-', '_')
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
0.86 optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
0.86 optparse.py(700):         if self.action in self.TYPED_ACTIONS:
0.86 optparse.py(703):         elif self.nargs is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
0.86 optparse.py(709):         if self.action == "callback":
0.86 optparse.py(724):             if self.callback is not None:
0.86 optparse.py(728):             if self.callback_args is not None:
0.86 optparse.py(731):             if self.callback_kwargs is not None:
0.86 optparse.py(576):         for checker in self.CHECK_METHODS:
0.86 state.py(264): env = _AttributeDict({
0.86 state.py(265):     'again_prompt': 'Sorry, try again.',
0.86 state.py(266):     'all_hosts': [],
0.86 state.py(267):     'combine_stderr': True,
0.86 state.py(268):     'command': None,
0.86 state.py(269):     'command_prefixes': [],
0.86 state.py(270):     'cwd': '',  # Must be empty string, not None, for concatenation purposes
0.86 state.py(271):     'echo_stdin': True,
0.86 state.py(272):     'exclude_hosts': [],
0.86 state.py(273):     'host': None,
0.86 state.py(274):     'host_string': None,
0.86 state.py(275):     'lcwd': '',  # Must be empty string, not None, for concatenation purposes
0.86 state.py(276):     'local_user': _get_system_username(),
 --- modulename: state, funcname: _get_system_username
0.86 state.py(73):     if not win32:
0.86 state.py(74):         import pwd
0.86 state.py(75):         return pwd.getpwuid(os.getuid())[0]
0.86 state.py(277):     'output_prefix': True,
0.86 state.py(278):     'passwords': {},
0.86 state.py(279):     'path': '',
0.86 state.py(280):     'path_behavior': 'append',
0.86 state.py(281):     'port': None,
0.86 state.py(282):     'real_fabfile': None,
0.86 state.py(283):     'roles': [],
0.86 state.py(284):     'roledefs': {},
0.86 state.py(287):     'sudo_prefix': "sudo -S -p '%s' ",
0.86 state.py(288):     'sudo_prompt': 'sudo password:',
0.86 state.py(289):     'use_shell': True,
0.86 state.py(290):     'user': None,
0.86 state.py(291):     'version': get_version('short')
 --- modulename: version, funcname: get_version
0.86 version.py(44):     versions = {}
0.86 version.py(45):     branch = "%s.%s" % (VERSION[0], VERSION[1])
0.86 version.py(46):     tertiary = VERSION[2]
0.86 version.py(47):     type_ = VERSION[3]
0.86 version.py(48):     final = (type_ == "final")
0.86 version.py(49):     type_num = VERSION[4]
0.86 version.py(50):     firsts = "".join([x[0] for x in type_.split()])
0.86 version.py(50):     firsts = "".join([x[0] for x in type_.split()])
0.86 version.py(51):     sha = git_sha()
 --- modulename: version, funcname: git_sha
0.86 version.py(17):     loc = abspath(dirname(__file__))
 --- modulename: posixpath, funcname: dirname
0.86 posixpath.py(120):     i = p.rfind('/') + 1
0.86 posixpath.py(121):     head = p[:i]
0.86 posixpath.py(122):     if head and head != '/'*len(head):
0.86 posixpath.py(123):         head = head.rstrip('/')
0.86 posixpath.py(124):     return head
 --- modulename: posixpath, funcname: abspath
0.86 posixpath.py(343):     if not isabs(path):
 --- modulename: posixpath, funcname: isabs
0.86 posixpath.py(53):     return s.startswith('/')
0.86 posixpath.py(349):     return normpath(path)
 --- modulename: posixpath, funcname: normpath
0.86 posixpath.py(315):     slash, dot = (u'/', u'.') if isinstance(path, unicode) else ('/', '.')
0.86 posixpath.py(316):     if path == '':
0.86 posixpath.py(318):     initial_slashes = path.startswith('/')
0.86 posixpath.py(321):     if (initial_slashes and
0.86 posixpath.py(322):         path.startswith('//') and not path.startswith('///')):
0.86 posixpath.py(324):     comps = path.split('/')
0.86 posixpath.py(325):     new_comps = []
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(328):             continue
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.86 posixpath.py(331):             new_comps.append(comp)
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.86 posixpath.py(331):             new_comps.append(comp)
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.86 posixpath.py(331):             new_comps.append(comp)
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.86 posixpath.py(331):             new_comps.append(comp)
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(327):         if comp in ('', '.'):
0.86 posixpath.py(329):         if (comp != '..' or (not initial_slashes and not new_comps) or
0.86 posixpath.py(331):             new_comps.append(comp)
0.86 posixpath.py(326):     for comp in comps:
0.86 posixpath.py(334):     comps = new_comps
0.86 posixpath.py(335):     path = slash.join(comps)
0.86 posixpath.py(336):     if initial_slashes:
0.86 posixpath.py(337):         path = slash*initial_slashes + path
0.86 posixpath.py(338):     return path or dot
0.86 version.py(18):     p = Popen(
0.86 version.py(19):         "cd \"%s\" && git log -1 --format=format:%%h" % loc,
0.86 version.py(20):         shell=True,
0.86 version.py(21):         stdout=PIPE,
0.86 version.py(22):         stderr=PIPE
 --- modulename: subprocess, funcname: __init__
0.86 subprocess.py(625):         _cleanup()
 --- modulename: subprocess, funcname: _cleanup
0.86 subprocess.py(461):     for inst in _active[:]:
0.86 subprocess.py(627):         self._child_created = False
0.86 subprocess.py(628):         if not isinstance(bufsize, (int, long)):
0.86 subprocess.py(631):         if mswindows:
0.86 subprocess.py(641):             if startupinfo is not None:
0.86 subprocess.py(644):             if creationflags != 0:
0.86 subprocess.py(648):         self.stdin = None
0.86 subprocess.py(649):         self.stdout = None
0.86 subprocess.py(650):         self.stderr = None
0.86 subprocess.py(651):         self.pid = None
0.86 subprocess.py(652):         self.returncode = None
0.86 subprocess.py(653):         self.universal_newlines = universal_newlines
0.86 subprocess.py(672):          errread, errwrite) = self._get_handles(stdin, stdout, stderr)
 --- modulename: subprocess, funcname: _get_handles
0.86 subprocess.py(1031):             p2cread, p2cwrite = None, None
0.86 subprocess.py(1032):             c2pread, c2pwrite = None, None
0.86 subprocess.py(1033):             errread, errwrite = None, None
0.86 subprocess.py(1035):             if stdin is None:
0.86 subprocess.py(1036):                 pass
0.86 subprocess.py(1045):             if stdout is None:
0.86 subprocess.py(1047):             elif stdout == PIPE:
0.86 subprocess.py(1048):                 c2pread, c2pwrite = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.86 subprocess.py(1091):             r, w = os.pipe()
0.86 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1094):             return r, w
0.86 subprocess.py(1055):             if stderr is None:
0.86 subprocess.py(1057):             elif stderr == PIPE:
0.86 subprocess.py(1058):                 errread, errwrite = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.86 subprocess.py(1091):             r, w = os.pipe()
0.86 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1094):             return r, w
0.86 subprocess.py(1067):             return (p2cread, p2cwrite,
0.86 subprocess.py(1068):                     c2pread, c2pwrite,
0.86 subprocess.py(1069):                     errread, errwrite)
0.86 subprocess.py(674):         self._execute_child(args, executable, preexec_fn, close_fds,
0.86 subprocess.py(675):                             cwd, env, universal_newlines,
0.86 subprocess.py(676):                             startupinfo, creationflags, shell,
0.86 subprocess.py(677):                             p2cread, p2cwrite,
0.86 subprocess.py(678):                             c2pread, c2pwrite,
0.86 subprocess.py(679):                             errread, errwrite)
 --- modulename: subprocess, funcname: _execute_child
0.86 subprocess.py(1119):             if isinstance(args, types.StringTypes):
0.86 subprocess.py(1120):                 args = [args]
0.86 subprocess.py(1124):             if shell:
0.86 subprocess.py(1125):                 args = ["/bin/sh", "-c"] + args
0.86 subprocess.py(1126):                 if executable:
0.86 subprocess.py(1129):             if executable is None:
0.86 subprocess.py(1130):                 executable = args[0]
0.86 subprocess.py(1135):             errpipe_read, errpipe_write = self.pipe_cloexec()
 --- modulename: subprocess, funcname: pipe_cloexec
0.86 subprocess.py(1091):             r, w = os.pipe()
0.86 subprocess.py(1092):             self._set_cloexec_flag(r)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1093):             self._set_cloexec_flag(w)
 --- modulename: subprocess, funcname: _set_cloexec_flag
0.86 subprocess.py(1073):             try:
0.86 subprocess.py(1074):                 cloexec_flag = fcntl.FD_CLOEXEC
0.86 subprocess.py(1078):             old = fcntl.fcntl(fd, fcntl.F_GETFD)
0.86 subprocess.py(1079):             if cloexec:
0.86 subprocess.py(1080):                 fcntl.fcntl(fd, fcntl.F_SETFD, old | cloexec_flag)
0.86 subprocess.py(1094):             return r, w
0.86 subprocess.py(1136):             try:
0.86 subprocess.py(1137):                 try:
0.86 subprocess.py(1138):                     gc_was_enabled = gc.isenabled()
0.86 subprocess.py(1141):                     gc.disable()
0.86 subprocess.py(1142):                     try:
0.86 subprocess.py(1143):                         self.pid = os.fork()
0.86 subprocess.py(1148):                     self._child_created = True
0.86 subprocess.py(1149):                     if self.pid == 0:
0.86 subprocess.py(1219):                     if gc_was_enabled:
0.86 subprocess.py(1220):                         gc.enable()
0.86 subprocess.py(1223):                     os.close(errpipe_write)
0.86 subprocess.py(1225):                 if p2cread is not None and p2cwrite is not None:
0.86 subprocess.py(1227):                 if c2pwrite is not None and c2pread is not None:
0.86 subprocess.py(1228):                     os.close(c2pwrite)
0.86 subprocess.py(1229):                 if errwrite is not None and errread is not None:
0.86 subprocess.py(1230):                     os.close(errwrite)
0.86 subprocess.py(1234):                 data = _eintr_retry_call(os.read, errpipe_read, 1048576)
 --- modulename: subprocess, funcname: _eintr_retry_call
0.86 subprocess.py(476):     while True:
0.86 subprocess.py(477):         try:
0.86 subprocess.py(478):             return func(*args)
0.88 subprocess.py(1237):                 os.close(errpipe_read)
0.88 subprocess.py(1239):             if data != "":
0.88 subprocess.py(681):         if mswindows:
0.88 subprocess.py(689):         if p2cwrite is not None:
0.88 subprocess.py(691):         if c2pread is not None:
0.88 subprocess.py(692):             if universal_newlines:
0.88 subprocess.py(695):                 self.stdout = os.fdopen(c2pread, 'rb', bufsize)
0.88 subprocess.py(696):         if errread is not None:
0.88 subprocess.py(697):             if universal_newlines:
0.88 subprocess.py(700):                 self.stderr = os.fdopen(errread, 'rb', bufsize)
0.88 version.py(24):     return p.communicate()[0]
 --- modulename: subprocess, funcname: communicate
0.88 subprocess.py(734):         if [self.stdin, self.stdout, self.stderr].count(None) >= 2:
0.88 subprocess.py(754):         return self._communicate(input)
 --- modulename: subprocess, funcname: _communicate
0.88 subprocess.py(1304):             if self.stdin:
0.88 subprocess.py(1311):             if _has_poll:
0.88 subprocess.py(1312):                 stdout, stderr = self._communicate_with_poll(input)
 --- modulename: subprocess, funcname: _communicate_with_poll
0.88 subprocess.py(1337):             stdout = None # Return
0.88 subprocess.py(1338):             stderr = None # Return
0.88 subprocess.py(1339):             fd2file = {}
0.88 subprocess.py(1340):             fd2output = {}
0.88 subprocess.py(1342):             poller = select.poll()
0.88 subprocess.py(1343):             def register_and_append(file_obj, eventmask):
0.88 subprocess.py(1347):             def close_unregister_and_remove(fd):
0.88 subprocess.py(1352):             if self.stdin and input:
0.88 subprocess.py(1355):             select_POLLIN_POLLPRI = select.POLLIN | select.POLLPRI
0.88 subprocess.py(1356):             if self.stdout:
0.88 subprocess.py(1357):                 register_and_append(self.stdout, select_POLLIN_POLLPRI)
 --- modulename: subprocess, funcname: register_and_append
0.88 subprocess.py(1344):                 poller.register(file_obj.fileno(), eventmask)
0.88 subprocess.py(1345):                 fd2file[file_obj.fileno()] = file_obj
0.88 subprocess.py(1358):                 fd2output[self.stdout.fileno()] = stdout = []
0.88 subprocess.py(1359):             if self.stderr:
0.88 subprocess.py(1360):                 register_and_append(self.stderr, select_POLLIN_POLLPRI)
 --- modulename: subprocess, funcname: register_and_append
0.88 subprocess.py(1344):                 poller.register(file_obj.fileno(), eventmask)
0.88 subprocess.py(1345):                 fd2file[file_obj.fileno()] = file_obj
0.88 subprocess.py(1361):                 fd2output[self.stderr.fileno()] = stderr = []
0.88 subprocess.py(1363):             input_offset = 0
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1392):                         close_unregister_and_remove(fd)
 --- modulename: subprocess, funcname: close_unregister_and_remove
0.88 subprocess.py(1348):                 poller.unregister(fd)
0.88 subprocess.py(1349):                 fd2file[fd].close()
0.88 subprocess.py(1350):                 fd2file.pop(fd)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1386):                         data = os.read(fd, 4096)
0.88 subprocess.py(1387):                         if not data:
0.88 subprocess.py(1389):                         fd2output[fd].append(data)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1365):                 try:
0.88 subprocess.py(1366):                     ready = poller.poll()
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1373):                     if mode & select.POLLOUT:
0.88 subprocess.py(1385):                     elif mode & select_POLLIN_POLLPRI:
0.88 subprocess.py(1392):                         close_unregister_and_remove(fd)
 --- modulename: subprocess, funcname: close_unregister_and_remove
0.88 subprocess.py(1348):                 poller.unregister(fd)
0.88 subprocess.py(1349):                 fd2file[fd].close()
0.88 subprocess.py(1350):                 fd2file.pop(fd)
0.88 subprocess.py(1372):                 for fd, mode in ready:
0.88 subprocess.py(1364):             while fd2file:
0.88 subprocess.py(1394):             return (stdout, stderr)
0.88 subprocess.py(1317):             if stdout is not None:
0.88 subprocess.py(1318):                 stdout = ''.join(stdout)
0.88 subprocess.py(1319):             if stderr is not None:
0.88 subprocess.py(1320):                 stderr = ''.join(stderr)
0.88 subprocess.py(1326):             if self.universal_newlines and hasattr(file, 'newlines'):
0.88 subprocess.py(1332):             self.wait()
 --- modulename: subprocess, funcname: wait
0.88 subprocess.py(1289):             if self.returncode is None:
0.88 subprocess.py(1290):                 try:
0.88 subprocess.py(1291):                     pid, sts = _eintr_retry_call(os.waitpid, self.pid, 0)
 --- modulename: subprocess, funcname: _eintr_retry_call
0.88 subprocess.py(476):     while True:
0.88 subprocess.py(477):         try:
0.88 subprocess.py(478):             return func(*args)
0.88 subprocess.py(1299):                 self._handle_exitstatus(sts)
 --- modulename: subprocess, funcname: _handle_exitstatus
0.88 subprocess.py(1257):             if _WIFSIGNALED(sts):
0.88 subprocess.py(1259):             elif _WIFEXITED(sts):
0.88 subprocess.py(1260):                 self.returncode = _WEXITSTATUS(sts)
0.88 subprocess.py(1300):             return self.returncode
0.88 subprocess.py(1333):             return (stdout, stderr)
 --- modulename: subprocess, funcname: __del__
0.88 subprocess.py(713):         if not getattr(self, '_child_created', False):
0.88 subprocess.py(717):         self._internal_poll(_deadstate=_maxint)
 --- modulename: subprocess, funcname: _internal_poll
0.88 subprocess.py(1275):             if self.returncode is None:
0.88 subprocess.py(1283):             return self.returncode
0.88 subprocess.py(718):         if self.returncode is None and _active is not None:
0.88 version.py(52):     sha1 = (" (%s)" % sha) if sha else ""
0.88 version.py(55):     versions['branch'] = branch
0.88 version.py(58):     v = branch
0.88 version.py(59):     if (tertiary or final):
0.88 version.py(60):         v += "." + str(tertiary)
0.88 version.py(61):     if not final:
0.88 version.py(67):     versions['short'] = v
0.88 version.py(70):     v = branch
0.88 version.py(71):     if tertiary:
0.88 version.py(72):         v += "." + str(tertiary)
0.88 version.py(73):     if not final:
0.88 version.py(78):     versions['normal'] = v
0.88 version.py(81):     v = branch
0.88 version.py(82):     if tertiary:
0.88 version.py(83):         v += "." + str(tertiary)
0.88 version.py(84):     if not final:
0.88 version.py(90):         v += " final"
0.88 version.py(91):     versions['verbose'] = v
0.88 version.py(93):     try:
0.88 version.py(94):         return versions[form]
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(296):     env[option.dest] = option.default
0.88 state.py(295): for option in env_options:
0.88 state.py(304): commands = {}
0.88 state.py(311): connections = HostConnectionCache()
0.88 state.py(314): def default_channel():
0.88 state.py(327): class _AliasDict(_AttributeDict):
 --- modulename: state, funcname: _AliasDict
0.88 state.py(327): class _AliasDict(_AttributeDict):
0.88 state.py(356):     """
0.88 state.py(357):     def __init__(self, arg=None, aliases=None):
0.88 state.py(366):     def __setitem__(self, key, value):
0.88 state.py(373):     def expand_aliases(self, keys):
0.88 state.py(391): output = _AliasDict({
0.88 state.py(392):     'status': True,
0.88 state.py(393):     'aborts': True,
0.88 state.py(394):     'warnings': True,
0.88 state.py(395):     'running': True,
0.88 state.py(396):     'stdout': True,
0.88 state.py(397):     'stderr': True,
0.88 state.py(398):     'debug': False,
0.88 state.py(399):     'user': True
0.88 state.py(400): }, aliases={
0.88 state.py(401):     'everything': ['warnings', 'running', 'user', 'output'],
0.88 state.py(402):     'output': ['stdout', 'stderr']
 --- modulename: state, funcname: __init__
0.88 state.py(358):         init = super(_AliasDict, self).__init__
0.88 state.py(359):         if arg is not None:
0.88 state.py(360):             init(arg)
0.88 state.py(364):         dict.__setattr__(self, 'aliases', aliases)
0.88 state.py(410): io_sleep = 0.01
0.88 context_managers.py(15): if not win32:
0.88 context_managers.py(16):     import termios
0.88 context_managers.py(17):     import tty
 --- modulename: tty, funcname: <module>
0.88 tty.py(1): """Terminal utilities."""
0.89 tty.py(5): from termios import *
0.89 tty.py(7): __all__ = ["setraw", "setcbreak"]
0.89 tty.py(10): IFLAG = 0
0.89 tty.py(11): OFLAG = 1
0.89 tty.py(12): CFLAG = 2
0.89 tty.py(13): LFLAG = 3
0.89 tty.py(14): ISPEED = 4
0.89 tty.py(15): OSPEED = 5
0.89 tty.py(16): CC = 6
0.89 tty.py(18): def setraw(fd, when=TCSAFLUSH):
0.89 tty.py(30): def setcbreak(fd, when=TCSAFLUSH):
0.89 context_managers.py(20): def _set_output(groups, which):
0.89 context_managers.py(35): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
0.89 contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.89 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.89 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(37):     return wrapper
0.89 contextlib.py(85):     return helper
0.89 context_managers.py(59): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
0.89 contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.89 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.89 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(37):     return wrapper
0.89 contextlib.py(85):     return helper
0.89 context_managers.py(79): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
0.89 contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.89 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.89 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(37):     return wrapper
0.89 contextlib.py(85):     return helper
0.89 context_managers.py(103): def settings(*args, **kwargs):
0.89 context_managers.py(149): def cd(path):
0.89 context_managers.py(212): def lcd(path):
0.89 context_managers.py(226): def _change_cwd(which, path):
0.89 context_managers.py(235): def path(path, behavior='append'):
0.89 context_managers.py(266): def prefix(command):
0.89 context_managers.py(321): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
0.89 contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.89 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.89 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.89 functools.py(32):     for attr in assigned:
0.89 functools.py(34):     for attr in updated:
0.89 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.89 functools.py(34):     for attr in updated:
0.90 functools.py(37):     return wrapper
0.90 contextlib.py(85):     return helper
0.90 api.py(10): from fabric.decorators import (hosts, roles, runs_once, with_settings, task, 
 --- modulename: decorators, funcname: <module>
0.90 decorators.py(3): """
0.90 decorators.py(4): from __future__ import with_statement
0.90 decorators.py(6): from functools import wraps
0.90 decorators.py(7): from Crypto import Random
0.90 decorators.py(9): from fabric import tasks
 --- modulename: tasks, funcname: <module>
0.90 tasks.py(1): from __future__ import with_statement
0.90 tasks.py(3): from functools import wraps
0.90 tasks.py(5): from fabric import state
0.90 tasks.py(6): from fabric.utils import abort
0.90 tasks.py(7): from fabric.network import to_dict, normalize_to_string
0.90 tasks.py(8): from fabric.context_managers import settings
0.90 tasks.py(9): from fabric.job_queue import JobQueue
 --- modulename: job_queue, funcname: <module>
0.90 job_queue.py(6): """
0.90 job_queue.py(8): from pprint import pprint
 --- modulename: pprint, funcname: <module>
0.90 pprint.py(35): """
0.90 pprint.py(37): import sys as _sys
0.90 pprint.py(38): import warnings
0.90 pprint.py(40): from cStringIO import StringIO as _StringIO
0.90 pprint.py(42): __all__ = ["pprint","pformat","isreadable","isrecursive","saferepr",
0.90 pprint.py(43):            "PrettyPrinter"]
0.90 pprint.py(46): _commajoin = ", ".join
0.90 pprint.py(47): _id = id
0.90 pprint.py(48): _len = len
0.90 pprint.py(49): _type = type
0.90 pprint.py(52): def pprint(object, stream=None, indent=1, width=80, depth=None):
0.90 pprint.py(58): def pformat(object, indent=1, width=80, depth=None):
0.90 pprint.py(62): def saferepr(object):
0.90 pprint.py(66): def isreadable(object):
0.90 pprint.py(70): def isrecursive(object):
0.90 pprint.py(74): def _sorted(iterable):
0.90 pprint.py(81): class PrettyPrinter:
 --- modulename: pprint, funcname: PrettyPrinter
0.90 pprint.py(81): class PrettyPrinter:
0.90 pprint.py(82):     def __init__(self, indent=1, width=80, depth=None, stream=None):
0.90 pprint.py(113):     def pprint(self, object):
0.90 pprint.py(117):     def pformat(self, object):
0.90 pprint.py(122):     def isrecursive(self, object):
0.90 pprint.py(125):     def isreadable(self, object):
0.90 pprint.py(129):     def _format(self, object, stream, indent, allowance, context, level):
0.90 pprint.py(228):     def _repr(self, object, context, level):
0.90 pprint.py(237):     def format(self, object, context, maxlevels, level):
0.90 pprint.py(247): def _safe_repr(object, context, maxlevels, level):
0.90 pprint.py(331): def _recursion(object):
0.90 pprint.py(336): def _perfcheck(object=None):
0.90 pprint.py(349): if __name__ == "__main__":
0.90 job_queue.py(9): from Crypto import Random 
0.90 job_queue.py(10): import time
0.90 job_queue.py(12): from fabric.state import env, io_sleep
0.90 job_queue.py(15): class JobQueue(object):
 --- modulename: job_queue, funcname: JobQueue
0.90 job_queue.py(15): class JobQueue(object):
0.90 job_queue.py(32):     """
0.90 job_queue.py(33):     def __init__(self, max_running):
0.90 job_queue.py(46):     def _all_alive(self):
0.90 job_queue.py(56):     def __len__(self):
0.90 job_queue.py(62):     def close(self):
0.90 job_queue.py(72):     def append(self, process):
0.90 job_queue.py(85):     def run(self):
0.90 job_queue.py(158): def try_using(parallel_type):
0.90 job_queue.py(194): if __name__ == '__main__':
0.90 tasks.py(10): from fabric.task_utils import *
 --- modulename: task_utils, funcname: <module>
0.90 task_utils.py(1): from fabric.utils import abort, indent
0.90 task_utils.py(2): from fabric import state
0.90 task_utils.py(6): class _Dict(dict):
 --- modulename: task_utils, funcname: _Dict
0.90 task_utils.py(6): class _Dict(dict):
0.90 task_utils.py(7):     pass
0.90 task_utils.py(9): def _crawl(name, mapping):
0.90 task_utils.py(19): def crawl(name, mapping):
0.90 task_utils.py(30): def merge(hosts, roles, exclude, roledefs):
0.90 task_utils.py(61): def parse_kwargs(kwargs):
0.90 tasks.py(13): class Task(object):
 --- modulename: tasks, funcname: Task
0.90 tasks.py(13): class Task(object):
0.90 tasks.py(25):     """
0.90 tasks.py(26):     name = 'undefined'
0.90 tasks.py(27):     use_task_objects = True
0.90 tasks.py(28):     aliases = None
0.90 tasks.py(29):     is_default = False
0.90 tasks.py(32):     def __init__(self, alias=None, aliases=None, default=False,
0.90 tasks.py(40):     def run(self):
0.90 tasks.py(43):     def get_hosts(self, arg_hosts, arg_roles, arg_exclude_hosts, env=None):
0.90 tasks.py(68):     def get_pool_size(self, hosts, default):
0.90 tasks.py(83): class WrappedCallableTask(Task):
 --- modulename: tasks, funcname: WrappedCallableTask
0.90 tasks.py(83): class WrappedCallableTask(Task):
0.90 tasks.py(90):     """
0.90 tasks.py(91):     def __init__(self, callable, *args, **kwargs):
0.90 tasks.py(101):     def __call__(self, *args, **kwargs):
0.90 tasks.py(104):     def run(self, *args, **kwargs):
0.90 tasks.py(107):     def __getattr__(self, k):
0.90 tasks.py(111): def requires_parallel(task):
0.90 tasks.py(127): def _parallel_tasks(commands_to_run):
0.90 tasks.py(135): def execute(task, *args, **kwargs):
0.90 decorators.py(10): from .context_managers import settings
0.90 decorators.py(13): def task(*args, **kwargs):
0.90 decorators.py(38): def hosts(*host_list):
0.90 decorators.py(75): def roles(*role_list):
0.90 decorators.py(115): def runs_once(func):
0.90 decorators.py(143): def serial(func):
0.90 decorators.py(159): def parallel(pool_size=None):
0.90 decorators.py(189): def with_settings(**kw_settings):
0.90 api.py(12): from fabric.operations import (require, prompt, put, get, run, sudo, local,
 --- modulename: operations, funcname: <module>
0.90 operations.py(3): """
0.90 operations.py(5): from __future__ import with_statement
0.90 operations.py(7): import os
0.90 operations.py(8): import os.path
0.90 operations.py(9): import re
0.90 operations.py(10): import stat
0.90 operations.py(11): import subprocess
0.90 operations.py(12): import sys
0.90 operations.py(13): import time
0.90 operations.py(14): from glob import glob
 --- modulename: glob, funcname: <module>
0.90 glob.py(1): """Filename globbing utility."""
0.90 glob.py(3): import sys
0.90 glob.py(4): import os
0.90 glob.py(5): import re
0.90 glob.py(6): import fnmatch
0.90 glob.py(8): __all__ = ["glob", "iglob"]
0.90 glob.py(10): def glob(pathname):
0.90 glob.py(18): def iglob(pathname):
0.90 glob.py(49): def glob1(dirname, pattern):
0.90 glob.py(63): def glob0(dirname, basename):
0.90 glob.py(75): magic_check = re.compile('[*?[]')
 --- modulename: re, funcname: compile
0.90 re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
0.90 re.py(228):     cachekey = (type(key[0]),) + key
0.90 re.py(229):     p = _cache.get(cachekey)
0.90 re.py(230):     if p is not None:
0.90 re.py(232):     pattern, flags = key
0.90 re.py(233):     if isinstance(pattern, _pattern_type):
0.90 re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
0.90 sre_compile.py(475):     for tp in STRING_TYPES:
0.90 sre_compile.py(476):         if isinstance(obj, tp):
0.90 sre_compile.py(477):             return 1
0.90 re.py(239):     try:
0.90 re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
0.90 sre_compile.py(498):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
0.90 sre_compile.py(475):     for tp in STRING_TYPES:
0.90 sre_compile.py(476):         if isinstance(obj, tp):
0.90 sre_compile.py(477):             return 1
0.90 sre_compile.py(499):         pattern = p
0.90 sre_compile.py(500):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
0.90 sre_parse.py(666):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
0.90 sre_parse.py(179):         self.string = string
0.90 sre_parse.py(180):         self.index = 0
0.90 sre_parse.py(181):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(186):         char = self.string[self.index]
0.90 sre_parse.py(187):         if char[0] == "\\":
0.90 sre_parse.py(193):         self.index = self.index + len(char)
0.90 sre_parse.py(194):         self.next = char
0.90 sre_parse.py(668):     if pattern is None:
0.90 sre_parse.py(669):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
0.90 sre_parse.py(68):         self.flags = 0
0.90 sre_parse.py(69):         self.open = []
0.90 sre_parse.py(70):         self.groups = 1
0.90 sre_parse.py(71):         self.groupdict = {}
0.90 sre_parse.py(670):     pattern.flags = flags
0.90 sre_parse.py(671):     pattern.str = str
0.90 sre_parse.py(673):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
0.90 sre_parse.py(304):     items = []
0.90 sre_parse.py(305):     itemsappend = items.append
0.90 sre_parse.py(306):     sourcematch = source.match
0.90 sre_parse.py(307):     while 1:
0.90 sre_parse.py(308):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
0.90 sre_parse.py(381):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
0.90 sre_parse.py(91):         self.pattern = pattern
0.90 sre_parse.py(92):         if data is None:
0.90 sre_parse.py(93):             data = []
0.90 sre_parse.py(94):         self.data = data
0.90 sre_parse.py(95):         self.width = None
0.90 sre_parse.py(384):     subpatternappend = subpattern.append
0.90 sre_parse.py(385):     sourceget = source.get
0.90 sre_parse.py(386):     sourcematch = source.match
0.90 sre_parse.py(387):     _len = len
0.90 sre_parse.py(388):     PATTERNENDERS = _PATTERNENDERS
0.90 sre_parse.py(389):     ASSERTCHARS = _ASSERTCHARS
0.90 sre_parse.py(390):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
0.90 sre_parse.py(391):     REPEATCODES = _REPEATCODES
0.90 sre_parse.py(393):     while 1:
0.90 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.90 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(186):         char = self.string[self.index]
0.90 sre_parse.py(187):         if char[0] == "\\":
0.90 sre_parse.py(193):         self.index = self.index + len(char)
0.90 sre_parse.py(194):         self.next = char
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(398):         if this is None:
0.90 sre_parse.py(401):         if state.flags & SRE_FLAG_VERBOSE:
0.90 sre_parse.py(412):         if this and this[0] not in SPECIAL_CHARS:
0.90 sre_parse.py(415):         elif this == "[":
0.90 sre_parse.py(417):             set = []
0.90 sre_parse.py(418):             setappend = set.append
0.90 sre_parse.py(421):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
0.90 sre_parse.py(196):         if char == self.next:
0.90 sre_parse.py(200):         return 0
0.90 sre_parse.py(424):             start = set[:]
0.90 sre_parse.py(425):             while 1:
0.90 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(186):         char = self.string[self.index]
0.90 sre_parse.py(187):         if char[0] == "\\":
0.90 sre_parse.py(193):         self.index = self.index + len(char)
0.90 sre_parse.py(194):         self.next = char
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(427):                 if this == "]" and set != start:
0.90 sre_parse.py(429):                 elif this and this[0] == "\\":
0.90 sre_parse.py(431):                 elif this:
0.90 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.90 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.90 sre_parse.py(196):         if char == self.next:
0.90 sre_parse.py(200):         return 0
0.90 sre_parse.py(459):                     if code1[0] is IN:
0.90 sre_parse.py(461):                     setappend(code1)
0.90 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(186):         char = self.string[self.index]
0.90 sre_parse.py(187):         if char[0] == "\\":
0.90 sre_parse.py(193):         self.index = self.index + len(char)
0.90 sre_parse.py(194):         self.next = char
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(427):                 if this == "]" and set != start:
0.90 sre_parse.py(429):                 elif this and this[0] == "\\":
0.90 sre_parse.py(431):                 elif this:
0.90 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.90 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.90 sre_parse.py(196):         if char == self.next:
0.90 sre_parse.py(200):         return 0
0.90 sre_parse.py(459):                     if code1[0] is IN:
0.90 sre_parse.py(461):                     setappend(code1)
0.90 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(186):         char = self.string[self.index]
0.90 sre_parse.py(187):         if char[0] == "\\":
0.90 sre_parse.py(193):         self.index = self.index + len(char)
0.90 sre_parse.py(194):         self.next = char
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(427):                 if this == "]" and set != start:
0.90 sre_parse.py(429):                 elif this and this[0] == "\\":
0.90 sre_parse.py(431):                 elif this:
0.90 sre_parse.py(432):                     code1 = LITERAL, ord(this)
0.90 sre_parse.py(435):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
0.90 sre_parse.py(196):         if char == self.next:
0.90 sre_parse.py(200):         return 0
0.90 sre_parse.py(459):                     if code1[0] is IN:
0.90 sre_parse.py(461):                     setappend(code1)
0.90 sre_parse.py(426):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(184):             self.next = None
0.90 sre_parse.py(185):             return
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(427):                 if this == "]" and set != start:
0.90 sre_parse.py(428):                     break
0.90 sre_parse.py(464):             if _len(set)==1 and set[0][0] is LITERAL:
0.90 sre_parse.py(466):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
0.90 sre_parse.py(470):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
0.90 sre_parse.py(139):         self.data.append(code)
0.90 sre_parse.py(395):         if source.next in PATTERNENDERS:
0.90 sre_parse.py(397):         this = sourceget()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(184):             self.next = None
0.90 sre_parse.py(185):             return
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(398):         if this is None:
0.90 sre_parse.py(399):             break # end of pattern
0.90 sre_parse.py(661):     return subpattern
0.90 sre_parse.py(309):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
0.90 sre_parse.py(196):         if char == self.next:
0.90 sre_parse.py(200):         return 0
0.90 sre_parse.py(311):         if not nested:
0.90 sre_parse.py(312):             break
0.90 sre_parse.py(318):     if len(items) == 1:
0.90 sre_parse.py(319):         return items[0]
0.90 sre_parse.py(675):     tail = source.get()
 --- modulename: sre_parse, funcname: get
0.90 sre_parse.py(202):         this = self.next
0.90 sre_parse.py(203):         self.__next()
 --- modulename: sre_parse, funcname: __next
0.90 sre_parse.py(183):         if self.index >= len(self.string):
0.90 sre_parse.py(184):             self.next = None
0.90 sre_parse.py(185):             return
0.90 sre_parse.py(204):         return this
0.90 sre_parse.py(676):     if tail == ")":
0.90 sre_parse.py(678):     elif tail:
0.90 sre_parse.py(681):     if flags & SRE_FLAG_DEBUG:
0.90 sre_parse.py(684):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
0.90 sre_parse.py(689):     return p
0.90 sre_compile.py(504):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
0.90 sre_compile.py(482):     flags = p.pattern.flags | flags
0.90 sre_compile.py(483):     code = []
0.90 sre_compile.py(486):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
0.90 sre_compile.py(365):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
0.90 sre_parse.py(142):         if self.width:
0.90 sre_parse.py(144):         lo = hi = 0L
0.90 sre_parse.py(145):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
0.90 sre_parse.py(146):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
0.90 sre_parse.py(147):         for op, av in self.data:
0.90 sre_parse.py(148):             if op is BRANCH:
0.90 sre_parse.py(157):             elif op is CALL:
0.90 sre_parse.py(161):             elif op is SUBPATTERN:
0.90 sre_parse.py(165):             elif op in REPEATCODES:
0.90 sre_parse.py(169):             elif op in UNITCODES:
0.90 sre_parse.py(170):                 lo = lo + 1
0.90 sre_parse.py(171):                 hi = hi + 1
0.90 sre_parse.py(147):         for op, av in self.data:
0.90 sre_parse.py(174):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
0.90 sre_parse.py(175):         return self.width
0.90 sre_compile.py(366):     if lo == 0:
0.90 sre_compile.py(369):     prefix = []
0.90 sre_compile.py(370):     prefixappend = prefix.append
0.90 sre_compile.py(371):     prefix_skip = 0
0.90 sre_compile.py(372):     charset = [] # not used
0.90 sre_compile.py(373):     charsetappend = charset.append
0.90 sre_compile.py(374):     if not (flags & SRE_FLAG_IGNORECASE):
0.90 sre_compile.py(376):         for op, av in pattern.data:
0.90 sre_compile.py(377):             if op is LITERAL:
0.90 sre_compile.py(381):             elif op is SUBPATTERN and len(av[1]) == 1:
0.90 sre_compile.py(388):                 break
0.90 sre_compile.py(390):         if not prefix and pattern.data:
0.90 sre_compile.py(391):             op, av = pattern.data[0]
0.90 sre_compile.py(392):             if op is SUBPATTERN and av[1]:
0.90 sre_compile.py(409):             elif op is BRANCH:
0.90 sre_compile.py(422):             elif op is IN:
0.90 sre_compile.py(423):                 charset = av
0.90 sre_compile.py(429):     emit = code.append
0.90 sre_compile.py(430):     emit(OPCODES[INFO])
0.90 sre_compile.py(431):     skip = len(code); emit(0)
0.90 sre_compile.py(433):     mask = 0
0.90 sre_compile.py(434):     if prefix:
0.90 sre_compile.py(438):     elif charset:
0.90 sre_compile.py(439):         mask = mask + SRE_INFO_CHARSET
0.90 sre_compile.py(440):     emit(mask)
0.91 sre_compile.py(442):     if lo < MAXCODE:
0.91 sre_compile.py(443):         emit(lo)
0.91 sre_compile.py(447):     if hi < MAXCODE:
0.91 sre_compile.py(448):         emit(hi)
0.91 sre_compile.py(452):     if prefix:
0.91 sre_compile.py(463):     elif charset:
0.91 sre_compile.py(464):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
0.91 sre_compile.py(180):     emit = code.append
0.91 sre_compile.py(181):     if fixup is None:
0.91 sre_compile.py(182):         fixup = _identityfunction
0.91 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.91 sre_compile.py(209):     out = []
0.91 sre_compile.py(210):     outappend = out.append
0.91 sre_compile.py(211):     charmap = [0]*256
0.91 sre_compile.py(212):     try:
0.91 sre_compile.py(213):         for op, av in charset:
0.91 sre_compile.py(214):             if op is NEGATE:
0.91 sre_compile.py(216):             elif op is LITERAL:
0.91 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.91 sre_compile.py(25):     return x
0.91 sre_compile.py(213):         for op, av in charset:
0.91 sre_compile.py(214):             if op is NEGATE:
0.91 sre_compile.py(216):             elif op is LITERAL:
0.91 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.91 sre_compile.py(25):     return x
0.91 sre_compile.py(213):         for op, av in charset:
0.91 sre_compile.py(214):             if op is NEGATE:
0.91 sre_compile.py(216):             elif op is LITERAL:
0.91 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.91 sre_compile.py(25):     return x
0.91 sre_compile.py(213):         for op, av in charset:
0.91 sre_compile.py(228):     i = p = n = 0
0.91 sre_compile.py(229):     runs = []
0.91 sre_compile.py(230):     runsappend = runs.append
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(233):             if n == 0:
0.91 sre_compile.py(234):                 p = i
0.91 sre_compile.py(235):             n = n + 1
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(237):             runsappend((p, n))
0.91 sre_compile.py(238):             n = 0
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(233):             if n == 0:
0.91 sre_compile.py(234):                 p = i
0.91 sre_compile.py(235):             n = n + 1
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(237):             runsappend((p, n))
0.91 sre_compile.py(238):             n = 0
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(233):             if n == 0:
0.91 sre_compile.py(234):                 p = i
0.91 sre_compile.py(235):             n = n + 1
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(237):             runsappend((p, n))
0.91 sre_compile.py(238):             n = 0
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.91 sre_compile.py(239):         i = i + 1
0.91 sre_compile.py(231):     for c in charmap:
0.91 sre_compile.py(232):         if c:
0.91 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(232):         if c:
0.92 sre_compile.py(236):         elif n:
0.92 sre_compile.py(239):         i = i + 1
0.92 sre_compile.py(231):     for c in charmap:
0.92 sre_compile.py(240):     if n:
0.92 sre_compile.py(242):     if len(runs) <= 2:
0.92 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.92 sre_compile.py(259):     data = []
0.92 sre_compile.py(260):     dataappend = data.append
0.92 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.92 sre_compile.py(264):         start = (1L, 0L)
0.92 sre_compile.py(265):     m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(268):             v = v + m
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(268):             v = v + m
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(268):             v = v + m
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(271):             dataappend(v)
0.92 sre_compile.py(272):             m, v = start
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.92 sre_compile.py(269):         m = m + m
0.92 sre_compile.py(270):         if m > MAXCODE:
0.92 sre_compile.py(266):     for c in bits:
0.92 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(267):         if c:
0.93 sre_compile.py(269):         m = m + m
0.93 sre_compile.py(270):         if m > MAXCODE:
0.93 sre_compile.py(271):             dataappend(v)
0.93 sre_compile.py(272):             m, v = start
0.93 sre_compile.py(266):     for c in bits:
0.93 sre_compile.py(273):     return data
0.93 sre_compile.py(254):         outappend((CHARSET, data))
0.93 sre_compile.py(255):         return out
0.93 sre_compile.py(184):         emit(OPCODES[op])
0.93 sre_compile.py(185):         if op is NEGATE:
0.93 sre_compile.py(187):         elif op is LITERAL:
0.93 sre_compile.py(189):         elif op is RANGE:
0.93 sre_compile.py(192):         elif op is CHARSET:
0.93 sre_compile.py(193):             code.extend(av)
0.93 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.93 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.93 sre_compile.py(465):     code[skip] = len(code) - skip
0.93 sre_compile.py(489):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
0.93 sre_compile.py(34):     emit = code.append
0.93 sre_compile.py(35):     _len = len
0.93 sre_compile.py(36):     LITERAL_CODES = _LITERAL_CODES
0.93 sre_compile.py(37):     REPEATING_CODES = _REPEATING_CODES
0.93 sre_compile.py(38):     SUCCESS_CODES = _SUCCESS_CODES
0.93 sre_compile.py(39):     ASSERT_CODES = _ASSERT_CODES
0.93 sre_compile.py(40):     for op, av in pattern:
0.93 sre_compile.py(41):         if op in LITERAL_CODES:
0.93 sre_compile.py(48):         elif op is IN:
0.93 sre_compile.py(49):             if flags & SRE_FLAG_IGNORECASE:
0.93 sre_compile.py(54):                 emit(OPCODES[op])
0.93 sre_compile.py(55):                 fixup = _identityfunction
0.93 sre_compile.py(56):             skip = _len(code); emit(0)
0.93 sre_compile.py(57):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
0.93 sre_compile.py(180):     emit = code.append
0.93 sre_compile.py(181):     if fixup is None:
0.93 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
0.93 sre_compile.py(209):     out = []
0.93 sre_compile.py(210):     outappend = out.append
0.93 sre_compile.py(211):     charmap = [0]*256
0.93 sre_compile.py(212):     try:
0.93 sre_compile.py(213):         for op, av in charset:
0.93 sre_compile.py(214):             if op is NEGATE:
0.93 sre_compile.py(216):             elif op is LITERAL:
0.93 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.93 sre_compile.py(25):     return x
0.93 sre_compile.py(213):         for op, av in charset:
0.93 sre_compile.py(214):             if op is NEGATE:
0.93 sre_compile.py(216):             elif op is LITERAL:
0.93 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.93 sre_compile.py(25):     return x
0.93 sre_compile.py(213):         for op, av in charset:
0.93 sre_compile.py(214):             if op is NEGATE:
0.93 sre_compile.py(216):             elif op is LITERAL:
0.93 sre_compile.py(217):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
0.93 sre_compile.py(25):     return x
0.93 sre_compile.py(213):         for op, av in charset:
0.93 sre_compile.py(228):     i = p = n = 0
0.93 sre_compile.py(229):     runs = []
0.93 sre_compile.py(230):     runsappend = runs.append
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(233):             if n == 0:
0.93 sre_compile.py(234):                 p = i
0.93 sre_compile.py(235):             n = n + 1
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(237):             runsappend((p, n))
0.93 sre_compile.py(238):             n = 0
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(233):             if n == 0:
0.93 sre_compile.py(234):                 p = i
0.93 sre_compile.py(235):             n = n + 1
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(237):             runsappend((p, n))
0.93 sre_compile.py(238):             n = 0
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(233):             if n == 0:
0.93 sre_compile.py(234):                 p = i
0.93 sre_compile.py(235):             n = n + 1
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(237):             runsappend((p, n))
0.93 sre_compile.py(238):             n = 0
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.93 sre_compile.py(236):         elif n:
0.93 sre_compile.py(239):         i = i + 1
0.93 sre_compile.py(231):     for c in charmap:
0.93 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(232):         if c:
0.94 sre_compile.py(236):         elif n:
0.94 sre_compile.py(239):         i = i + 1
0.94 sre_compile.py(231):     for c in charmap:
0.94 sre_compile.py(240):     if n:
0.94 sre_compile.py(242):     if len(runs) <= 2:
0.94 sre_compile.py(253):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
0.94 sre_compile.py(259):     data = []
0.94 sre_compile.py(260):     dataappend = data.append
0.94 sre_compile.py(261):     if _sre.CODESIZE == 2:
0.94 sre_compile.py(264):         start = (1L, 0L)
0.94 sre_compile.py(265):     m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(268):             v = v + m
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(268):             v = v + m
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(268):             v = v + m
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(271):             dataappend(v)
0.94 sre_compile.py(272):             m, v = start
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.94 sre_compile.py(267):         if c:
0.94 sre_compile.py(269):         m = m + m
0.94 sre_compile.py(270):         if m > MAXCODE:
0.94 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(271):             dataappend(v)
0.95 sre_compile.py(272):             m, v = start
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(267):         if c:
0.95 sre_compile.py(269):         m = m + m
0.95 sre_compile.py(270):         if m > MAXCODE:
0.95 sre_compile.py(271):             dataappend(v)
0.95 sre_compile.py(272):             m, v = start
0.95 sre_compile.py(266):     for c in bits:
0.95 sre_compile.py(273):     return data
0.95 sre_compile.py(254):         outappend((CHARSET, data))
0.95 sre_compile.py(255):         return out
0.95 sre_compile.py(184):         emit(OPCODES[op])
0.95 sre_compile.py(185):         if op is NEGATE:
0.95 sre_compile.py(187):         elif op is LITERAL:
0.95 sre_compile.py(189):         elif op is RANGE:
0.95 sre_compile.py(192):         elif op is CHARSET:
0.95 sre_compile.py(193):             code.extend(av)
0.95 sre_compile.py(183):     for op, av in _optimize_charset(charset, fixup):
0.95 sre_compile.py(205):     emit(OPCODES[FAILURE])
0.95 sre_compile.py(58):             code[skip] = _len(code) - skip
0.95 sre_compile.py(40):     for op, av in pattern:
0.95 sre_compile.py(491):     code.append(OPCODES[SUCCESS])
0.95 sre_compile.py(493):     return code
0.95 sre_compile.py(509):     if p.pattern.groups > 100:
0.95 sre_compile.py(515):     groupindex = p.pattern.groupdict
0.95 sre_compile.py(516):     indexgroup = [None] * p.pattern.groups
0.95 sre_compile.py(517):     for k, i in groupindex.items():
0.95 sre_compile.py(520):     return _sre.compile(
0.95 sre_compile.py(521):         pattern, flags | p.pattern.flags, code,
0.95 sre_compile.py(522):         p.pattern.groups-1,
0.95 sre_compile.py(523):         groupindex, indexgroup
0.95 re.py(243):     if len(_cache) >= _MAXCACHE:
0.95 re.py(245):     _cache[cachekey] = p
0.95 re.py(246):     return p
0.95 glob.py(77): def has_magic(s):
0.95 operations.py(15): from traceback import format_exc
0.95 operations.py(17): from contextlib import closing
0.95 operations.py(19): from fabric.context_managers import settings, char_buffered
0.95 operations.py(20): from fabric.io import output_loop, input_loop
 --- modulename: io, funcname: <module>
0.95 io.py(1): from __future__ import with_statement
0.95 io.py(3): import sys
0.95 io.py(4): import time
0.95 io.py(5): from select import select
0.95 io.py(7): from fabric.context_managers import settings, char_buffered
0.95 io.py(8): from fabric.state import env, output, win32, io_sleep
0.95 io.py(9): from fabric.auth import get_password, set_password
0.95 io.py(10): import fabric.network
0.95 io.py(12): if win32:
0.95 io.py(16): def _flush(pipe, text):
0.95 io.py(21): def _endswith(char_list, substring):
0.95 io.py(26): def _is_newline(byte):
0.95 io.py(29): def _was_newline(capture, byte):
0.95 io.py(37): def output_loop(chan, which, capture):
0.95 io.py(145): def input_loop(chan, using_pty):
0.95 operations.py(21): from fabric.network import needs_host
0.95 operations.py(22): from fabric.sftp import SFTP
 --- modulename: sftp, funcname: <module>
0.95 sftp.py(1): from __future__ import with_statement
0.95 sftp.py(3): import hashlib
0.95 sftp.py(4): import os
0.95 sftp.py(5): import stat
0.95 sftp.py(6): import tempfile
 --- modulename: tempfile, funcname: <module>
0.95 tempfile.py(18): """
0.95 tempfile.py(21):     "NamedTemporaryFile", "TemporaryFile", # high level safe interfaces
0.95 tempfile.py(22):     "SpooledTemporaryFile",
0.95 tempfile.py(23):     "mkstemp", "mkdtemp",                  # low level safe interfaces
0.95 tempfile.py(24):     "mktemp",                              # deprecated unsafe interface
0.95 tempfile.py(25):     "TMP_MAX", "gettempprefix",            # constants
0.95 tempfile.py(26):     "tempdir", "gettempdir"
0.95 tempfile.py(32): import os as _os
0.95 tempfile.py(33): import errno as _errno
0.95 tempfile.py(34): from random import Random as _Random
 --- modulename: random, funcname: <module>
0.95 random.py(40): """
0.95 random.py(42): from __future__ import division
0.95 random.py(43): from warnings import warn as _warn
0.95 random.py(44): from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType
0.95 random.py(45): from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil
0.95 random.py(46): from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin
0.95 random.py(47): from os import urandom as _urandom
0.95 random.py(48): from binascii import hexlify as _hexlify
0.95 random.py(49): import hashlib as _hashlib
0.95 random.py(51): __all__ = ["Random","seed","random","uniform","randint","choice","sample",
0.95 random.py(52):            "randrange","shuffle","normalvariate","lognormvariate",
0.95 random.py(53):            "expovariate","vonmisesvariate","gammavariate","triangular",
0.95 random.py(54):            "gauss","betavariate","paretovariate","weibullvariate",
0.95 random.py(55):            "getstate","setstate","jumpahead", "WichmannHill", "getrandbits",
0.95 random.py(56):            "SystemRandom"]
0.95 random.py(58): NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)
0.95 random.py(59): TWOPI = 2.0*_pi
0.95 random.py(60): LOG4 = _log(4.0)
0.95 random.py(61): SG_MAGICCONST = 1.0 + _log(4.5)
0.95 random.py(62): BPF = 53        # Number of bits in a float
0.95 random.py(63): RECIP_BPF = 2**-BPF
0.95 random.py(70): import _random
0.95 random.py(72): class Random(_random.Random):
 --- modulename: random, funcname: Random
0.95 random.py(72): class Random(_random.Random):
0.95 random.py(87):     """
0.95 random.py(89):     VERSION = 3     # used by getstate/setstate
0.95 random.py(91):     def __init__(self, x=None):
0.95 random.py(100):     def seed(self, a=None):
0.95 random.py(119):     def getstate(self):
0.95 random.py(123):     def setstate(self, state):
0.95 random.py(145):     def jumpahead(self, n):
0.95 random.py(162):     def __getstate__(self): # for pickle
0.95 random.py(165):     def __setstate__(self, state):  # for pickle
0.95 random.py(168):     def __reduce__(self):
0.95 random.py(173):     def randrange(self, start, stop=None, step=1, int=int, default=None,
0.95 random.py(174):                   maxwidth=1L<<BPF):
0.95 random.py(237):     def randint(self, a, b):
0.95 random.py(243):     def _randbelow(self, n, _log=_log, int=int, _maxwidth=1L<<BPF,
0.95 random.py(244):                    _Method=_MethodType, _BuiltinMethod=_BuiltinMethodType):
0.95 random.py(272):     def choice(self, seq):
0.95 random.py(276):     def shuffle(self, x, random=None, int=int):
0.95 random.py(290):     def sample(self, population, k):
0.95 random.py(355):     def uniform(self, a, b):
0.95 random.py(361):     def triangular(self, low=0.0, high=1.0, mode=None):
0.95 random.py(380):     def normalvariate(self, mu, sigma):
0.95 random.py(405):     def lognormvariate(self, mu, sigma):
0.95 random.py(417):     def expovariate(self, lambd):
0.95 random.py(436):     def vonmisesvariate(self, mu, kappa):
0.95 random.py(486):     def gammavariate(self, alpha, beta):
0.95 random.py(558):     def gauss(self, mu, sigma):
0.95 random.py(611):     def betavariate(self, alpha, beta):
0.95 random.py(629):     def paretovariate(self, alpha):
0.95 random.py(638):     def weibullvariate(self, alpha, beta):
0.95 random.py(651): class WichmannHill(Random):
 --- modulename: random, funcname: WichmannHill
0.95 random.py(651): class WichmannHill(Random):
0.95 random.py(653):     VERSION = 1     # used by getstate/setstate
0.95 random.py(655):     def seed(self, a=None):
0.95 random.py(686):     def random(self):
0.95 random.py(717):     def getstate(self):
0.95 random.py(721):     def setstate(self, state):
0.95 random.py(731):     def jumpahead(self, n):
0.95 random.py(753):     def __whseed(self, x=0, y=0, z=0):
0.95 random.py(776):     def whseed(self, a=None):
0.95 random.py(801): class SystemRandom(Random):
 --- modulename: random, funcname: SystemRandom
0.95 random.py(801): class SystemRandom(Random):
0.95 random.py(807):     """
0.95 random.py(809):     def random(self):
0.95 random.py(813):     def getrandbits(self, k):
0.95 random.py(823):     def _stub(self, *args, **kwds):
0.95 random.py(826):     seed = jumpahead = _stub
0.95 random.py(828):     def _notimplemented(self, *args, **kwds):
0.95 random.py(831):     getstate = setstate = _notimplemented
0.95 random.py(835): def _test_generator(n, func, args):
0.95 random.py(857): def _test(N=2000):
0.95 random.py(881): _inst = Random()
 --- modulename: random, funcname: __init__
0.95 random.py(97):         self.seed(x)
 --- modulename: random, funcname: seed
0.95 random.py(109):         if a is None:
0.95 random.py(110):             try:
0.95 random.py(111):                 a = long(_hexlify(_urandom(16)), 16)
0.95 random.py(116):         super(Random, self).seed(a)
0.95 random.py(117):         self.gauss_next = None
0.95 random.py(98):         self.gauss_next = None
0.95 random.py(882): seed = _inst.seed
0.95 random.py(883): random = _inst.random
0.95 random.py(884): uniform = _inst.uniform
0.95 random.py(885): triangular = _inst.triangular
0.95 random.py(886): randint = _inst.randint
0.95 random.py(887): choice = _inst.choice
0.95 random.py(888): randrange = _inst.randrange
0.95 random.py(889): sample = _inst.sample
0.95 random.py(890): shuffle = _inst.shuffle
0.95 random.py(891): normalvariate = _inst.normalvariate
0.95 random.py(892): lognormvariate = _inst.lognormvariate
0.95 random.py(893): expovariate = _inst.expovariate
0.95 random.py(894): vonmisesvariate = _inst.vonmisesvariate
0.95 random.py(895): gammavariate = _inst.gammavariate
0.95 random.py(896): gauss = _inst.gauss
0.95 random.py(897): betavariate = _inst.betavariate
0.95 random.py(898): paretovariate = _inst.paretovariate
0.95 random.py(899): weibullvariate = _inst.weibullvariate
0.95 random.py(900): getstate = _inst.getstate
0.95 random.py(901): setstate = _inst.setstate
0.95 random.py(902): jumpahead = _inst.jumpahead
0.95 random.py(903): getrandbits = _inst.getrandbits
0.95 random.py(905): if __name__ == '__main__':
0.95 tempfile.py(36): try:
0.95 tempfile.py(37):     from cStringIO import StringIO as _StringIO
0.95 tempfile.py(41): try:
0.95 tempfile.py(42):     import fcntl as _fcntl
0.95 tempfile.py(47):     def _set_cloexec(fd):
0.95 tempfile.py(58): try:
0.95 tempfile.py(59):     import thread as _thread
0.95 tempfile.py(62): _allocate_lock = _thread.allocate_lock
0.95 tempfile.py(64): _text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL
0.95 tempfile.py(65): if hasattr(_os, 'O_NOINHERIT'):
0.95 tempfile.py(67): if hasattr(_os, 'O_NOFOLLOW'):
0.95 tempfile.py(68):     _text_openflags |= _os.O_NOFOLLOW
0.95 tempfile.py(70): _bin_openflags = _text_openflags
0.95 tempfile.py(71): if hasattr(_os, 'O_BINARY'):
0.95 tempfile.py(74): if hasattr(_os, 'TMP_MAX'):
0.95 tempfile.py(75):     TMP_MAX = _os.TMP_MAX
0.95 tempfile.py(79): template = "tmp"
0.95 tempfile.py(83): _once_lock = _allocate_lock()
0.95 tempfile.py(85): if hasattr(_os, "lstat"):
0.95 tempfile.py(86):     _stat = _os.lstat
0.95 tempfile.py(99): def _exists(fn):
0.95 tempfile.py(107): class _RandomNameSequence:
 --- modulename: tempfile, funcname: _RandomNameSequence
0.95 tempfile.py(107): class _RandomNameSequence:
0.95 tempfile.py(113):     _RandomNameSequence is an iterator."""
0.95 tempfile.py(116):                   "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
0.95 tempfile.py(117):                   "0123456789_")
0.95 tempfile.py(119):     def __init__(self):
0.95 tempfile.py(123):     @property
0.95 tempfile.py(131):     def __iter__(self):
0.95 tempfile.py(134):     def next(self):
0.95 tempfile.py(147): def _candidate_tempdir_list():
0.95 tempfile.py(175): def _get_default_tempdir():
0.95 tempfile.py(210): _name_sequence = None
0.95 tempfile.py(212): def _get_candidate_names():
0.95 tempfile.py(226): def _mkstemp_inner(dir, pre, suf, flags):
0.95 tempfile.py(248): def gettempprefix():
0.95 tempfile.py(252): tempdir = None
0.95 tempfile.py(254): def gettempdir():
0.95 tempfile.py(266): def mkstemp(suffix="", prefix=template, dir=None, text=False):
0.95 tempfile.py(303): def mkdtemp(suffix="", prefix=template, dir=None):
0.95 tempfile.py(334): def mktemp(suffix="", prefix=template, dir=None):
0.95 tempfile.py(364): class _TemporaryFileWrapper:
 --- modulename: tempfile, funcname: _TemporaryFileWrapper
0.95 tempfile.py(364): class _TemporaryFileWrapper:
0.95 tempfile.py(370):     """
0.95 tempfile.py(372):     def __init__(self, file, name, delete=True):
0.95 tempfile.py(378):     def __getattr__(self, name):
0.95 tempfile.py(390):     def __enter__(self):
0.95 tempfile.py(397):     if _os.name != 'nt':
0.95 tempfile.py(403):         unlink = _os.unlink
0.95 tempfile.py(405):         def close(self):
0.95 tempfile.py(412):         def __del__(self):
0.95 tempfile.py(417):         def __exit__(self, exc, value, tb):
0.95 tempfile.py(426): def NamedTemporaryFile(mode='w+b', bufsize=-1, suffix="",
0.95 tempfile.py(427):                        prefix=template, dir=None, delete=True):
0.95 tempfile.py(458): if _os.name != 'posix' or _os.sys.platform == 'cygwin':
0.95 tempfile.py(464):     def TemporaryFile(mode='w+b', bufsize=-1, suffix="",
0.95 tempfile.py(465):                       prefix=template, dir=None):
0.95 tempfile.py(493): class SpooledTemporaryFile:
 --- modulename: tempfile, funcname: SpooledTemporaryFile
0.95 tempfile.py(493): class SpooledTemporaryFile:
0.95 tempfile.py(497):     """
0.95 tempfile.py(498):     _rolled = False
0.95 tempfile.py(500):     def __init__(self, max_size=0, mode='w+b', bufsize=-1,
0.95 tempfile.py(501):                  suffix="", prefix=template, dir=None):
0.95 tempfile.py(507):     def _check(self, file):
0.95 tempfile.py(513):     def rollover(self):
0.95 tempfile.py(530):     def __enter__(self):
0.95 tempfile.py(535):     def __exit__(self, exc, value, tb):
0.95 tempfile.py(539):     def __iter__(self):
0.95 tempfile.py(542):     def close(self):
0.95 tempfile.py(545):     @property
0.95 tempfile.py(549):     @property
0.95 tempfile.py(553):     def fileno(self):
0.95 tempfile.py(557):     def flush(self):
0.95 tempfile.py(560):     def isatty(self):
0.95 tempfile.py(563):     @property
0.95 tempfile.py(567):     @property
0.95 tempfile.py(571):     @property
0.95 tempfile.py(575):     def next(self):
0.95 tempfile.py(578):     def read(self, *args):
0.95 tempfile.py(581):     def readline(self, *args):
0.95 tempfile.py(584):     def readlines(self, *args):
0.95 tempfile.py(587):     def seek(self, *args):
0.95 tempfile.py(590):     @property
0.95 tempfile.py(594):     def tell(self):
0.95 tempfile.py(597):     def truncate(self):
0.95 tempfile.py(600):     def write(self, s):
0.95 tempfile.py(606):     def writelines(self, iterable):
0.95 tempfile.py(612):     def xreadlines(self, *args):
0.95 sftp.py(7): from fnmatch import filter as fnfilter
0.95 sftp.py(9): from fabric.state import output, connections, env
0.95 sftp.py(10): from fabric.utils import warn
0.95 sftp.py(13): class SFTP(object):
 --- modulename: sftp, funcname: SFTP
0.95 sftp.py(13): class SFTP(object):
0.95 sftp.py(16):     """
0.95 sftp.py(17):     def __init__(self, host_string):
0.95 sftp.py(22):     def __getattr__(self, attr):
0.95 sftp.py(25):     def isdir(self, path):
0.95 sftp.py(31):     def islink(self, path):
0.95 sftp.py(37):     def exists(self, path):
0.95 sftp.py(44):     def glob(self, path):
0.95 sftp.py(58):     def walk(self, top, topdown=True, onerror=None, followlinks=False):
0.95 sftp.py(93):     def mkdir(self, path, use_sudo):
0.95 sftp.py(101):     def get(self, remote_path, local_path, local_is_path, rremote=None):
0.95 sftp.py(152):     def get_dir(self, remote_path, local_path):
0.95 sftp.py(191):     def put(self, local_path, remote_path, use_sudo, mirror_local_mode, mode,
0.95 sftp.py(246):     def put_dir(self, local_path, remote_path, use_sudo, mirror_local_mode,
0.95 operations.py(23): from fabric.state import (env, connections, output, win32, default_channel,
0.95 operations.py(25): from fabric.thread_handling import ThreadHandler
 --- modulename: thread_handling, funcname: <module>
0.95 thread_handling.py(1): import threading
0.96 thread_handling.py(2): import sys
0.96 thread_handling.py(5): class ThreadHandler(object):
 --- modulename: thread_handling, funcname: ThreadHandler
0.96 thread_handling.py(5): class ThreadHandler(object):
0.96 thread_handling.py(6):     def __init__(self, name, callable, *args, **kwargs):
0.96 operations.py(26): from fabric.utils import abort, indent, warn, puts, handle_prompt_abort
0.96 operations.py(29): if not win32:
0.96 operations.py(30):     import fcntl
0.96 operations.py(31):     import termios
0.96 operations.py(32):     import struct
0.96 operations.py(35): def _pty_size():
0.96 operations.py(62): def _handle_failure(message, exception=None):
0.96 operations.py(89): def _shell_escape(string):
0.96 operations.py(105): class _AttributeString(str):
 --- modulename: operations, funcname: _AttributeString
0.96 operations.py(105): class _AttributeString(str):
0.96 operations.py(108):     """
0.96 operations.py(109):     @property
0.96 operations.py(114): class _AttributeList(list):
 --- modulename: operations, funcname: _AttributeList
0.96 operations.py(114): class _AttributeList(list):
0.96 operations.py(117):     """
0.96 operations.py(118):     pass
0.96 operations.py(123): def require(*keys, **kwargs):
0.96 operations.py(191): def prompt(text, key=None, default='', validate=None):
0.96 operations.py(305): @needs_host
0.96 operations.py(306): def put(local_path=None, remote_path=None, use_sudo=False,
0.96 operations.py(307):     mirror_local_mode=False, mode=None):
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 operations.py(457): @needs_host
0.96 operations.py(458): def get(remote_path, local_path=None):
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 operations.py(633): def _sudo_prefix(user):
0.96 operations.py(646): def _shell_wrap(command, shell=True, sudo_prefix=None):
0.96 operations.py(670): def _prefix_commands(command, which):
0.96 operations.py(697): def _prefix_env_vars(command):
0.96 operations.py(718): def _execute(channel, command, pty=True, combine_stderr=None,
0.96 operations.py(719):     invoke_shell=False):
0.96 operations.py(812): @needs_host
0.96 operations.py(813): def open_shell(command=None):
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 operations.py(845): def _run_command(command, shell=True, pty=True, combine_stderr=True,
0.96 operations.py(846):     sudo=False, user=None):
0.96 operations.py(893): @needs_host
0.96 operations.py(894): def run(command, shell=True, pty=True, combine_stderr=None):
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 operations.py(951): @needs_host
0.96 operations.py(952): def sudo(command, shell=True, pty=True, combine_stderr=None, user=None):
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 operations.py(979): def local(command, capture=False):
0.96 operations.py(1057): @needs_host
 --- modulename: network, funcname: needs_host
0.96 network.py(334):     from fabric.state import env
0.96 network.py(335):     @wraps(func)
 --- modulename: functools, funcname: wraps
0.96 functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
0.96 functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
0.96 functools.py(32):     for attr in assigned:
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
0.96 functools.py(34):     for attr in updated:
0.96 functools.py(37):     return wrapper
0.96 network.py(343):     return host_prompting_wrapper
0.96 api.py(14): from fabric.state import env, output
0.96 api.py(15): from fabric.utils import abort, warn, puts, fastprint
0.96 api.py(16): from fabric.tasks import execute
0.96 py_file.py(12): class Statement(object):
 --- modulename: py_file, funcname: Statement
0.96 py_file.py(12): class Statement(object):
0.96 py_file.py(16): 	"""
0.96 py_file.py(17): 	def __init__(self, content=None, result=None, hide=True):
0.96 py_file.py(23): 	def get_content(self):
0.96 py_file.py(25): 	def set_content(self, content):
0.96 py_file.py(27): 	content = property(get_content, set_content)
0.96 py_file.py(30): 	def get_result(self):
0.96 py_file.py(32): 	def set_result(self, result):
0.96 py_file.py(34): 	result = property(get_result, set_result)
0.96 py_file.py(37): 	def set_show(self, hide=True):
0.96 py_file.py(40): 	def __str__(self):
0.96 py_file.py(43): 	def run(self):
0.96 py_file.py(49): class TestCase(object):
 --- modulename: py_file, funcname: TestCase
0.96 py_file.py(49): class TestCase(object):
0.96 py_file.py(52): 	"""
0.96 py_file.py(53): 	def __init__(self, name=None, positive=True):
0.96 py_file.py(57): 	def __str__(self):
0.96 py_file.py(60): 	def set_pos(pos=True):
0.96 py_file.py(62): 	def get_pos():
0.96 py_file.py(64): 	def add_statement(self, statement):
0.96 py_file.py(66): 	def show_statements(self):
0.96 py_file.py(70): 	def show_all(self):
0.96 py_file.py(74): 	def run(self):
0.96 py_file.py(78): class MyFile(object):
 --- modulename: py_file, funcname: MyFile
0.96 py_file.py(78): class MyFile(object):
0.96 py_file.py(81): 	"""
0.96 py_file.py(82): 	def __init__(self, name=None, mode='r'):
0.96 py_file.py(89): 	def read(self):
0.96 py_file.py(100): 	def write(self, content):
0.96 py_file.py(112): 	def set_mode(self, mode='r'):
0.96 py_file.py(114): 	def get_mode(self):
0.96 py_file.py(117): 	def set_local(self, local=True):
0.96 py_file.py(119): 	def get_local(self):
0.96 py_file.py(122): 	def parsing(self):
0.96 py_file.py(125): class MyTestFile(MyFile):
 --- modulename: py_file, funcname: MyTestFile
0.96 py_file.py(125): class MyTestFile(MyFile):
0.96 py_file.py(128): 	"""
0.96 py_file.py(129): 	def __init__(self, name=None, mode='r'):
0.96 py_file.py(133): 	def parsing(self):
0.96 py_file.py(149): 	def run(self):
0.96 py_file.py(153): def _test_Stetement():
0.96 py_file.py(167): def _test_TestCase():
0.96 py_file.py(178): tests = []
0.96 py_file.py(188): t = MyFile(name="testcases", mode='r')
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(84): 		self.__name = name
0.96 py_file.py(85): 		self.__local = True
0.96 py_file.py(86): 		self.__mode = mode
0.96 py_file.py(87): 		self.file = None
0.96 py_file.py(189): print t.read()
 --- modulename: py_file, funcname: read
0.96 py_file.py(90): 		if self.__name == None:
0.96 py_file.py(93): 		if self.__mode != 'r':
0.96 py_file.py(97): 		with open(self.__name, self.__mode) as f:
0.96 py_file.py(98): 			return f.read()
ddsh -s net ddns enable unix
ddsh -s net ddns enable
ddsh -s net ddns enable windows
ddsh -s net ddns enable
ddsh -s net ddns disable

0.96 py_file.py(190): t.parsing()
 --- modulename: py_file, funcname: parsing
0.96 py_file.py(123): 		print "generic parsing func.  You gotta re-write this func"
generic parsing func.  You gotta re-write this func
0.96 py_file.py(192): f = MyTestFile(name="ff", mode='r')
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(130): 		super(MyTestFile,self).__init__(name, mode)
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(84): 		self.__name = name
0.96 py_file.py(85): 		self.__local = True
0.96 py_file.py(86): 		self.__mode = mode
0.96 py_file.py(87): 		self.file = None
0.96 py_file.py(131): 		tests = []
0.96 py_file.py(193): f.parsing()
 --- modulename: py_file, funcname: parsing
0.96 py_file.py(134): 		test = None
0.96 py_file.py(135): 		for line in self.read().split('\n'):
 --- modulename: py_file, funcname: read
0.96 py_file.py(90): 		if self.__name == None:
0.96 py_file.py(93): 		if self.__mode != 'r':
0.96 py_file.py(97): 		with open(self.__name, self.__mode) as f:
0.96 py_file.py(98): 			return f.read()
0.96 py_file.py(136): 			if 0 == line.find('TEST:'):
0.96 py_file.py(138): 				test = TestCase(line[5:], True)
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(54): 		self.__name = name
0.96 py_file.py(55): 		self.__positive = positive
0.96 py_file.py(56): 		self.statements = []
0.96 py_file.py(140): 			if test == None:
0.96 py_file.py(144): 			test.add_statement(Statement(line))
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(18): 		self.__content = content
0.96 py_file.py(19): 		self.__result = result
0.96 py_file.py(20): 		self.__hide = hide
 --- modulename: py_file, funcname: add_statement
0.96 py_file.py(65): 		self.statements.append(statement)
0.96 py_file.py(135): 		for line in self.read().split('\n'):
0.96 py_file.py(136): 			if 0 == line.find('TEST:'):
0.96 py_file.py(140): 			if test == None:
0.96 py_file.py(144): 			test.add_statement(Statement(line))
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(18): 		self.__content = content
0.96 py_file.py(19): 		self.__result = result
0.96 py_file.py(20): 		self.__hide = hide
 --- modulename: py_file, funcname: add_statement
0.96 py_file.py(65): 		self.statements.append(statement)
0.96 py_file.py(135): 		for line in self.read().split('\n'):
0.96 py_file.py(136): 			if 0 == line.find('TEST:'):
0.96 py_file.py(140): 			if test == None:
0.96 py_file.py(144): 			test.add_statement(Statement(line))
 --- modulename: py_file, funcname: __init__
0.96 py_file.py(18): 		self.__content = content
0.96 py_file.py(19): 		self.__result = result
0.96 py_file.py(20): 		self.__hide = hide
 --- modulename: py_file, funcname: add_statement
0.96 py_file.py(65): 		self.statements.append(statement)
0.96 py_file.py(135): 		for line in self.read().split('\n'):
0.96 py_file.py(146): 		test.show_all()
 --- modulename: py_file, funcname: show_all
0.96 py_file.py(71): 		print self.__name
Test_remode_hostname
0.96 py_file.py(72): 		self.show_statements()
 --- modulename: py_file, funcname: show_statements
0.96 py_file.py(67): 		for statement in self.statements:
0.96 py_file.py(68): 			print statement
 --- modulename: py_file, funcname: __str__
0.96 py_file.py(41): 		return ('%s %s %d' % (self.__content, self.__result, self.__hide))
TEST:Test_remode_hostname None 1
0.96 py_file.py(67): 		for statement in self.statements:
0.96 py_file.py(68): 			print statement
 --- modulename: py_file, funcname: __str__
0.96 py_file.py(41): 		return ('%s %s %d' % (self.__content, self.__result, self.__hide))
hostname None 1
0.96 py_file.py(67): 		for statement in self.statements:
0.96 py_file.py(68): 			print statement
 --- modulename: py_file, funcname: __str__
0.96 py_file.py(41): 		return ('%s %s %d' % (self.__content, self.__result, self.__hide))
 None 1
0.96 py_file.py(67): 		for statement in self.statements:
0.96 py_file.py(147): 		tests.append(test)
0.96 py_file.py(194): f.run()
 --- modulename: py_file, funcname: run
0.96 py_file.py(150): 		for test in tests:
0.96 py_file.py(151): 			test.run()
 --- modulename: py_file, funcname: run
0.96 py_file.py(75): 		for statement in self.statements:
0.96 py_file.py(76): 			statement.run()
 --- modulename: py_file, funcname: run
0.96 py_file.py(44): 		env.user='root'
 --- modulename: state, funcname: __setattr__
0.96 state.py(58):         self[key] = value
0.96 py_file.py(45): 		env.password='abc123'
 --- modulename: state, funcname: __setattr__
0.96 state.py(58):         self[key] = value
0.96 py_file.py(46): 		env.hosts=['root@aclddw01.datadomain.com']
 --- modulename: state, funcname: __setattr__
0.96 state.py(58):         self[key] = value
0.96 py_file.py(47): 		run(self.__content)
 --- modulename: network, funcname: host_prompting_wrapper
0.96 network.py(337):         while not env.get('host_string', False):
0.96 network.py(338):             handle_prompt_abort()
 --- modulename: utils, funcname: handle_prompt_abort
0.96 utils.py(127):     import fabric.state
0.96 utils.py(128):     if fabric.state.env.abort_on_prompts:
 --- modulename: state, funcname: __getattr__
0.96 state.py(51):         try:
0.96 state.py(52):             return self[key]
0.96 network.py(339):             host_string = raw_input("No hosts found. Please specify (single)"
No hosts found. Please specify (single) host string for connection:  --- modulename: trace, funcname: _unsettrace
10.93 trace.py(80):         sys.settrace(None)
