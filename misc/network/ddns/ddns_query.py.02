#! /usr/bin/env python
"""
Support for RFC 2136 dynamic DNS updates.
Requires dnspython module
"""
try:
	import dns.query
	import dns.tsigkeyring
	import dns.update
	import dns.reversename
	import netaddr
	dns_support = True
except ImportError as e:
	dns_support = False

import sys
import os

#JAMES: remove later
import logging

formatter = logging.Formatter('%(lineno)-4s %(funcName)-12s: %(message)s')

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

error_handler = logging.FileHandler("error.log", "w")
error_handler.setLevel(logging.DEBUG)
error_handler.setFormatter(formatter)

log = logging.getLogger('ddns')
#log.addHandler(console_handler)
log.addHandler(error_handler)
log.setLevel(logging.DEBUG)

# replace host-example with the appropriated value
keyring = dns.tsigkeyring.from_text({
    'rndc-key' : 'xsDJgO6KYgo7vVIArjsZ6Q=='
})

NS_FILE = 'ns_ins_file.txt'

def __virtual__():
	"""
	Confirm dnspython is available
	"""
	if dns_support:
		return 'ddns'
	return False

def usage():
	"""
	The usage of this py

	./ddns.py cherry.local ipv6_ddr1 192.168.100.200 255.255.255.0 192.168.100.1
	
	"""
	print "update_dns.py <zone> <hostname> <ip> <mask> <dns server>"

def host_exist(zone, name, ttl, rdtype, data, nameserver='127.0.0.1', replace=False):
	"""

	"""
	# log all args first
	log.info(" ".join([zone,name,str(ttl),rdtype, data, nameserver]))

	fqdn = '{0}.{1}'.format(name,zone)
	log.info(fqdn)

	request = dns.message.make_query(fqdn, rdtype)
	answer = dns.query.udp(request, nameserver)
	log.info(answer)

	rdtype = dns.rdatatype.from_text(rdtype)
	rdata = dns.rdata.from_text(dns.rdataclass.IN, rdtype, data)

	is_update = False
	for rrset in answer.answer:
		if rdata in rrset.items:
			rr = rrset.items
			if ttl == rrset.ttl:
				if replace and (len(answer.answer) > 1
				   or len(rrset.items) > 1):
					is_update = True
					break
				return None
			is_update = True
			break

	return is_update

def forward_lookup(zone, name, ttl, ip, nameserver='127.0.0.1', replace=True):
	return host_exist(zone, name, ttl, 'A', ip, nameserver, replace)

def delete(zone, name, ip, nameserver, key=None, secret=None):
	"""
	create a nsupdate command script for removing RRsets in the DNS
	"""
	ip_ver = '0'
	# using 'with open', we don't need to close the file.  Python will take care of it.
	with open(NS_FILE, 'w') as f_ns:
		# ========== creating nsupdate instructions ==========
		f_ns.write("server %s\n" % format(nameserver))
		f_ns.write("zone %s\n" % format(zone))

		if ip.version == 4:
			ip_ver = 'A'
			rzone = "{0}.{1}".format(ip.network, "in-addr.arpa")
		else:
			ip_ver = 'AAAA'
			# example for the following line:
			# ip =  2001:db8:302::2/48
			# ip.network = '2001:db8:302::' =>  This is to get the prefix zone
			# dns.reversename.from_address/ip.network => this gets the reverse order
			#        = 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.3.0.8.b.d.0.1.0.0.2.ip6.arpa.
			# dns.reversename.from_address/ip.network [:-1] => remove the last dot
			# print ip.network
			# print dns.reversename.from_address(str(ip.network))
			rzone = "{0}".format(dns.reversename.from_address(str(ip.network)))[:-1]
		f_ns.write("update delete %s.%s IN %s %s\n" % (name, zone, ip_ver, str(ip.ip)))

		# James: need to double check if reverse zone is correct for IPv6
		f_ns.write("zone %s\n" % format(rzone))
		f_ns.write("update delete %s IN PTR %s.%s\n" % (dns.reversename.from_address(str(ip.ip)), name, zone))
		f_ns.write("send\n")
	return 1

def add(zone, name, ip, nameserver, ttl, key='None', secret='None'):
	"""
	create a nsupdate command script for adding RRsets to the DNS
	"""
	ip_ver = '0'

	# using 'with open', we don't need to close the file.  Python will take care of it.
	with open(NS_FILE, 'w') as f_ns:
		# ========== creating nsupdate instructions ==========
		f_ns.write("server %s\n" % format(nameserver))
		if not key == 'None':
			f_ns.write("key %s %s\n" % (key, secret))

		f_ns.write("zone %s\n" % format(zone))

		if ip.version == 4:
			ip_ver = 'A'
			rzone = "{0}.{1}".format(dns.reversename.from_address(str(ip.network)), "in-addr.arpa")
		else:
			ip_ver = 'AAAA'
			# example for the following line:
			# ip =  2001:db8:302::2/48
			# ip.network = '2001:db8:302::' =>  This is to get the prefix zone
			# dns.reversename.from_address/ip.network => this gets the reverse order
			#        = 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.0.3.0.8.b.d.0.1.0.0.2.ip6.arpa.
			# dns.reversename.from_address/ip.network [:-1] => remove the last dot
			# print ip.network
			# print dns.reversename.from_address(str(ip.network))
			rzone = "{0}".format(dns.reversename.from_address(str(ip.network)))[:-1]
		f_ns.write("update add %s.%s %s IN %s %s\n" % (name, zone, ttl, ip_ver, str(ip.ip)))

		# James: need to double check if reverse zone is correct for IPv6
		#f_ns.write("zone %s\n" % format(rzone))
		#f_ns.write("update add %s %s IN PTR %s.%s\n" % (dns.reversename.from_address(str(ip.ip)), ttl, name, zone))
		f_ns.write("send\n")
	return 1

def main():
	"""
	parameters:
	1/cmd:        it's the action taken for the script. (add, del, lookup)
	2/zone:       the domain name
	3/name:       the ddr hostname
	4/ip:         IP address w/ (prefixlen or mask) we want the ddns to update
	5/nameserver: dns ip
	6/ttl:        time to live value
	6/key:        TSIG key name
	7/secret:     TSIG secret

	example:
	IPv6
	./ddns_query.py add cherry.local ipv6_ddr1 2100:bad:cafe:f00d::1:101/64 192.168.100.1
	IPv4
	./ddns_query.py add cherry.local ipv6_ddr1 192.168.100.111/24 192.168.100.1 30 None
	./ddns_query.py del cherry.local ipv6_ddr1 192.168.100.111/255.255.255.0 192.168.100.1 30 rndc.key
	"""

	"""
	if (len(sys.argv) != 9):
		log.error("the len(argv) %d is wrong", len(sys.argv))
		log.error(sys.argv)
		usage()
		return
	"""
	cmd = sys.argv[1]
	zone = sys.argv[2]
	name = sys.argv[3]
	ip = netaddr.IPNetwork(sys.argv[4])
	nameserver = sys.argv[5]
	ttl = sys.argv[6]
	key = sys.argv[7]
	secret = sys.argv[8]

	log.info(" ".join([cmd, zone, name, str(ip), nameserver, ttl]))

	if os.path.isfile(NS_FILE):
		log.info("instruction file exist: %s", NS_FILE)
		os.remove(NS_FILE)

	# check if nsupdate ins file exists, del it if exisits
	# create nsupdate ins file
	# create content
	if cmd == 'add':
		if key == 'None':
			ret = add(zone, name, ip, nameserver, ttl)
		else:
			ret = add(zone, name, ip, nameserver, ttl, key, secret)
	
		if ret == 1:
			res = os.system('nsupdate -v %s' % (NS_FILE))

			# update failed: NOTAUTH => echo $? is 2
			print res
		else:
			log.error("not able to nsupdate")
	elif cmd == 'del':
		if key == 'None':
			ret = delete(zone, name, ip, nameserver, ttl)
		else:
			ret = delete(zone, name, ip, nameserver, ttl, key, secret)
	
		if ret == 1:
			res = os.system('nsupdate -v %s' % (NS_FILE))
			print res
		else:
			log.error("not able to nsupdate")
if __name__ == '__main__':
	main()
